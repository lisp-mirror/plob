# --------------------------------------------------------------------------
# NOTE: This makefile was generated by plobimake;
# ===== changes done directly to this file will be lost!
# --------------------------------------------------------------------------
PLOBDIR=/home/hkirschk/plob-2.09
FRANZCL=/opt/acl50
OPSYS=LINUX
opsys=linux
CC=gcc
COPTPIC=-fPIC
COPTDEB=-g2
COPTOPT=-O2
CPP=gcc -E -P
LDLIBS=
RELPLOBDIR=.
BINDIR=$(RELPLOBDIR)/bin
CONFDIR=$(RELPLOBDIR)/conf
RULES=$(CONFDIR)/make.rules.in
LIBDIR=$(RELPLOBDIR)/lib/$(opsys)
PSDIR=$(RELPLOBDIR)/ps
SRCDIR=$(RELPLOBDIR)/src
SRCIDIR=$(SRCDIR)/include
LISPDOCDIR=$(SRCDIR)/lisp-doc
TEXDIR=$(RELPLOBDIR)/tex
TEXIDIR=$(TEXDIR)/inputs
RPC_PROGRAM=0x20506E62
RPC_VERSION=1
HASAUTH=AUTH_NONE
AR=ar
ARFLAGS=rv
LINK=$(CC)
LINKc=$(LINK) $(LDFLAGS)
MAKE_EXE=make
MAKE_F= -f
MAKE_FILE=$(opsys)/makefile
MAKE=$(MAKE_EXE) $(MAKE_F) $(MAKE_FILE)
RANLIB=ranlib
LDSHAREDOPT=-shared
STDTARGETS=all clean dist-clean initial makefiles
SHELL=/bin/sh
C2RPC=$(BINDIR)/c2rpc -CPP   '$(CPP)' -I$(BINDIR)   -P   $(RPC_PROGRAM) -V   $(RPC_VERSION) $(C2RPCFLAGS)
C2LISP=$(BINDIR)/c2lisp -CPP   '$(CPP)' -I$(BINDIR)   $(C2LISPFLAGS)
SUFFIXES= .so .a .o  \
	 .x .lisp .c .h \
	 .bbl .aux \
	 .ps .eps .dvi .dgr .tex
DEFAULTHOST=localhost
DEFAULTTRANS=tcp
DEFAULTROOT=/opt/data/plob
DEFAULTBASE=database
COMPILEc=$(CC) $(CFLAGS) $(CPPFLAGS)
OUTPUT_OPTION_OBJ= -c   -o    $@
OUTPUT_OPTION_LIB=  $@
OUTPUT_OPTION_DLL= $(LDSHAREDOPT) -o    $@
OUTPUT_OPTION_EXE= -o    $@
CPPFLAGS=  -I$(opsys)    -I$(SRCIDIR) -DDATABASE='"$(DEFAULTBASE)"' -D$(OPSYS)=1 -DOPSYS='"$(OPSYS)"' -DHASAUTH=$(HASAUTH) 
RPCGEN=rpcgen
RPCGENFLAGS=  -D$(OPSYS)=1
all :: 
MAKECMD=fnCallMake() { \
set +e; \
status="0"; \
dirs="$$1"; \
if [ -n   "$$2" ]; then \
shift; \
args="$$*"; \
fi; \
if [ -d   "$(BINDIR)" ]; then \
PATH="$(BINDIR):$${PATH}"; export PATH; \
elif [ -d   "bin" ]; then \
PATH="`pwd`/bin:$${PATH}"; export PATH; \
fi; \
case "$(MAKEFLAGS)" in \
''|'-'*)	szMakeflags="$(MAKEFLAGS)";; \
*)		szMakeflags="-$(MAKEFLAGS)";; \
esac; \
if [ "$${szMakeflags}" = "-w" ]; then \
szMakeflags="--no-print-directory"; \
else \
szMakeflags=""; \
fi; \
if [ ! -r   "$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$(opsys)/makefile"   "makefile.in"; \
fi; \
for dir in $${dirs} ; do \
if [ ! -r   "$${dir}/$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile in $${dir}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$${dir}/$(opsys)/makefile"   "$${dir}/makefile.in"; \
fi; \
( \
echo "cd `pwd`/$${dir}"; \
cd "$${dir}"; \
$(MAKE_EXE) $${szMakeflags}  $(MAKE_F) "$(opsys)/makefile" $${args} ; \
); \
s="$$?"; \
if [ "$${s}" -ne   0 ]; then \
status="$$s"; \
fi; \
done; \
return $${status} ; \
}; fnCallMake
LNCMD=fnCallLn() { \
set +e; \
for file in $${*} ; do \
target="`basename $${file}`"; \
if [ ! -r   "$${target}" ]; then \
cmd="ln -s $${file} $${target}"; \
echo "$${cmd}"; $${cmd} ; \
fi \
done; \
return 0; \
}; fnCallLn
RMCMD=fnCallRm() { \
set +e; \
if [ -r   "$$2" ]; then \
echo ""; \
echo "$$1"; \
echo -n   "Answer 'yes' if this is ok. "; \
read answer; \
if [ "$${answer}" != "yes" ]; then \
echo ""; \
echo "Canceled $@"; \
exit 255; \
fi; \
fi; \
shift; \
echo "rm $$*"; \
rm $${*} ; \
return 0; \
}; fnCallRm
GZIP=gzip
GZIPCMD=fnCallGZip() { \
set +e; \
status="0"; \
trap "mv $<.$$$$ $<" 1 2 15; \
cmd="cp $< $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="$(GZIP) $(GZIPFLAGS) -f $<"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="mv $<.$$$$ $<; touch $@"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
else \
cmd="rm -f $@ $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
fi; \
fi; \
return $${status} ; \
}; fnCallGZip
ASSERTTOPLEVEL= \
PWD="`pwd`"; \
if [ ! -d   "src/include/allegro5" ]; then \
echo "*** "'`'"make $@' can be called only" 1>&2; \
echo "*** in the top-level directory of PLOB!" 1>&2; \
exit 1; \
fi; \
PATH="$${PWD}/bin:$${PATH}"; export PATH
config shipout : 
	@$(ASSERTTOPLEVEL); \
plobconfig -$@
standard-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -standard
advanced-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -advanced
ADDBINDIR=if [ -d   "bin" ]; then \
	    BINPATH="`pwd`/bin"; \
	  elif [ -d   "../bin" ]; then \
	    BINPATH="`(cd ../bin;pwd)`"; \
	  elif [ -d   "../../bin" ]; then \
	    BINPATH="`(cd ../../bin;pwd)`"; \
	  fi; \
	  PATH="$${BINPATH}:$${PATH}"; export PATH
$(CONFDIR)/$(opsys)/make.server : $(RULES)        $(CONFDIR)/make.server.in $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP \"$(CPP)\" -I $(CONFDIR)/$(opsys) -o $@ $(CONFDIR)/make.server.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o $@      "$(CONFDIR)/make.server.in"
server : $(CONFDIR)/$(opsys)/make.server
	@$(MAKE_EXE) $(MAKE_F) "$(CONFDIR)/$(opsys)/make.server"
tex-log-directory : log
bin log $(CONFDIR)/$(opsys) $(opsys) $(opsys)/pic : 
	@if [ ! -d   "$@" ]; then \
echo "mkdir $@"; \
mkdir  $@   ; \
fi
default-all :: 
default-clean :: 
		-rm -f   *~ core a.out gmon.out *.log log/*
default-dist-clean :: clean
		-rm -f     *.a       *.o *.so     *.fsl *.fasl *.wfasl
default-initial :: $(opsys)
$(RULES) : 
$(CONFDIR)/make.server.in : 
GETMAKEVARSCMD=fnCallGetMakeVars() { \
echo 'Looking for old configuration file, please wait ...'; \
szOldConfFile="`ls -1t $$1/../../*/conf/$(opsys)/make.vars.in 2>/dev/null|head -1`"; \
if [ -r   "$${szOldConfFile}" ]; then \
szOldConfDir="`dirname $${szOldConfFile}`"; \
szOldConfFile="`(cd $${szOldConfDir}; pwd)`/`basename $${szOldConfFile}`"; \
echo "Using old configuration file $${szOldConfFile}"; \
cp -p   "$${szOldConfFile}" "$$2"; \
fi; \
if [ ! -r   "$$2" ]; then \
cp -p   "$$1/make.vars.def" "$$2"; \
fi; \
}; fnCallGetMakeVars
$(CONFDIR)/$(opsys)/make.vars.in : 
	@if [ -d   "$(CONFDIR)" ]; then \
$(GETMAKEVARSCMD) $(CONFDIR)  $@   ; \
elif [ -r   "conf/make.vars.def" -a   ! -r   "conf/make.vars.in" ]; then \
$(GETMAKEVARSCMD) conf $(CONFDIR)/$(opsys)/make.vars.in; \
fi
makefile default-makefiles :: makefile.in $(RULES)         $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP '$(CPP)' -I $(CONFDIR)/$(opsys) -o $(opsys)/makefile makefile.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o "$(opsys)/makefile" "makefile.in"
ALLOPSYS=irix linux solaris win32
MKMAKEFILE=fnMkMakefile() { \
set +e; \
echo ''; \
echo "Making makefiles for $${1}"; \
if [ ! -r   "$(CONFDIR)/$${1}/make.vars.in" ]; then \
if [ -r   "$(CONFDIR)/$${1}/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/$$1/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
elif [ -r   "$(CONFDIR)/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
fi; \
fi; \
if [ ! -r   "$${1}/makefile" ]; then \
echo "Making bootstrap makefile for $${1}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$${1}" -o "$${1}/makefile" "makefile.in"; \
fi; \
$(MAKE_EXE) $(MAKE_F) "$${1}/makefile" makefiles; \
}
all-makefiles : 
	@$(ADDBINDIR); \
$(MKMAKEFILE); \
for o in $(ALLOPSYS); do \
fnMkMakefile $${o} ; \
done
all :: server-all
	@$(BINDIR)/plobconfig -conf $(CONFDIR)/$(opsys)/make.vars.in -start   "$(DATAROOT)"
server-stage-0 : 
	@$(BINDIR)/plobconfig -conf $(CONFDIR)/$(opsys)/make.vars.in -server   "$(DATAHOST)"
server-stage-1 : $(DEFAULTROOT)/librpclientplob.so $(DEFAULTROOT)/plobdadmin $(DEFAULTROOT)/plobdmon $(DEFAULTROOT)/plobd
server-all : server-stage-0
	$(MAKE_EXE) $(MAKE_F) $(CONFDIR)/$(opsys)/make.server DEFAULTROOT="`echo $(DEFAULTROOT)|sed 's/  *//g'`" server-stage-1
$(DEFAULTROOT) : 
	@if [ ! -d   "$@" ]; then \
mkdir  $@    > /dev/null 2>&1; \
if [ ! -d   "$@" ]; then \
echo "*** Creating $@ failed."; \
exit 1; \
fi \
fi
$(LIBDIR)/librpclientplob.so $(BINDIR)/$(opsys)/plobdadmin $(BINDIR)/$(opsys)/plobd $(BINDIR)/plobdmon : 
	@echo "*** Cannot read $@"
	@echo "*** Please check if file $@ exists and copy it to"
	@echo "*** $(DEFAULTROOT) on host `hostname` 'by hand'."
	exit 1
$(DEFAULTROOT)/librpclientplob.so : $(LIBDIR)/librpclientplob.so
	cp -p $(LIBDIR)/librpclientplob.so $(DEFAULTROOT)/librpclientplob.so
$(DEFAULTROOT)/plobdadmin : $(BINDIR)/$(opsys)/plobdadmin
	cp -p $(BINDIR)/$(opsys)/plobdadmin $(DEFAULTROOT)/plobdadmin
$(DEFAULTROOT)/plobdmon : $(BINDIR)/plobdmon
	cp -p $(BINDIR)/plobdmon $(DEFAULTROOT)/plobdmon
$(DEFAULTROOT)/plobd : $(BINDIR)/$(opsys)/plobd
	@echo "cp -p $(BINDIR)/$(opsys)/plobd $@"; \
cp -p   $(BINDIR)/$(opsys)/plobd$@    2>/dev/null; \
if [ $$? -ne 0   ]; then \
echo "Copy failed, trying to stop server ..."; \
$(CONFDIR)/$(opsys) plobdadmin -root   $(DEFAULTROOT) -close   >/dev/null 2>&1; \
cp -p   $(BINDIR)/$(opsys)/plobd$@    2>/dev/null; \
fi; \
if [ -r   "$@" ]; then \
chmod  ugo+x    $@   ; \
fi
