# --------------------------------------------------------------------------
# NOTE: This makefile was generated by plobimake;
# ===== changes done directly to this file will be lost!
# --------------------------------------------------------------------------
PLOBDIR=.
FRANZCL=
OPSYS=IRIX
opsys=irix
CC=cc
COPTPIC=-KPIC
COPTDEB=-g
COPTOPT=-O
CPP=gcc -E -P
LDLIBS=
RELPLOBDIR=../..
BINDIR=$(RELPLOBDIR)/bin
CONFDIR=$(RELPLOBDIR)/conf
RULES=$(CONFDIR)/make.rules.in
LIBDIR=$(RELPLOBDIR)/lib/$(opsys)
PSDIR=$(RELPLOBDIR)/ps
SRCDIR=$(RELPLOBDIR)/src
SRCIDIR=$(SRCDIR)/include
LISPDOCDIR=$(SRCDIR)/lisp-doc
TEXDIR=$(RELPLOBDIR)/tex
TEXIDIR=$(TEXDIR)/inputs
RPC_PROGRAM=0x20506E62
RPC_VERSION=1
HASAUTH=AUTH_NONE
AR=ar
ARFLAGS=rv
LINK=$(CC)
LINKc=$(LINK) $(LDFLAGS)
MAKE_EXE=make
MAKE_F= -f
MAKE_FILE=$(opsys)/makefile
MAKE=$(MAKE_EXE) $(MAKE_F) $(MAKE_FILE)
RANLIB=: ranlib
LDSHAREDOPT= -shared
STDTARGETS=all clean dist-clean initial makefiles
SHELL=/bin/sh
C2RPC=$(BINDIR)/c2rpc -CPP   '$(CPP)' -I$(BINDIR)   -P   $(RPC_PROGRAM) -V   $(RPC_VERSION) $(C2RPCFLAGS)
C2LISP=$(BINDIR)/c2lisp -CPP   '$(CPP)' -I$(BINDIR)   $(C2LISPFLAGS)
SUFFIXES= .so .a .o \
	 .x .lisp .c .h \
	 .bbl .aux \
	 .ps .eps .dvi .dgr .tex
DEFAULTHOST=localhost
DEFAULTTRANS=tcp
DEFAULTROOT=/opt/data/plob
DEFAULTBASE=database
COMPILEc=$(CC) $(CFLAGS) $(CPPFLAGS)
OUTPUT_OPTION_OBJ= -c   -o    $@
OUTPUT_OPTION_LIB=  $@
OUTPUT_OPTION_DLL= $(LDSHAREDOPT) -o    $@
OUTPUT_OPTION_EXE= -o    $@
CPPFLAGS=  -I$(opsys)    -I$(SRCIDIR)    -I$(FRANZCL)/home/misc -DDATABASE='"$(DEFAULTBASE)"' -D$(OPSYS)=1 -DOPSYS='"$(OPSYS)"' -DHASAUTH=$(HASAUTH) -DHASSIGINFO=1    -n32   -woff   608,625   -DBUILDDLL=1
RPCGEN=rpcgen
RPCGENFLAGS=  -D$(OPSYS)=1
all :: 
MAKECMD=fnCallMake() { \
set +e; \
status="0"; \
dirs="$$1"; \
if [ -n   "$$2" ]; then \
shift; \
args="$$*"; \
fi; \
if [ -d   "$(BINDIR)" ]; then \
PATH="$(BINDIR):$${PATH}"; export PATH; \
elif [ -d   "bin" ]; then \
PATH="`pwd`/bin:$${PATH}"; export PATH; \
fi; \
case "$(MAKEFLAGS)" in \
''|'-'*)	szMakeflags="$(MAKEFLAGS)";; \
*)		szMakeflags="-$(MAKEFLAGS)";; \
esac; \
if [ "$${szMakeflags}" = "-w" ]; then \
szMakeflags="--no-print-directory"; \
else \
szMakeflags=""; \
fi; \
if [ ! -r   "$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$(opsys)/makefile"   "makefile.in"; \
fi; \
for dir in $${dirs} ; do \
if [ ! -r   "$${dir}/$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile in $${dir}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$${dir}/$(opsys)/makefile"   "$${dir}/makefile.in"; \
fi; \
( \
echo "cd `pwd`/$${dir}"; \
cd "$${dir}"; \
$(MAKE_EXE) $${szMakeflags}  $(MAKE_F) "$(opsys)/makefile" $${args} ; \
); \
s="$$?"; \
if [ "$${s}" -ne   0 ]; then \
status="$$s"; \
fi; \
done; \
return $${status} ; \
}; fnCallMake
LNCMD=fnCallLn() { \
set +e; \
for file in $${*} ; do \
target="`basename $${file}`"; \
if [ ! -r   "$${target}" ]; then \
cmd="ln -s $${file} $${target}"; \
echo "$${cmd}"; $${cmd} ; \
fi \
done; \
return 0; \
}; fnCallLn
RMCMD=fnCallRm() { \
set +e; \
if [ -r   "$$2" ]; then \
echo ""; \
echo "$$1"; \
echo -n   "Answer 'yes' if this is ok. "; \
read answer; \
if [ "$${answer}" != "yes" ]; then \
echo ""; \
echo "Canceled $@"; \
exit 255; \
fi; \
fi; \
shift; \
echo "rm $$*"; \
rm $${*} ; \
return 0; \
}; fnCallRm
GZIP=gzip
GZIPCMD=fnCallGZip() { \
set +e; \
status="0"; \
trap "mv $<.$$$$ $<" 1 2 15; \
cmd="cp $< $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="$(GZIP) $(GZIPFLAGS) -f $<"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="mv $<.$$$$ $<; touch $@"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
else \
cmd="rm -f $@ $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
fi; \
fi; \
return $${status} ; \
}; fnCallGZip
ASSERTTOPLEVEL= \
PWD="`pwd`"; \
if [ ! -d   "src/include/allegro5" ]; then \
echo "*** "'`'"make $@' can be called only" 1>&2; \
echo "*** in the top-level directory of PLOB!" 1>&2; \
exit 1; \
fi; \
PATH="$${PWD}/bin:$${PATH}"; export PATH
config shipout : 
	@$(ASSERTTOPLEVEL); \
plobconfig -$@
standard-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -standard
advanced-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -advanced
ADDBINDIR=if [ -d   "bin" ]; then \
	    BINPATH="`pwd`/bin"; \
	  elif [ -d   "../bin" ]; then \
	    BINPATH="`(cd ../bin;pwd)`"; \
	  elif [ -d   "../../bin" ]; then \
	    BINPATH="`(cd ../../bin;pwd)`"; \
	  fi; \
	  PATH="$${BINPATH}:$${PATH}"; export PATH
$(CONFDIR)/$(opsys)/make.server : $(RULES)        $(CONFDIR)/make.server.in $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP \"$(CPP)\" -I $(CONFDIR)/$(opsys) -o $@ $(CONFDIR)/make.server.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o $@      "$(CONFDIR)/make.server.in"
server : $(CONFDIR)/$(opsys)/make.server
	@$(MAKE_EXE) $(MAKE_F) "$(CONFDIR)/$(opsys)/make.server"
tex-log-directory : log
bin log $(CONFDIR)/$(opsys) $(opsys) $(opsys)/pic : 
	@if [ ! -d   "$@" ]; then \
echo "mkdir $@"; \
mkdir  $@   ; \
fi
default-all :: 
default-clean :: 
	-rm -f   *~ core a.out gmon.out *.log log/*
default-dist-clean :: clean
	-rm -f     *.a       *.o *.so     *.fsl *.fasl *.wfasl
default-initial :: $(opsys)
$(RULES) : 
$(CONFDIR)/make.server.in : 
GETMAKEVARSCMD=fnCallGetMakeVars() { \
echo 'Looking for old configuration file, please wait ...'; \
szOldConfFile="`ls -1t $$1/../../*/conf/$(opsys)/make.vars.in 2>/dev/null|head -1`"; \
if [ -r   "$${szOldConfFile}" ]; then \
szOldConfDir="`dirname $${szOldConfFile}`"; \
szOldConfFile="`(cd $${szOldConfDir}; pwd)`/`basename $${szOldConfFile}`"; \
echo "Using old configuration file $${szOldConfFile}"; \
cp -p   "$${szOldConfFile}" "$$2"; \
fi; \
if [ ! -r   "$$2" ]; then \
cp -p   "$$1/make.vars.def" "$$2"; \
fi; \
}; fnCallGetMakeVars
$(CONFDIR)/$(opsys)/make.vars.in : 
	@if [ -d   "$(CONFDIR)" ]; then \
$(GETMAKEVARSCMD) $(CONFDIR)  $@   ; \
elif [ -r   "conf/make.vars.def" -a   ! -r   "conf/make.vars.in" ]; then \
$(GETMAKEVARSCMD) conf $(CONFDIR)/$(opsys)/make.vars.in; \
fi
makefile default-makefiles :: makefile.in $(RULES)         $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP '$(CPP)' -I $(CONFDIR)/$(opsys) -o $(opsys)/makefile makefile.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o "$(opsys)/makefile" "makefile.in"
ALLOPSYS=irix linux solaris win32
MKMAKEFILE=fnMkMakefile() { \
set +e; \
echo ''; \
echo "Making makefiles for $${1}"; \
if [ ! -r   "$(CONFDIR)/$${1}/make.vars.in" ]; then \
if [ -r   "$(CONFDIR)/$${1}/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/$$1/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
elif [ -r   "$(CONFDIR)/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
fi; \
fi; \
if [ ! -r   "$${1}/makefile" ]; then \
echo "Making bootstrap makefile for $${1}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$${1}" -o "$${1}/makefile" "makefile.in"; \
fi; \
$(MAKE_EXE) $(MAKE_F) "$${1}/makefile" makefiles; \
}
all-makefiles : 
	@$(ADDBINDIR); \
$(MKMAKEFILE); \
for o in $(ALLOPSYS); do \
fnMkMakefile $${o} ; \
done
CFLAGS=$(COPTDEB) $(COPTOPT)
STDINCLUDE= $(SRCIDIR)/global.h $(SRCIDIR)/hash.h $(SRCIDIR)/generic.h
PICDIR=$(opsys)/pic
LIBLCOMMONLIB=liblcommonplob.a
LIBRARY=$(LIBDIR)/$(LIBLCOMMONLIB)
OBJECTS=$(opsys)/lcplobroot.o $(opsys)/lcplobadmin.o $(opsys)/lcplob.o $(opsys)/lcplobmisc.o $(opsys)/lcplobff.o $(opsys)/lcplobsequ.o $(opsys)/lcplobstruct.o $(opsys)/lcplobclos.o $(opsys)/lcplobtype.o $(opsys)/lcplobnumber.o $(opsys)/lcploblock.o $(opsys)/lcplobheap.o $(opsys)/lcplobbtree.o
SHAREDOBJECTS=$(PICDIR)/lcplobroot.o $(PICDIR)/lcplobadmin.o $(PICDIR)/lcplob.o $(PICDIR)/lcplobmisc.o $(PICDIR)/lcplobff.o $(PICDIR)/lcplobsequ.o $(PICDIR)/lcplobstruct.o $(PICDIR)/lcplobclos.o $(PICDIR)/lcplobtype.o $(PICDIR)/lcplobnumber.o $(PICDIR)/lcploblock.o $(PICDIR)/lcplobheap.o $(PICDIR)/lcplobbtree.o
all :: $(opsys) $(PICDIR) $(OBJECTS) $(LIBRARY)
$(LIBRARY) : $(SHAREDOBJECTS)
	$(AR) $(ARFLAGS) $(OUTPUT_OPTION_LIB) $(SHAREDOBJECTS)
	$(RANLIB)  $@
objects :: $(SHAREDOBJECTS)
$(opsys)/lcplobroot.o : lcplobroot.c lcplobroot.h $(SRCIDIR)/plobroot.h $(lcplobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobroot.c
$(opsys)/lcplobadmin.o : lcplobadmin.c lcplobadmin.h $(SRCIDIR)/plobadmin.h $(lcplobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobadmin.c
$(opsys)/lcplob.o : lcplob.c lcplob.h $(SRCIDIR)/plob.h $(lcplobDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplob.c
$(opsys)/lcplobmisc.o : lcplobmisc.c lcplobmisc.h $(SRCIDIR)/plobmisc.h $(lcplobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobmisc.c
$(opsys)/lcplobff.o : lcplobff.c lcplobff.h $(SRCIDIR)/plobff.h $(lcplobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobff.c
$(opsys)/lcplobsequ.o : lcplobsequ.c lcplobsequ.h $(SRCIDIR)/plobsequ.h $(lcplobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobsequ.c
$(opsys)/lcplobstruct.o : lcplobstruct.c lcplobstruct.h $(SRCIDIR)/plobstruct.h $(lcplobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobstruct.c
$(opsys)/lcplobclos.o : lcplobclos.c lcplobclos.h $(SRCIDIR)/plobclos.h $(lcplobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobclos.c
$(opsys)/lcplobtype.o : lcplobtype.c lcplobtype.h $(SRCIDIR)/plobtype.h $(lcplobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobtype.c
$(opsys)/lcplobnumber.o : lcplobnumber.c lcplobnumber.h $(SRCIDIR)/plobnumber.h $(lcplobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobnumber.c
$(opsys)/lcploblock.o : lcploblock.c lcploblock.h $(SRCIDIR)/ploblock.h $(lcploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcploblock.c
$(opsys)/lcplobheap.o : lcplobheap.c lcplobheap.h $(SRCIDIR)/plobheap.h $(lcplobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobheap.c
$(opsys)/lcplobbtree.o : lcplobbtree.c lcplobbtree.h $(SRCIDIR)/plobbtree.h $(lcplobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) lcplobbtree.c
$(opsys)/pic/lcplobroot.o : lcplobroot.c lcplobroot.h $(SRCIDIR)/plobroot.h $(lcplobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobroot.c
$(opsys)/pic/lcplobadmin.o : lcplobadmin.c lcplobadmin.h $(SRCIDIR)/plobadmin.h $(lcplobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobadmin.c
$(opsys)/pic/lcplob.o : lcplob.c lcplob.h $(SRCIDIR)/plob.h $(lcplobDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplob.c
$(opsys)/pic/lcplobmisc.o : lcplobmisc.c lcplobmisc.h $(SRCIDIR)/plobmisc.h $(lcplobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobmisc.c
$(opsys)/pic/lcplobff.o : lcplobff.c lcplobff.h $(SRCIDIR)/plobff.h $(lcplobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobff.c
$(opsys)/pic/lcplobsequ.o : lcplobsequ.c lcplobsequ.h $(SRCIDIR)/plobsequ.h $(lcplobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobsequ.c
$(opsys)/pic/lcplobstruct.o : lcplobstruct.c lcplobstruct.h $(SRCIDIR)/plobstruct.h $(lcplobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobstruct.c
$(opsys)/pic/lcplobclos.o : lcplobclos.c lcplobclos.h $(SRCIDIR)/plobclos.h $(lcplobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobclos.c
$(opsys)/pic/lcplobtype.o : lcplobtype.c lcplobtype.h $(SRCIDIR)/plobtype.h $(lcplobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobtype.c
$(opsys)/pic/lcplobnumber.o : lcplobnumber.c lcplobnumber.h $(SRCIDIR)/plobnumber.h $(lcplobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobnumber.c
$(opsys)/pic/lcploblock.o : lcploblock.c lcploblock.h $(SRCIDIR)/ploblock.h $(lcploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcploblock.c
$(opsys)/pic/lcplobheap.o : lcplobheap.c lcplobheap.h $(SRCIDIR)/plobheap.h $(lcplobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobheap.c
$(opsys)/pic/lcplobbtree.o : lcplobbtree.c lcplobbtree.h $(SRCIDIR)/plobbtree.h $(lcplobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) lcplobbtree.c
initial :: $(opsys) $(PICDIR)
$(STDTARGETS) :: 
	@$(MAKE) default-$@
