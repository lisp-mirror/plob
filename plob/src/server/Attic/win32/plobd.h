#include <rpc/types.h>

/* ------------------------------------------------------------------------
| plobd.x generated by c2rpc on Tue Feb 13 10:40:22  2001
| c2rpc (C) 1996/09/19 Heiko Kirschke kirschke@informatik.uni-hamburg.de
 ----------------------------------------------------------------------- */

#if 1
#include <rpc/rpc.h>
typedef CLIENT * PCLIENT;
#include <global.h>
#endif
#if RPC_CLNT || RPC_SVC
#include <string.h>
#endif
#ifndef as_is
#define as_is void
#endif
#ifndef ABS
#define ABS(x) (((x)<0)?-(x):(x))
#endif
#ifndef MIN
#define MIN(x,y) (((x)<(y))?(x):(y))
#endif
#ifndef MAX
#define MAX(x,y) (((x)>(y))?(x):(y))
#endif
#ifndef PASTE
#define PASTE(token1,token2) token1##token2
#endif
#ifndef PASTE2
#define PASTE2(token1,token2) PASTE(token1,token2)
#endif
#ifndef EMPTY
#define EMPTY
#endif
#ifndef _SVCSUFFIX
#if LINUX
#define _SVCSUFFIX _svc
#else
#define _SVCSUFFIX EMPTY
#endif
#endif
#if !defined(DLLEXPORT)
#if WIN32
#if (BUILDDLL+0)
#define DLLEXPORT __attribute__(( dllexport )) __attribute__((__cdecl__))
#else
#define DLLEXPORT __attribute__(( dllimport )) __attribute__((__cdecl__))
#endif
#else
#define DLLEXPORT
#endif
#endif
#if !defined(DLLEXPORTVAR)
#if WIN32
#if (BUILDDLL+0)
#define DLLEXPORTVAR __attribute__(( dllexport ))
#else
#define DLLEXPORTVAR __attribute__(( dllimport ))
#endif
#else
#define DLLEXPORTVAR
#endif
#endif
#if WIN32
#define strdup _strdup
#endif


#if ! defined(AlignBitsToWords)
#define AlignBitsToWords( nSizeInBits ) (int ) ( ( (nSizeInBits) + nSizeOfPostoreWord * nBitsPerByte -1 ) / ( nSizeOfPostoreWord * nBitsPerByte ) )
#endif



extern DLLEXPORTVAR int __bInitializePlob__ ;
extern DLLEXPORTVAR int __bDeinitializePlob__ ;
void fnServerInitializePlob ( int argc,char * argv [] );
#if ! defined(INITIALIZEPLOB)
void fnInitializePlob ( void );
#define INITIALIZEPLOB ((__bInitializePlob__)? (fnInitializePlob(),TRUE):FALSE)
#endif

#if (RPC_SVC+0)

extern DLLEXPORTVAR int nGlobalStored;
extern DLLEXPORTVAR OBJID oGlobalSession;

#if !defined(UNSTORESESSION)
#define UNSTORESESSION() (__bJmpBufErrorValid__=FALSE,nGlobalStored=0,oGlobalSession=NULLOBJID)
#endif
#if !defined(UnstoreSession)
#define UnstoreSession() ((--nGlobalStored==0)?(UNSTORESESSION(),TRUE):FALSE)
#endif

extern DLLEXPORTVAR LPCSTR __lpszErrorMessage__;
extern DLLEXPORTVAR ERRLVL __nErrorLevel__;


#define RPC_SERVER_INITIALIZE(argc,argv) fnServerInitializePlob(argc,argv)


#define RPC_SERVER_ENTRY() { UNSTORESESSION (); __nErrorLevel__ = errLvl0; if ( __lpszErrorMessage__ != NULL ) { free ( (LPVOID) __lpszErrorMessage__ ); __lpszErrorMessage__ = (LPCSTR) NULL; } INITIALIZEPLOB;}
#define RPC_SERVER_ERRLVL() ((__bDeinitializePlob__)?0:__nErrorLevel__)
#define RPC_SERVER_ERRMSG() ((__bDeinitializePlob__)?(LPCSTR) NULL:__lpszErrorMessage__)

#include <rpc/rpc.h>
#include <rpc/svc.h>

void fnInitializeAfterRegister ( void );
static void fnSvcRun ( void )
{
 INITIALIZEPLOB;
 fnInitializeAfterRegister ();
 svc_run();
}

#ifdef svc_run
#undef svc_run
#endif
#define svc_run fnSvcRun

#endif

#if (RPC_CLNT+0)

#define RPC_CLIENT_INITIALIZE() INITIALIZEPLOB

extern PCLIENT fnClientCreate ( LPCSTR pszHost,
 LPCSTR pszTransport );
#define RPC_CLIENT_CREATE(host,transport) fnClientCreate ( host,transport )

extern PCLIENT fnClientDestroy ( PCLIENT pClient );
#define RPC_CLIENT_DESTROY(pclient) fnClientDestroy ( pclient )

#define RPC_CLIENT_ERROR(msg) ((__bDeinitializePlob__)? FALSE: (fnLISPerrorCallback(errLvlError,NULL,msg),TRUE))
#define RPC_CLIENT_CERROR(cont,msg) ((__bDeinitializePlob__)? FALSE: (fnLISPerrorCallback(errLvlCError,cont,msg),TRUE))
#define RPC_CLIENT_SERROR(lvl,proc,msg) ((__bDeinitializePlob__)? FALSE: (fnLISPserrorCallback(lvl,proc,msg),TRUE))

#endif

#if (RPC_SVC+0)||(RPC_CLNT+0)

#define xdr_fnServerObjectReadValues_rets xdr_fnPatchedServerObjectReadValues_rets
#define xdr_fnServerObjectWriteValues_args xdr_fnPatchedServerObjectWriteValues_args
#define xdr_fnServerObjectPeekValues_rets xdr_fnPatchedServerObjectPeekValues_rets
#define xdr_fnServerObjectPoke_args xdr_fnPatchedServerObjectPoke_args
#include "plobpxdr.h"

#endif


#ifndef RPCNOTYPES

#define eshRootTag 136
#define eshUserTag 256
#define eshMachTag 272
#define NULLOBJID 0
#define NULLTYPETAG -1
#define nBitsPerByte 8
#define nBitsPerBigit 16
#define nSizeOfPostoreWord 4
#define nFixnumBits 30
#define nTagBits 3
#define nTagMask 0
#define MAX_URL 256
#define eshConsTag 8
#define eshVectorTag 64
#define eshIVectorTag 192
#define eshArrayTag 32
#define eshStringTag 40
#define eshBitVectorTag 48
#define eshStructureTag 56
#define eshInstanceTag 72
#define eshSingleFloatValueSize 1
#define eshDoubleFloatValueSize 2
#define eshSumLockTag 168
#define eshOneLockTag 176
#define eshQueueEntryTag 208
#define NULLTRACTID 0
#define eshHeapTag 144
#define eshBTreeTag 152
#define eshBTreePageTag 160
#define eshBTreeMapperTag 216
#define eshGetTestMode -2

enum GETVERSION {
	esvDatabase = 1,
	esvServerCode = 2,
	esvClientCcode = 3,
	esvClientLispCode = 4,
};
typedef enum GETVERSION GETVERSION;
#ifdef __cplusplus
extern "C" {
bool_t xdr_GETVERSION(...);
}
#else
bool_t xdr_GETVERSION();
#endif


enum MACHLOGINP {
	eshLoginIgnore = 0,
	eshLoginAllow = 1,
	eshLoginDeny = 2,
	eshLoginGet = 3,
};
typedef enum MACHLOGINP MACHLOGINP;
#ifdef __cplusplus
extern "C" {
bool_t xdr_MACHLOGINP(...);
}
#else
bool_t xdr_MACHLOGINP();
#endif


enum LISPROOTIDX {
	eshLispRootIdxVersion = 1,
	eshLispRootIdxLispFormat = 2,
	eshLispRootIdxTimeFormat = 3,
	eshLispRootIdxNamePkgTable = 4,
	eshLispRootIdxSymbolClassTable = 5,
	eshLispRootIdxStructDescr = 6,
	eshLispRootIdxStructSlotDescr = 7,
	eshLispRootIdxPkgDescr = 8,
	eshLispRootIdxPlobDescr = 9,
	eshLispRootIdxClassDescr = 10,
	eshLispRootIdxSlotDescr = 11,
	eshLispRootIdxDirSlotDescr = 12,
	eshLispRootIdxEffSlotDescr = 13,
	eshLispRootIdxMethodDescr = 14,
	eshLispRootIdxPFS = 15,
	eshLispRootSize = 16,
};
typedef enum LISPROOTIDX LISPROOTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_LISPROOTIDX(...);
}
#else
bool_t xdr_LISPROOTIDX();
#endif


enum SHSYMBOLIDX {
	eshSymbolIdxFunction = 0,
	eshSymbolIdxPackage = 1,
	eshSymbolIdxPList = 2,
	eshSymbolIdxName = 3,
	eshSymbolIdxValue = 4,
	eshSymbolObjIdSize = 5,
};
typedef enum SHSYMBOLIDX SHSYMBOLIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHSYMBOLIDX(...);
}
#else
bool_t xdr_SHSYMBOLIDX();
#endif


enum SHFUNCTIONIDX {
	eshFunctionIdxName = 0,
	eshFunctionIdxLanguage = 1,
	eshFunctionIdxCode = 2,
	eshFunctionSize = 3,
};
typedef enum SHFUNCTIONIDX SHFUNCTIONIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHFUNCTIONIDX(...);
}
#else
bool_t xdr_SHFUNCTIONIDX();
#endif


enum SHTLATTERIDX {
	eshTLatterIdxKey = 0,
	eshTLatterIdxData = 1,
	eshTLatterIdxNext = 2,
	eshTLatterObjIdSize = 3,
};
typedef enum SHTLATTERIDX SHTLATTERIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHTLATTERIDX(...);
}
#else
bool_t xdr_SHTLATTERIDX();
#endif


enum SHTYPETAG {
	eshObjIdTag = 0,
	eshFixnumTag = 1,
	eshShortFloatTag = 2,
	eshCharacterTag = 3,
	eshMarkerTag = 4,
	eshUnboundTag = 260,
	eshSlotUnboundTag = 516,
	eshUnstorableTag = 772,
	eshEndTag = 1028,
	eshMinTag = 1284,
	eshMaxTag = 1540,
	eshTrueTag = 1796,
	eshIgnoreSlotTag = 2052,
	eshNilTag = 2308,
	eshAllowTag = 2564,
	eshDenyTag = 2820,
	eshEqTag = 3076,
	eshEqlTag = 3332,
	eshEqualTag = 3588,
	eshBitmaskTag = 6,
	eshBuiltInTag = 7,
	eshSymbolTag = 16,
	eshFunctionTag = 24,
	eshSingleFloatTag = 80,
	eshDoubleFloatTag = 88,
	eshBignumTag = 96,
	eshRatioTag = 104,
	eshComplexTag = 112,
	eshTLatterTag = 184,
	eshShortObjIdTag = 120,
	eshDynCStringPtrTag = 128,
	eshDynCFloatPtrTag = 200,
	eshDynCDoublePtrTag = 224,
	eshDynCQuadruplePtrTag = 232,
};
typedef enum SHTYPETAG SHTYPETAG;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHTYPETAG(...);
}
#else
bool_t xdr_SHTYPETAG();
#endif


enum ERRLVL {
	errLvl0 = 0,
	errLvlInfo = 1,
	errLvlWarn = 2,
	errLvlCError = 3,
	errLvlError = 4,
	errLvlFatal = 5,
};
typedef enum ERRLVL ERRLVL;
#ifdef __cplusplus
extern "C" {
bool_t xdr_ERRLVL(...);
}
#else
bool_t xdr_ERRLVL();
#endif


enum GETACTION {
	eGetPortPassive = 1,
	eGetPortActive = 2,
	eCreateDatabase = 4,
	eStartServer = 8,
};
typedef enum GETACTION GETACTION;
#ifdef __cplusplus
extern "C" {
bool_t xdr_GETACTION(...);
}
#else
bool_t xdr_GETACTION();
#endif


enum SHLOCK {
	eshKeyNotFound = -10,
	eshLockErrorFirst = -9,
	eshLockErrorLast = -1,
	eshLockDenied = -9,
	eshUnknownLockMode = -8,
	eshGeneralError = -7,
	eshUnlockFailed = -6,
	eshWriteFailed = -5,
	eshLockFailed = -4,
	eshLockConflictFirst = -3,
	eshLockConflictLast = -1,
	eshLockConflictElement = -3,
	eshLockConflictVector = -2,
	eshLockConflictStore = -1,
	eshLockModeReadOnlyIntent = 32,
	eshLockModeReadIntent = 64,
	eshLockModeWriteIntent = 128,
	eshLockLevelNothing = 0,
	eshLockLevelMin = 1,
	eshLockLevelMax = 3,
	eshLockLevelElement = 1,
	eshLockLevelVector = 2,
	eshLockLevelStore = 3,
	eshLockModeNothing = 0,
	eshLockModeReadOnly = 4,
	eshLockModeRead = 8,
	eshLockModeWrite = 16,
	eshUnlock = 256,
	eshLockForce = 512,
	eshLockPeek = 1024,
	eshLockElementRead = 9,
	eshLockVectorRead = 10,
	eshLockStoreRead = 11,
	eshLockElementWrite = 17,
	eshLockVectorWrite = 18,
	eshLockStoreWrite = 19,
	eshLockLevelMask = 3,
	eshLockModeMask = 28,
	eshLockModeExcl = 16,
};
typedef enum SHLOCK SHLOCK;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHLOCK(...);
}
#else
bool_t xdr_SHLOCK();
#endif


enum DAYLIGHTSAVINGTIME {
	eDstNone = 0,
	eDstUsa = 1,
	eDstAust = 2,
	eDstWet = 3,
	eDstMet = 4,
	eDstEet = 5,
	eDstCan = 6,
	eDstGb = 7,
	eDstRum = 8,
	eDstTur = 9,
	eDstAustAlt = 10,
};
typedef enum DAYLIGHTSAVINGTIME DAYLIGHTSAVINGTIME;
#ifdef __cplusplus
extern "C" {
bool_t xdr_DAYLIGHTSAVINGTIME(...);
}
#else
bool_t xdr_DAYLIGHTSAVINGTIME();
#endif


enum DEPENDENTMODE {
	flagDependentGet = -1,
	flagDependentNone = 0,
	flagDependentRead = 4,
	flagDependentWrite = 8,
	flagDependentReadWrite = 12,
};
typedef enum DEPENDENTMODE DEPENDENTMODE;
#ifdef __cplusplus
extern "C" {
bool_t xdr_DEPENDENTMODE(...);
}
#else
bool_t xdr_DEPENDENTMODE();
#endif


enum NUMERICSTDSTREAM {
	eshStdIn = 0,
	eshStdOut = 1,
	eshStdErr = 2,
};
typedef enum NUMERICSTDSTREAM NUMERICSTDSTREAM;
#ifdef __cplusplus
extern "C" {
bool_t xdr_NUMERICSTDSTREAM(...);
}
#else
bool_t xdr_NUMERICSTDSTREAM();
#endif


enum FLUSHMODE {
	flushGet = -1,
	flushNever = 0,
	flushSeldom = 1,
	flushSometimes = 2,
	flushOften = 3,
	flushAlways = 4,
	flushDefault = 0,
};
typedef enum FLUSHMODE FLUSHMODE;
#ifdef __cplusplus
extern "C" {
bool_t xdr_FLUSHMODE(...);
}
#else
bool_t xdr_FLUSHMODE();
#endif


enum FLAGMODE {
	flagGet = -1,
	flagSet = 0,
};
typedef enum FLAGMODE FLAGMODE;
#ifdef __cplusplus
extern "C" {
bool_t xdr_FLAGMODE(...);
}
#else
bool_t xdr_FLAGMODE();
#endif


enum SHCONSIDX {
	eshConsIdxCar = 0,
	eshConsIdxCdr = 1,
	eshConsObjIdSize = 2,
};
typedef enum SHCONSIDX SHCONSIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHCONSIDX(...);
}
#else
bool_t xdr_SHCONSIDX();
#endif


enum SHVECTORIDX {
	eshVectorObjIdSize = 0,
};
typedef enum SHVECTORIDX SHVECTORIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHVECTORIDX(...);
}
#else
bool_t xdr_SHVECTORIDX();
#endif


enum IVECTORTAG {
	eshSignedByte2Tag = 5892,
	eshSignedByte4Tag = 9988,
	eshSignedByte8Tag = 14084,
	eshSignedByte16Tag = 18180,
	eshSignedByte32Tag = 22276,
	eshUnsignedByte1Tag = 46852,
	eshUnsignedByte2Tag = 26372,
	eshUnsignedByte4Tag = 30468,
	eshUnsignedByte8Tag = 34564,
	eshUnsignedByte16Tag = 38660,
	eshUnsignedByte32Tag = 42756,
};
typedef enum IVECTORTAG IVECTORTAG;
#ifdef __cplusplus
extern "C" {
bool_t xdr_IVECTORTAG(...);
}
#else
bool_t xdr_IVECTORTAG();
#endif


enum IVECTORIDX {
	eshIVectorIdxType = 0,
	eshIVectorIdxLength = 1,
	eshIVectorObjIdSize = 2,
};
typedef enum IVECTORIDX IVECTORIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_IVECTORIDX(...);
}
#else
bool_t xdr_IVECTORIDX();
#endif


enum SHARRAYIDX {
	eshArrayIdxDataVector = 0,
	eshArrayIdxFillPointer = 1,
	eshArrayIdxDisplacedOffset = 2,
	eshArrayIdxAdjustable = 3,
	eshArrayIdxRank = 4,
	eshArrayIdxFirstDimension = 5,
	eshArrayObjIdSize = 5,
};
typedef enum SHARRAYIDX SHARRAYIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHARRAYIDX(...);
}
#else
bool_t xdr_SHARRAYIDX();
#endif


enum SHSTRINGIDX {
	eshStringIdxLength = 0,
	eshStringObjIdSize = 1,
};
typedef enum SHSTRINGIDX SHSTRINGIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHSTRINGIDX(...);
}
#else
bool_t xdr_SHSTRINGIDX();
#endif


enum SHBITVECTORIDX {
	eshBitVectorIdxLength = 0,
	eshBitVectorObjIdSize = 1,
};
typedef enum SHBITVECTORIDX SHBITVECTORIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHBITVECTORIDX(...);
}
#else
bool_t xdr_SHBITVECTORIDX();
#endif


enum SHSTRUCTIDX {
	eshStructIdxDesc = 0,
	eshStructObjIdSize = 0,
};
typedef enum SHSTRUCTIDX SHSTRUCTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHSTRUCTIDX(...);
}
#else
bool_t xdr_SHSTRUCTIDX();
#endif


enum SHSTRUCTDESCIDX {
	eshStructDescrIdxName = 1,
	eshStructDescrIdxVersion = 2,
	eshStructDescrIdxTimeStamp = 3,
	eshStructDescrIdxSchemaEvolution = 4,
	eshStructDescrIdxNextGen = 5,
	eshStructDescrIdxConstructor = 6,
	eshStructDescrIdxDependent = 7,
	eshStructDescrIdxPNSlots = 8,
	eshStructDescrIdxNSlots = 9,
	eshStructDescrIdxSlots = 10,
	eshStructDescSize = 11,
};
typedef enum SHSTRUCTDESCIDX SHSTRUCTDESCIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHSTRUCTDESCIDX(...);
}
#else
bool_t xdr_SHSTRUCTDESCIDX();
#endif


enum SHSTRUCTSLOTDESCIDX {
	eshStructSlotDescrIdxName = 1,
	eshStructSlotDescrInitArg = 2,
	eshStructSlotDescrIdxReader = 3,
	eshStructSlotDescrIdxLocation = 4,
	eshStructSlotDescrIdxInit = 5,
	eshStructSlotDescrIdxType = 6,
	eshStructSlotDescrIdxExtent = 7,
	eshStructSlotDescrIdxDeferred = 8,
	eshStructSlotDescSize = 9,
};
typedef enum SHSTRUCTSLOTDESCIDX SHSTRUCTSLOTDESCIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHSTRUCTSLOTDESCIDX(...);
}
#else
bool_t xdr_SHSTRUCTSLOTDESCIDX();
#endif


enum SHPACKAGEIDX {
	eshPackageIdxName = 1,
	eshPackageIdxInternals = 2,
	eshPackageIdxExternals = 3,
	eshPackageSize = 4,
};
typedef enum SHPACKAGEIDX SHPACKAGEIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHPACKAGEIDX(...);
}
#else
bool_t xdr_SHPACKAGEIDX();
#endif


enum SHINSTIDX {
	eshInstIdxClassWrapper = 0,
	eshInstIdxDataVector = 1,
	eshInstObjIdSize = 2,
};
typedef enum SHINSTIDX SHINSTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHINSTIDX(...);
}
#else
bool_t xdr_SHINSTIDX();
#endif


enum SHPLOBDESCRIDX {
	eshPlobDescrSize = 0,
};
typedef enum SHPLOBDESCRIDX SHPLOBDESCRIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHPLOBDESCRIDX(...);
}
#else
bool_t xdr_SHPLOBDESCRIDX();
#endif


enum SHCLASSDESCRIDX {
	eshClassDescrIdxName = 0,
	eshClassDescrIdxSuperclasses = 1,
	eshClassDescrIdxPrecedenceList = 2,
	eshClassDescrIdxMetaclass = 3,
	eshClassDescrIdxVersion = 4,
	eshClassDescrIdxTimeStamp = 5,
	eshClassDescrIdxSchemaEvolution = 6,
	eshClassDescrIdxNextGen = 7,
	eshClassDescrIdxDirMethods = 8,
	eshClassDescrIdxPNSlots = 9,
	eshClassDescrIdxNSlots = 10,
	eshClassDescrIdxDirSlots = 11,
	eshClassDescrIdxEffSlots = 12,
	eshClassDescrIdxConstructor = 13,
	eshClassDescrIdxDependent = 14,
	eshClassDescrIdxPList = 15,
	eshClassDescrIdxPrototype = 16,
	eshClassDescrSize = 17,
};
typedef enum SHCLASSDESCRIDX SHCLASSDESCRIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHCLASSDESCRIDX(...);
}
#else
bool_t xdr_SHCLASSDESCRIDX();
#endif


enum SHCLASSLOTIDX {
	eshClassSlotDescrIdxName = 0,
	eshClassSlotDescrIdxInitArg = 1,
	eshClassSlotDescrIdxInitForm = 2,
	eshClassSlotDescrIdxInitFunc = 3,
	eshClassSlotDescrIdxType = 4,
	eshClassSlotDescrIdxAlloc = 5,
	eshClassSlotDescrIdxExtent = 6,
	eshClassSlotDescrIdxDeferred = 7,
	eshClassSlotDescrIdxIndex = 8,
	eshClassSlotDescrSize = 9,
};
typedef enum SHCLASSLOTIDX SHCLASSLOTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHCLASSLOTIDX(...);
}
#else
bool_t xdr_SHCLASSLOTIDX();
#endif


enum SHDIRCLASSLOTIDX {
	eshClassDirSlotDescrIdxReaders = 9,
	eshClassDirSlotDescrIdxWriters = 10,
	eshClassDirSlotDescrSize = 11,
};
typedef enum SHDIRCLASSLOTIDX SHDIRCLASSLOTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHDIRCLASSLOTIDX(...);
}
#else
bool_t xdr_SHDIRCLASSLOTIDX();
#endif


enum SHEFFCLASSLOTIDX {
	eshClassEffSlotDescrIdxLocation = 9,
	eshClassEffSlotDescrSize = 10,
};
typedef enum SHEFFCLASSLOTIDX SHEFFCLASSLOTIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHEFFCLASSLOTIDX(...);
}
#else
bool_t xdr_SHEFFCLASSLOTIDX();
#endif


enum SHMETHODIDX {
	eshMethodIdxName = 0,
	eshMethodIdxFunction = 1,
	eshMethodIdxLambdaList = 2,
	eshMethodIdxSpecializers = 3,
	eshMethodIdxQualifiers = 4,
	eshMethodSize = 5,
};
typedef enum SHMETHODIDX SHMETHODIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHMETHODIDX(...);
}
#else
bool_t xdr_SHMETHODIDX();
#endif


enum COMPARETAG {
	eshEqual = 4,
	eshEql = 0,
	eshEq = 3,
	eshNotEqual = 9,
	eshNotEql = 5,
	eshNotEq = 8,
	eshLessEqual = -2,
	eshLess = -1,
	eshGreater = 1,
	eshGreaterEqual = 2,
};
typedef enum COMPARETAG COMPARETAG;
#ifdef __cplusplus
extern "C" {
bool_t xdr_COMPARETAG(...);
}
#else
bool_t xdr_COMPARETAG();
#endif


enum TYPEFLAGS {
	typeNoFlags = 0,
	typeImmediateP = 1,
	typeNotAllocatableP = 2,
	typeTransientP = 4,
	typeVarSizeObjIdP = 8,
	typeVarSizeValueP = 16,
	typeRecycleP = 32,
	typeNotYetImplemented = 64,
	typeNotCachableP = 128,
};
typedef enum TYPEFLAGS TYPEFLAGS;
#ifdef __cplusplus
extern "C" {
bool_t xdr_TYPEFLAGS(...);
}
#else
bool_t xdr_TYPEFLAGS();
#endif


enum SHRATIOIDX {
	eshRatioIdxNumerator = 0,
	eshRatioIdxDenominator = 1,
	eshRatioObjIdSize = 2,
};
typedef enum SHRATIOIDX SHRATIOIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHRATIOIDX(...);
}
#else
bool_t xdr_SHRATIOIDX();
#endif


enum SHCOMPLEXIDX {
	eshComplexIdxRealPart = 0,
	eshComplexIdxImagPart = 1,
	eshComplexObjIdSize = 2,
};
typedef enum SHCOMPLEXIDX SHCOMPLEXIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHCOMPLEXIDX(...);
}
#else
bool_t xdr_SHCOMPLEXIDX();
#endif


enum SHBIGNUMIDX {
	eshBignumIdxFormat = 0,
	eshBignumIdxSize = 1,
	eshBignumObjIdSize = 2,
};
typedef enum SHBIGNUMIDX SHBIGNUMIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHBIGNUMIDX(...);
}
#else
bool_t xdr_SHBIGNUMIDX();
#endif


enum READONLYMODE {
	eshReadOnlyP = -1,
	eshReadWrite = 0,
	eshReadOnly = 1,
};
typedef enum READONLYMODE READONLYMODE;
#ifdef __cplusplus
extern "C" {
bool_t xdr_READONLYMODE(...);
}
#else
bool_t xdr_READONLYMODE();
#endif


enum SHHEAPIDX {
	eshHeapIdxSelf = 0,
	eshHeapIdxTractId = 1,
	eshHeapIdxTractLogId = 2,
};
typedef enum SHHEAPIDX SHHEAPIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHHEAPIDX(...);
}
#else
bool_t xdr_SHHEAPIDX();
#endif


enum BTREERESULT {
	btreeNotFound = 0,
	btreeFound = 1,
	btreeInserted = 2,
	btreeUpdated = 3,
	btreeDeleted = 4,
};
typedef enum BTREERESULT BTREERESULT;
#ifdef __cplusplus
extern "C" {
bool_t xdr_BTREERESULT(...);
}
#else
bool_t xdr_BTREERESULT();
#endif


enum SHBTREEIDX {
	eshBTreeIdxSelf = 0,
	eshBTreeIdxCompare = 1,
	eshBTreeIdxCount = 2,
	eshBTreeIdxCached = 3,
	eshBTreeIdxTimeStamp = 4,
};
typedef enum SHBTREEIDX SHBTREEIDX;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHBTREEIDX(...);
}
#else
bool_t xdr_SHBTREEIDX();
#endif


enum SEEK {
	seekSet = 0,
	seekCur = 1,
	seekEnd = 2,
};
typedef enum SEEK SEEK;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SEEK(...);
}
#else
bool_t xdr_SEEK();
#endif


typedef int psint;
#ifdef __cplusplus
extern "C" {
bool_t xdr_psint(...);
}
#else
bool_t xdr_psint();
#endif


typedef int SHORTOBJID;
#ifdef __cplusplus
extern "C" {
bool_t xdr_SHORTOBJID(...);
}
#else
bool_t xdr_SHORTOBJID();
#endif


typedef psint OBJID;
#ifdef __cplusplus
extern "C" {
bool_t xdr_OBJID(...);
}
#else
bool_t xdr_OBJID();
#endif


typedef int TRACTID;
#ifdef __cplusplus
extern "C" {
bool_t xdr_TRACTID(...);
}
#else
bool_t xdr_TRACTID();
#endif


#endif	/* ! RPCNOTYPES */


typedef struct {
	u_int as_is_vector_t_len;
	char *as_is_vector_t_val;
} as_is_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_as_is_vector_t(...);
}
#else
bool_t xdr_as_is_vector_t();
#endif


typedef struct {
	u_int void_vector_t_len;
	char *void_vector_t_val;
} void_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_void_vector_t(...);
}
#else
bool_t xdr_void_vector_t();
#endif


typedef struct {
	u_int int_vector_t_len;
	int *int_vector_t_val;
} int_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_int_vector_t(...);
}
#else
bool_t xdr_int_vector_t();
#endif


typedef struct {
	u_int u_int_vector_t_len;
	u_int *u_int_vector_t_val;
} u_int_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_u_int_vector_t(...);
}
#else
bool_t xdr_u_int_vector_t();
#endif


typedef struct {
	u_int float_vector_t_len;
	float *float_vector_t_val;
} float_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_float_vector_t(...);
}
#else
bool_t xdr_float_vector_t();
#endif


typedef struct {
	u_int double_vector_t_len;
	double *double_vector_t_val;
} double_vector_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_double_vector_t(...);
}
#else
bool_t xdr_double_vector_t();
#endif


typedef char *string_t;
#ifdef __cplusplus
extern "C" {
bool_t xdr_string_t(...);
}
#else
bool_t xdr_string_t();
#endif


struct fnClientDbReadRoot_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbReadRoot_rets fnClientDbReadRoot_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbReadRoot_rets(...);
}
#else
bool_t xdr_fnClientDbReadRoot_rets();
#endif


struct fnServerDbWriteRoot_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbWriteRoot_rets fnServerDbWriteRoot_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbWriteRoot_rets(...);
}
#else
bool_t xdr_fnServerDbWriteRoot_rets();
#endif


struct fnServerDbWriteRoot_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerDbWriteRoot_args fnServerDbWriteRoot_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbWriteRoot_args(...);
}
#else
bool_t xdr_fnServerDbWriteRoot_args();
#endif


struct fnClientDbSessions_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbSessions_rets fnClientDbSessions_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbSessions_rets(...);
}
#else
bool_t xdr_fnClientDbSessions_rets();
#endif


struct fnServerGetVersion_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerGetVersion_rets fnServerGetVersion_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetVersion_rets(...);
}
#else
bool_t xdr_fnServerGetVersion_rets();
#endif


struct fnServerGetVersion_args {
	SHORTOBJID oShortObjIdHeap;
	GETVERSION eWhat;
};
typedef struct fnServerGetVersion_args fnServerGetVersion_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetVersion_args(...);
}
#else
bool_t xdr_fnServerGetVersion_args();
#endif


struct fnClientDbCreateMachine_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbCreateMachine_rets fnClientDbCreateMachine_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbCreateMachine_rets(...);
}
#else
bool_t xdr_fnClientDbCreateMachine_rets();
#endif


struct fnClientDbCreateMachine_args {
	SHORTOBJID oShortObjIdHeap;
	int_vector_t nAddr;
	MACHLOGINP eLoginP;
};
typedef struct fnClientDbCreateMachine_args fnClientDbCreateMachine_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbCreateMachine_args(...);
}
#else
bool_t xdr_fnClientDbCreateMachine_args();
#endif


struct fnClientMachineLoginP_rets {
	MACHLOGINP ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientMachineLoginP_rets fnClientMachineLoginP_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientMachineLoginP_rets(...);
}
#else
bool_t xdr_fnClientMachineLoginP_rets();
#endif


struct fnClientMachineLoginP_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortMachine;
	MACHLOGINP eLoginP;
};
typedef struct fnClientMachineLoginP_args fnClientMachineLoginP_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientMachineLoginP_args(...);
}
#else
bool_t xdr_fnClientMachineLoginP_args();
#endif


struct fnClientMachineAddr_rets {
	bool_t ReturnValue;
	int_vector_t pnAddr;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientMachineAddr_rets fnClientMachineAddr_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientMachineAddr_rets(...);
}
#else
bool_t xdr_fnClientMachineAddr_rets();
#endif


struct fnClientMachineAddr_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortMachine;
	int pnAddrSize;
};
typedef struct fnClientMachineAddr_args fnClientMachineAddr_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientMachineAddr_args(...);
}
#else
bool_t xdr_fnClientMachineAddr_args();
#endif


struct fnClientDbMachineSearch_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbMachineSearch_rets fnClientDbMachineSearch_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineSearch_rets(...);
}
#else
bool_t xdr_fnClientDbMachineSearch_rets();
#endif


struct fnClientDbMachineSearch_args {
	SHORTOBJID oShortObjIdHeap;
	int_vector_t nAddr;
};
typedef struct fnClientDbMachineSearch_args fnClientDbMachineSearch_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineSearch_args(...);
}
#else
bool_t xdr_fnClientDbMachineSearch_args();
#endif


struct fnClientDbMachineDelete_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbMachineDelete_rets fnClientDbMachineDelete_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineDelete_rets(...);
}
#else
bool_t xdr_fnClientDbMachineDelete_rets();
#endif


struct fnClientDbMachineDelete_args {
	SHORTOBJID oShortObjIdHeap;
	int_vector_t nAddr;
};
typedef struct fnClientDbMachineDelete_args fnClientDbMachineDelete_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineDelete_args(...);
}
#else
bool_t xdr_fnClientDbMachineDelete_args();
#endif


struct fnClientDbMachineInsert_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbMachineInsert_rets fnClientDbMachineInsert_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineInsert_rets(...);
}
#else
bool_t xdr_fnClientDbMachineInsert_rets();
#endif


struct fnClientDbMachineInsert_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortMachine;
};
typedef struct fnClientDbMachineInsert_args fnClientDbMachineInsert_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachineInsert_args(...);
}
#else
bool_t xdr_fnClientDbMachineInsert_args();
#endif


struct fnClientDbMachines_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbMachines_rets fnClientDbMachines_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbMachines_rets(...);
}
#else
bool_t xdr_fnClientDbMachines_rets();
#endif


struct fnServerGetPortByDirectory_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerGetPortByDirectory_rets fnServerGetPortByDirectory_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetPortByDirectory_rets(...);
}
#else
bool_t xdr_fnServerGetPortByDirectory_rets();
#endif


struct fnServerGetPortByDirectory_args {
	string_t szDirectory;
	GETACTION eAction;
};
typedef struct fnServerGetPortByDirectory_args fnServerGetPortByDirectory_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetPortByDirectory_args(...);
}
#else
bool_t xdr_fnServerGetPortByDirectory_args();
#endif


struct fnServerGetPID_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerGetPID_rets fnServerGetPID_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetPID_rets(...);
}
#else
bool_t xdr_fnServerGetPID_rets();
#endif


struct fnServerGetDirectory_rets {
	int ReturnValue;
	string_t szDirectory;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerGetDirectory_rets fnServerGetDirectory_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetDirectory_rets(...);
}
#else
bool_t xdr_fnServerGetDirectory_rets();
#endif


struct fnServerGetDirectory_args {
	int nDirectory;
	int szDirectorySize;
};
typedef struct fnServerGetDirectory_args fnServerGetDirectory_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerGetDirectory_args(...);
}
#else
bool_t xdr_fnServerGetDirectory_args();
#endif


struct fnServerExit_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerExit_rets fnServerExit_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerExit_rets(...);
}
#else
bool_t xdr_fnServerExit_rets();
#endif


struct fnServerExit_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bForceExit;
};
typedef struct fnServerExit_args fnServerExit_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerExit_args(...);
}
#else
bool_t xdr_fnServerExit_args();
#endif


struct fnServerDbReset_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbReset_rets fnServerDbReset_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbReset_rets(...);
}
#else
bool_t xdr_fnServerDbReset_rets();
#endif


struct fnServerDbReset_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bForceReset;
};
typedef struct fnServerDbReset_args fnServerDbReset_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbReset_args(...);
}
#else
bool_t xdr_fnServerDbReset_args();
#endif


struct fnServerRestart_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerRestart_rets fnServerRestart_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerRestart_rets(...);
}
#else
bool_t xdr_fnServerRestart_rets();
#endif


struct fnServerRestart_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bForceRestart;
};
typedef struct fnServerRestart_args fnServerRestart_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerRestart_args(...);
}
#else
bool_t xdr_fnServerRestart_args();
#endif


struct fnClientObjectCanModify_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientObjectCanModify_rets fnClientObjectCanModify_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientObjectCanModify_rets(...);
}
#else
bool_t xdr_fnClientObjectCanModify_rets();
#endif


struct fnClientObjectCanModify_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnClientObjectCanModify_args fnClientObjectCanModify_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientObjectCanModify_args(...);
}
#else
bool_t xdr_fnClientObjectCanModify_args();
#endif


struct fnServerDbClose_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bWithGarbageCollection;
};
typedef struct fnServerDbClose_args fnServerDbClose_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbClose_args(...);
}
#else
bool_t xdr_fnServerDbClose_args();
#endif


struct fnClientDbConfiguration_rets {
	bool_t ReturnValue;
	int pnFlags;
	int pnMinimumKey;
	int pnMaximumKey;
	int pnKeyAlignment;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbConfiguration_rets fnClientDbConfiguration_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbConfiguration_rets(...);
}
#else
bool_t xdr_fnClientDbConfiguration_rets();
#endif


struct fnServerDbCreateObject_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbCreateObject_rets fnServerDbCreateObject_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateObject_rets(...);
}
#else
bool_t xdr_fnServerDbCreateObject_rets();
#endif


struct fnServerDbCreateObject_args {
	SHORTOBJID oShortObjIdHeap;
	SHTYPETAG nTypeTag;
	int nExtraReferences;
	SHTYPETAG eTypeTagValues;
	int nExtraValues;
};
typedef struct fnServerDbCreateObject_args fnServerDbCreateObject_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateObject_args(...);
}
#else
bool_t xdr_fnServerDbCreateObject_args();
#endif


struct fnServerDbCreateObjects_rets {
	int ReturnValue;
	u_int_vector_t pObjIds;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbCreateObjects_rets fnServerDbCreateObjects_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateObjects_rets(...);
}
#else
bool_t xdr_fnServerDbCreateObjects_rets();
#endif


struct fnServerDbCreateObjects_args {
	SHORTOBJID oShortObjIdHeap;
	SHTYPETAG nTypeTag;
	int nExtraReferences;
	SHTYPETAG eTypeTagValues;
	int nExtraValues;
	int nObjIds;
	int pObjIdsSize;
};
typedef struct fnServerDbCreateObjects_args fnServerDbCreateObjects_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateObjects_args(...);
}
#else
bool_t xdr_fnServerDbCreateObjects_args();
#endif


struct fnServerObjectDestroy_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectDestroy_args fnServerObjectDestroy_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectDestroy_args(...);
}
#else
bool_t xdr_fnServerObjectDestroy_args();
#endif


struct fnServerObjectObjIdSize_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectObjIdSize_rets fnServerObjectObjIdSize_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectObjIdSize_rets(...);
}
#else
bool_t xdr_fnServerObjectObjIdSize_rets();
#endif


struct fnServerObjectObjIdSize_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectObjIdSize_args fnServerObjectObjIdSize_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectObjIdSize_args(...);
}
#else
bool_t xdr_fnServerObjectObjIdSize_args();
#endif


struct fnServerDbOpen_rets {
	SHORTOBJID ReturnValue;
	OBJID poObjIdMin;
	OBJID poObjIdMax;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbOpen_rets fnServerDbOpen_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbOpen_rets(...);
}
#else
bool_t xdr_fnServerDbOpen_rets();
#endif


struct fnServerDbOpen_args {
	string_t szDirectory;
	string_t szUserName;
	string_t szDescription;
	int nMinAddrInK;
};
typedef struct fnServerDbOpen_args fnServerDbOpen_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbOpen_args(...);
}
#else
bool_t xdr_fnServerDbOpen_args();
#endif


struct fnServerObjectFlush_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectFlush_rets fnServerObjectFlush_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectFlush_rets(...);
}
#else
bool_t xdr_fnServerObjectFlush_rets();
#endif


struct fnServerObjectFlush_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectFlush_args fnServerObjectFlush_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectFlush_args(...);
}
#else
bool_t xdr_fnServerObjectFlush_args();
#endif


struct fnServerObjectReadAtIndex_rets {
	SHLOCK ReturnValue;
	int pnValue;
	SHTYPETAG pnTypeTag;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadAtIndex_rets fnServerObjectReadAtIndex_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadAtIndex_rets(...);
}
#else
bool_t xdr_fnServerObjectReadAtIndex_rets();
#endif


struct fnServerObjectReadAtIndex_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
};
typedef struct fnServerObjectReadAtIndex_args fnServerObjectReadAtIndex_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadAtIndex_args(...);
}
#else
bool_t xdr_fnServerObjectReadAtIndex_args();
#endif


struct fnServerObjectReadAtIndices_rets {
	int ReturnValue;
	int_vector_t pObjIds;
	u_int_vector_t pnTypeTags;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadAtIndices_rets fnServerObjectReadAtIndices_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadAtIndices_rets(...);
}
#else
bool_t xdr_fnServerObjectReadAtIndices_rets();
#endif


struct fnServerObjectReadAtIndices_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	int nObjIds;
	int pObjIdsSize;
	int pnTypeTagsSize;
};
typedef struct fnServerObjectReadAtIndices_args fnServerObjectReadAtIndices_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadAtIndices_args(...);
}
#else
bool_t xdr_fnServerObjectReadAtIndices_args();
#endif


struct fnServerObjectReadObjId_rets {
	SHLOCK ReturnValue;
	int pnObjId;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadObjId_rets fnServerObjectReadObjId_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadObjId_rets(...);
}
#else
bool_t xdr_fnServerObjectReadObjId_rets();
#endif


struct fnServerObjectReadObjId_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
};
typedef struct fnServerObjectReadObjId_args fnServerObjectReadObjId_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadObjId_args(...);
}
#else
bool_t xdr_fnServerObjectReadObjId_args();
#endif


struct fnServerObjectReadValues_rets {
	int ReturnValue;
	SHTYPETAG pnElementTypeTagOut;
	int pnSizeInElementsOut;
	void_vector_t pBuffer;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadValues_rets fnServerObjectReadValues_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadValues_rets(...);
}
#else
bool_t xdr_fnServerObjectReadValues_rets();
#endif


struct fnServerObjectReadValues_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	SHTYPETAG nElementTypeTagIn;
	int nSizeInElementsIn;
	int pBufferSize;
};
typedef struct fnServerObjectReadValues_args fnServerObjectReadValues_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadValues_args(...);
}
#else
bool_t xdr_fnServerObjectReadValues_args();
#endif


struct fnClientDbStatistics_rets {
	bool_t ReturnValue;
	int pnMaximumSpace;
	int pnAllocatedSpace;
	int pnUnallocatedSpace;
	int pnUnusedAllocatedSpace;
	int pnAllocatedManagementSpace;
	int pnNumberOfObjects;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientDbStatistics_rets fnClientDbStatistics_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientDbStatistics_rets(...);
}
#else
bool_t xdr_fnClientDbStatistics_rets();
#endif


struct fnServerObjectTypeTag_rets {
	SHTYPETAG ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectTypeTag_rets fnServerObjectTypeTag_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectTypeTag_rets(...);
}
#else
bool_t xdr_fnServerObjectTypeTag_rets();
#endif


struct fnServerObjectTypeTag_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectTypeTag_args fnServerObjectTypeTag_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectTypeTag_args(...);
}
#else
bool_t xdr_fnServerObjectTypeTag_args();
#endif


struct fnServerObjectValueSize_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectValueSize_rets fnServerObjectValueSize_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectValueSize_rets(...);
}
#else
bool_t xdr_fnServerObjectValueSize_rets();
#endif


struct fnServerObjectValueSize_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectValueSize_args fnServerObjectValueSize_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectValueSize_args(...);
}
#else
bool_t xdr_fnServerObjectValueSize_args();
#endif


struct fnServerObjectWriteAtIndex_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteAtIndex_rets fnServerObjectWriteAtIndex_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteAtIndex_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteAtIndex_rets();
#endif


struct fnServerObjectWriteAtIndex_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	int nValue;
	SHTYPETAG nTypeTagValue;
};
typedef struct fnServerObjectWriteAtIndex_args fnServerObjectWriteAtIndex_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteAtIndex_args(...);
}
#else
bool_t xdr_fnServerObjectWriteAtIndex_args();
#endif


struct fnServerObjectWriteAtIndices_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteAtIndices_rets fnServerObjectWriteAtIndices_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteAtIndices_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteAtIndices_rets();
#endif


struct fnServerObjectWriteAtIndices_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	int nObjIds;
	int_vector_t pObjIds;
	u_int_vector_t pnTypeTags;
};
typedef struct fnServerObjectWriteAtIndices_args fnServerObjectWriteAtIndices_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteAtIndices_args(...);
}
#else
bool_t xdr_fnServerObjectWriteAtIndices_args();
#endif


struct fnServerObjectWriteObjId_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteObjId_rets fnServerObjectWriteObjId_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteObjId_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteObjId_rets();
#endif


struct fnServerObjectWriteObjId_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	SHORTOBJID oShortObjIdWrite;
};
typedef struct fnServerObjectWriteObjId_args fnServerObjectWriteObjId_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteObjId_args(...);
}
#else
bool_t xdr_fnServerObjectWriteObjId_args();
#endif


struct fnServerObjectWriteValues_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteValues_rets fnServerObjectWriteValues_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteValues_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteValues_rets();
#endif


struct fnServerObjectWriteValues_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	SHTYPETAG nElementTypeTag;
	int nSizeInElements;
	void_vector_t pBuffer;
};
typedef struct fnServerObjectWriteValues_args fnServerObjectWriteValues_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteValues_args(...);
}
#else
bool_t xdr_fnServerObjectWriteValues_args();
#endif


struct fnShortMakeDependent_rets {
	DEPENDENTMODE ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeDependent_rets fnShortMakeDependent_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeDependent_rets(...);
}
#else
bool_t xdr_fnShortMakeDependent_rets();
#endif


struct fnShortMakeDependent_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortSelf;
	DEPENDENTMODE nDependentMode;
};
typedef struct fnShortMakeDependent_args fnShortMakeDependent_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeDependent_args(...);
}
#else
bool_t xdr_fnShortMakeDependent_args();
#endif


struct fnServerObjectPeekSlots_rets {
	SHLOCK ReturnValue;
	u_int_vector_t pBuffer;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectPeekSlots_rets fnServerObjectPeekSlots_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPeekSlots_rets(...);
}
#else
bool_t xdr_fnServerObjectPeekSlots_rets();
#endif


struct fnServerObjectPeekSlots_args {
	SHORTOBJID oShortObjIdHeap;
	int hPeek;
	int nWords;
	int pBufferSize;
};
typedef struct fnServerObjectPeekSlots_args fnServerObjectPeekSlots_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPeekSlots_args(...);
}
#else
bool_t xdr_fnServerObjectPeekSlots_args();
#endif


struct fnServerObjectPeekValues_rets {
	SHLOCK ReturnValue;
	u_int_vector_t pnElementTypeTagsOut;
	u_int_vector_t pnSizesInElementsOut;
	void_vector_t pBuffer;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectPeekValues_rets fnServerObjectPeekValues_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPeekValues_rets(...);
}
#else
bool_t xdr_fnServerObjectPeekValues_rets();
#endif


struct fnServerObjectPeekValues_args {
	SHORTOBJID oShortObjIdHeap;
	int hPeek;
	int nObjects;
	u_int_vector_t pnElementTypeTagsIn;
	u_int_vector_t pnSizesInElementsIn;
	int pnElementTypeTagsOutSize;
	int pnSizesInElementsOutSize;
	int pBufferSize;
};
typedef struct fnServerObjectPeekValues_args fnServerObjectPeekValues_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPeekValues_args(...);
}
#else
bool_t xdr_fnServerObjectPeekValues_args();
#endif


struct fnServerObjectPoke_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	int nSlots;
	u_int_vector_t pSlots;
	SHTYPETAG nElementTypeTag;
	int nSizeInElements;
	void_vector_t pValues;
};
typedef struct fnServerObjectPoke_args fnServerObjectPoke_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPoke_args(...);
}
#else
bool_t xdr_fnServerObjectPoke_args();
#endif


struct fnFlushMode_rets {
	FLUSHMODE ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnFlushMode_rets fnFlushMode_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnFlushMode_rets(...);
}
#else
bool_t xdr_fnFlushMode_rets();
#endif


struct fnFlushMode_args {
	SHORTOBJID oShortObjIdHeap;
	FLUSHMODE nMode;
};
typedef struct fnFlushMode_args fnFlushMode_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnFlushMode_args(...);
}
#else
bool_t xdr_fnFlushMode_args();
#endif


struct fnFlagWord_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnFlagWord_rets fnFlagWord_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnFlagWord_rets(...);
}
#else
bool_t xdr_fnFlagWord_rets();
#endif


struct fnFlagWord_args {
	FLAGMODE nGetOrSet;
	int nFlagWord;
};
typedef struct fnFlagWord_args fnFlagWord_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnFlagWord_args(...);
}
#else
bool_t xdr_fnFlagWord_args();
#endif


struct fnShortMakeIVector_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeIVector_rets fnShortMakeIVector_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeIVector_rets(...);
}
#else
bool_t xdr_fnShortMakeIVector_rets();
#endif


struct fnShortMakeIVector_args {
	SHORTOBJID oShortObjIdHeap;
	SHTYPETAG nTypeTag;
	int nElements;
};
typedef struct fnShortMakeIVector_args fnShortMakeIVector_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeIVector_args(...);
}
#else
bool_t xdr_fnShortMakeIVector_args();
#endif


struct fnShortMakeString_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeString_rets fnShortMakeString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeString_rets(...);
}
#else
bool_t xdr_fnShortMakeString_rets();
#endif


struct fnShortMakeString_args {
	SHORTOBJID oShortObjIdHeap;
	string_t lpszFrom;
};
typedef struct fnShortMakeString_args fnShortMakeString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeString_args(...);
}
#else
bool_t xdr_fnShortMakeString_args();
#endif


struct fnServerDbCreateStructures_rets {
	int ReturnValue;
	u_int_vector_t pObjIds;
	u_int pnSlots;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbCreateStructures_rets fnServerDbCreateStructures_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateStructures_rets(...);
}
#else
bool_t xdr_fnServerDbCreateStructures_rets();
#endif


struct fnServerDbCreateStructures_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdStructDescr;
	int nObjIds;
	int pObjIdsSize;
};
typedef struct fnServerDbCreateStructures_args fnServerDbCreateStructures_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateStructures_args(...);
}
#else
bool_t xdr_fnServerDbCreateStructures_args();
#endif


struct fnServerDbCreateInstances_rets {
	int ReturnValue;
	u_int_vector_t pObjIds;
	u_int pnSlots;
	u_int_vector_t pDatas;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbCreateInstances_rets fnServerDbCreateInstances_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateInstances_rets(...);
}
#else
bool_t xdr_fnServerDbCreateInstances_rets();
#endif


struct fnServerDbCreateInstances_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdClassDescr;
	int nObjIds;
	int pObjIdsSize;
	int pDatasSize;
};
typedef struct fnServerDbCreateInstances_args fnServerDbCreateInstances_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbCreateInstances_args(...);
}
#else
bool_t xdr_fnServerDbCreateInstances_args();
#endif


struct fnServerInstanceWriteWrapper_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerInstanceWriteWrapper_rets fnServerInstanceWriteWrapper_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerInstanceWriteWrapper_rets(...);
}
#else
bool_t xdr_fnServerInstanceWriteWrapper_rets();
#endif


struct fnServerInstanceWriteWrapper_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdInstance;
	SHORTOBJID oShortObjIdClassDescr;
};
typedef struct fnServerInstanceWriteWrapper_args fnServerInstanceWriteWrapper_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerInstanceWriteWrapper_args(...);
}
#else
bool_t xdr_fnServerInstanceWriteWrapper_args();
#endif


struct fnServerInstanceWriteData_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerInstanceWriteData_rets fnServerInstanceWriteData_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerInstanceWriteData_rets(...);
}
#else
bool_t xdr_fnServerInstanceWriteData_rets();
#endif


struct fnServerInstanceWriteData_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdInstance;
	SHORTOBJID oShortObjIdData;
};
typedef struct fnServerInstanceWriteData_args fnServerInstanceWriteData_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerInstanceWriteData_args(...);
}
#else
bool_t xdr_fnServerInstanceWriteData_args();
#endif


struct fnServerDbTypeTagName_rets {
	string_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbTypeTagName_rets fnServerDbTypeTagName_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbTypeTagName_rets(...);
}
#else
bool_t xdr_fnServerDbTypeTagName_rets();
#endif


struct fnServerObjectPrettyPrint_rets {
	int ReturnValue;
	string_t lpszBuffer;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectPrettyPrint_rets fnServerObjectPrettyPrint_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPrettyPrint_rets(...);
}
#else
bool_t xdr_fnServerObjectPrettyPrint_rets();
#endif


struct fnServerObjectPrettyPrint_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHTYPETAG nTypeTag;
	int nBuffer;
	int lpszBufferSize;
};
typedef struct fnServerObjectPrettyPrint_args fnServerObjectPrettyPrint_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectPrettyPrint_args(...);
}
#else
bool_t xdr_fnServerObjectPrettyPrint_args();
#endif


struct fnShortPrintSymbol_rets {
	int ReturnValue;
	string_t lpszBuffer;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortPrintSymbol_rets fnShortPrintSymbol_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortPrintSymbol_rets(...);
}
#else
bool_t xdr_fnShortPrintSymbol_rets();
#endif


struct fnShortPrintSymbol_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortSymbol;
	int nBuffer;
	int lpszBufferSize;
};
typedef struct fnShortPrintSymbol_args fnShortPrintSymbol_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortPrintSymbol_args(...);
}
#else
bool_t xdr_fnShortPrintSymbol_args();
#endif


struct fnShortMakeSingleFloat_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeSingleFloat_rets fnShortMakeSingleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeSingleFloat_rets(...);
}
#else
bool_t xdr_fnShortMakeSingleFloat_rets();
#endif


struct fnShortMakeSingleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	float fFrom;
};
typedef struct fnShortMakeSingleFloat_args fnShortMakeSingleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeSingleFloat_args(...);
}
#else
bool_t xdr_fnShortMakeSingleFloat_args();
#endif


struct fnShortMakeDoubleFloat_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeDoubleFloat_rets fnShortMakeDoubleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeDoubleFloat_rets(...);
}
#else
bool_t xdr_fnShortMakeDoubleFloat_rets();
#endif


struct fnShortMakeDoubleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	double fFrom;
};
typedef struct fnShortMakeDoubleFloat_args fnShortMakeDoubleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeDoubleFloat_args(...);
}
#else
bool_t xdr_fnShortMakeDoubleFloat_args();
#endif


struct fnServerDbMakeBignum_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbMakeBignum_rets fnServerDbMakeBignum_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbMakeBignum_rets(...);
}
#else
bool_t xdr_fnServerDbMakeBignum_rets();
#endif


struct fnServerDbMakeBignum_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdFormat;
	int nSizeInBits;
	as_is_vector_t pnBignum;
};
typedef struct fnServerDbMakeBignum_args fnServerDbMakeBignum_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbMakeBignum_args(...);
}
#else
bool_t xdr_fnServerDbMakeBignum_args();
#endif


struct fnServerObjectReadBignum_rets {
	SHLOCK ReturnValue;
	as_is_vector_t pnBignum;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadBignum_rets fnServerObjectReadBignum_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadBignum_rets(...);
}
#else
bool_t xdr_fnServerObjectReadBignum_rets();
#endif


struct fnServerObjectReadBignum_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdFormat;
	SHORTOBJID oShortObjId;
	int nSizeInBits;
	int pnBignumSize;
};
typedef struct fnServerObjectReadBignum_args fnServerObjectReadBignum_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadBignum_args(...);
}
#else
bool_t xdr_fnServerObjectReadBignum_args();
#endif


struct fnServerObjectReadDoubleFloat_rets {
	SHLOCK ReturnValue;
	double pfDoubleFloat;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadDoubleFloat_rets fnServerObjectReadDoubleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadDoubleFloat_rets(...);
}
#else
bool_t xdr_fnServerObjectReadDoubleFloat_rets();
#endif


struct fnServerObjectReadDoubleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectReadDoubleFloat_args fnServerObjectReadDoubleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadDoubleFloat_args(...);
}
#else
bool_t xdr_fnServerObjectReadDoubleFloat_args();
#endif


struct fnServerObjectReadFixnum_rets {
	SHLOCK ReturnValue;
	int pnFixnum;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadFixnum_rets fnServerObjectReadFixnum_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadFixnum_rets(...);
}
#else
bool_t xdr_fnServerObjectReadFixnum_rets();
#endif


struct fnServerObjectReadFixnum_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
};
typedef struct fnServerObjectReadFixnum_args fnServerObjectReadFixnum_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadFixnum_args(...);
}
#else
bool_t xdr_fnServerObjectReadFixnum_args();
#endif


struct fnServerObjectReadSingleFloat_rets {
	SHLOCK ReturnValue;
	float pfSingleFloat;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectReadSingleFloat_rets fnServerObjectReadSingleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadSingleFloat_rets(...);
}
#else
bool_t xdr_fnServerObjectReadSingleFloat_rets();
#endif


struct fnServerObjectReadSingleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
};
typedef struct fnServerObjectReadSingleFloat_args fnServerObjectReadSingleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectReadSingleFloat_args(...);
}
#else
bool_t xdr_fnServerObjectReadSingleFloat_args();
#endif


struct fnServerObjectWriteBignum_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteBignum_rets fnServerObjectWriteBignum_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteBignum_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteBignum_rets();
#endif


struct fnServerObjectWriteBignum_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdFormat;
	SHORTOBJID oShortObjId;
	int nSizeInBits;
	as_is_vector_t pnBignum;
};
typedef struct fnServerObjectWriteBignum_args fnServerObjectWriteBignum_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteBignum_args(...);
}
#else
bool_t xdr_fnServerObjectWriteBignum_args();
#endif


struct fnServerObjectWriteDoubleFloat_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteDoubleFloat_rets fnServerObjectWriteDoubleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteDoubleFloat_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteDoubleFloat_rets();
#endif


struct fnServerObjectWriteDoubleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	double fDoubleFloat;
};
typedef struct fnServerObjectWriteDoubleFloat_args fnServerObjectWriteDoubleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteDoubleFloat_args(...);
}
#else
bool_t xdr_fnServerObjectWriteDoubleFloat_args();
#endif


struct fnServerObjectWriteFixnum_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteFixnum_rets fnServerObjectWriteFixnum_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteFixnum_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteFixnum_rets();
#endif


struct fnServerObjectWriteFixnum_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	SHORTOBJID oExpectingClass;
	SHTYPETAG nExpectingTypeTag;
	int nIndex;
	int nFixnumWrite;
};
typedef struct fnServerObjectWriteFixnum_args fnServerObjectWriteFixnum_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteFixnum_args(...);
}
#else
bool_t xdr_fnServerObjectWriteFixnum_args();
#endif


struct fnServerObjectWriteSingleFloat_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerObjectWriteSingleFloat_rets fnServerObjectWriteSingleFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteSingleFloat_rets(...);
}
#else
bool_t xdr_fnServerObjectWriteSingleFloat_rets();
#endif


struct fnServerObjectWriteSingleFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjId;
	float fSingleFloat;
};
typedef struct fnServerObjectWriteSingleFloat_args fnServerObjectWriteSingleFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerObjectWriteSingleFloat_args(...);
}
#else
bool_t xdr_fnServerObjectWriteSingleFloat_args();
#endif


struct fnClientLockPrint_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientLockPrint_rets fnClientLockPrint_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientLockPrint_rets(...);
}
#else
bool_t xdr_fnClientLockPrint_rets();
#endif


struct fnClientLockPrint_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortSelf;
	SHLOCK nLevel;
	NUMERICSTDSTREAM nStdStream;
};
typedef struct fnClientLockPrint_args fnClientLockPrint_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientLockPrint_args(...);
}
#else
bool_t xdr_fnClientLockPrint_args();
#endif


struct fnClientTransactionLockGet_rets {
	SHLOCK ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientTransactionLockGet_rets fnClientTransactionLockGet_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientTransactionLockGet_rets(...);
}
#else
bool_t xdr_fnClientTransactionLockGet_rets();
#endif


struct fnClientTransactionLockGet_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockedByP;
	SHLOCK nLevelP;
	SHORTOBJID oShortLockedP;
	SHTYPETAG nTypeTagLockedP;
	int nIndexP;
};
typedef struct fnClientTransactionLockGet_args fnClientTransactionLockGet_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientTransactionLockGet_args(...);
}
#else
bool_t xdr_fnClientTransactionLockGet_args();
#endif


struct fnServerTransactionLockInsert_rets {
	SHLOCK ReturnValue;
	int phPeek;
	int pnObjIdWords;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionLockInsert_rets fnServerTransactionLockInsert_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionLockInsert_rets(...);
}
#else
bool_t xdr_fnServerTransactionLockInsert_rets();
#endif


struct fnServerTransactionLockInsert_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockBy;
	SHLOCK nLock;
	SHORTOBJID oShortToLock;
	SHTYPETAG nTypeTagToLock;
	int nIndex;
};
typedef struct fnServerTransactionLockInsert_args fnServerTransactionLockInsert_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionLockInsert_args(...);
}
#else
bool_t xdr_fnServerTransactionLockInsert_args();
#endif


struct fnServerTransactionLockSet_rets {
	SHLOCK ReturnValue;
	int phPeek;
	int pnObjIdWords;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionLockSet_rets fnServerTransactionLockSet_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionLockSet_rets(...);
}
#else
bool_t xdr_fnServerTransactionLockSet_rets();
#endif


struct fnServerTransactionLockSet_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockBy;
	SHLOCK nLock;
	SHORTOBJID oShortToLock;
	SHTYPETAG nTypeTagToLock;
	int nIndex;
};
typedef struct fnServerTransactionLockSet_args fnServerTransactionLockSet_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionLockSet_args(...);
}
#else
bool_t xdr_fnServerTransactionLockSet_args();
#endif


struct fnServerTransactionUnlock_rets {
	SHLOCK ReturnValue;
	SHLOCK pnVectorLockNow;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionUnlock_rets fnServerTransactionUnlock_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlock_rets(...);
}
#else
bool_t xdr_fnServerTransactionUnlock_rets();
#endif


struct fnServerTransactionUnlock_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockedBy;
	SHLOCK nLock;
	SHORTOBJID oShortToUnlock;
	int nIndex;
};
typedef struct fnServerTransactionUnlock_args fnServerTransactionUnlock_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlock_args(...);
}
#else
bool_t xdr_fnServerTransactionUnlock_args();
#endif


struct fnServerTransactionUnlockAll_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionUnlockAll_rets fnServerTransactionUnlockAll_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlockAll_rets(...);
}
#else
bool_t xdr_fnServerTransactionUnlockAll_rets();
#endif


struct fnServerTransactionUnlockAll_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockedBy;
	SHORTOBJID oShortToUnlock;
};
typedef struct fnServerTransactionUnlockAll_args fnServerTransactionUnlockAll_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlockAll_args(...);
}
#else
bool_t xdr_fnServerTransactionUnlockAll_args();
#endif


struct fnServerTransactionUnlockAllAll_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionUnlockAllAll_rets fnServerTransactionUnlockAllAll_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlockAllAll_rets(...);
}
#else
bool_t xdr_fnServerTransactionUnlockAllAll_rets();
#endif


struct fnServerTransactionUnlockAllAll_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdLockedBy;
};
typedef struct fnServerTransactionUnlockAllAll_args fnServerTransactionUnlockAllAll_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionUnlockAllAll_args(...);
}
#else
bool_t xdr_fnServerTransactionUnlockAllAll_args();
#endif


struct fnShortMakeReadOnly_rets {
	bool_t ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnShortMakeReadOnly_rets fnShortMakeReadOnly_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeReadOnly_rets(...);
}
#else
bool_t xdr_fnShortMakeReadOnly_rets();
#endif


struct fnShortMakeReadOnly_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortSelf;
	READONLYMODE nReadOnlyP;
};
typedef struct fnShortMakeReadOnly_args fnShortMakeReadOnly_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnShortMakeReadOnly_args(...);
}
#else
bool_t xdr_fnShortMakeReadOnly_args();
#endif


struct fnServerTransactionBegin_rets {
	TRACTID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionBegin_rets fnServerTransactionBegin_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionBegin_rets(...);
}
#else
bool_t xdr_fnServerTransactionBegin_rets();
#endif


struct fnServerTransactionBegin_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bIgnoreError;
};
typedef struct fnServerTransactionBegin_args fnServerTransactionBegin_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionBegin_args(...);
}
#else
bool_t xdr_fnServerTransactionBegin_args();
#endif


struct fnServerTransactionCancel_rets {
	TRACTID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionCancel_rets fnServerTransactionCancel_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionCancel_rets(...);
}
#else
bool_t xdr_fnServerTransactionCancel_rets();
#endif


struct fnServerTransactionCancel_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bIgnoreError;
};
typedef struct fnServerTransactionCancel_args fnServerTransactionCancel_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionCancel_args(...);
}
#else
bool_t xdr_fnServerTransactionCancel_args();
#endif


struct fnServerTransactionEnd_rets {
	TRACTID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerTransactionEnd_rets fnServerTransactionEnd_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionEnd_rets(...);
}
#else
bool_t xdr_fnServerTransactionEnd_rets();
#endif


struct fnServerTransactionEnd_args {
	SHORTOBJID oShortObjIdHeap;
	bool_t bIgnoreError;
};
typedef struct fnServerTransactionEnd_args fnServerTransactionEnd_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerTransactionEnd_args(...);
}
#else
bool_t xdr_fnServerTransactionEnd_args();
#endif


struct fnServerDbTransactionP_rets {
	TRACTID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerDbTransactionP_rets fnServerDbTransactionP_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbTransactionP_rets(...);
}
#else
bool_t xdr_fnServerDbTransactionP_rets();
#endif


struct fnServerDbTransactionP_args {
	SHORTOBJID oShortObjIdHeap;
	TRACTID nTractId;
};
typedef struct fnServerDbTransactionP_args fnServerDbTransactionP_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerDbTransactionP_args(...);
}
#else
bool_t xdr_fnServerDbTransactionP_args();
#endif


struct fnClientBtreeClear_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreeClear_rets fnClientBtreeClear_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeClear_rets(...);
}
#else
bool_t xdr_fnClientBtreeClear_rets();
#endif


struct fnClientBtreeClear_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
};
typedef struct fnClientBtreeClear_args fnClientBtreeClear_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeClear_args(...);
}
#else
bool_t xdr_fnClientBtreeClear_args();
#endif


struct fnClientBtreeCount_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreeCount_rets fnClientBtreeCount_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeCount_rets(...);
}
#else
bool_t xdr_fnClientBtreeCount_rets();
#endif


struct fnClientBtreeCount_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
};
typedef struct fnClientBtreeCount_args fnClientBtreeCount_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeCount_args(...);
}
#else
bool_t xdr_fnClientBtreeCount_args();
#endif


struct fnServerBtreeDelete_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeDelete_rets fnServerBtreeDelete_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDelete_rets(...);
}
#else
bool_t xdr_fnServerBtreeDelete_rets();
#endif


struct fnServerBtreeDelete_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nValueKey;
	SHTYPETAG nTypeTagKey;
};
typedef struct fnServerBtreeDelete_args fnServerBtreeDelete_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDelete_args(...);
}
#else
bool_t xdr_fnServerBtreeDelete_args();
#endif


struct fnServerBtreeDeleteByFloat_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeDeleteByFloat_rets fnServerBtreeDeleteByFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByFloat_rets(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByFloat_rets();
#endif


struct fnServerBtreeDeleteByFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	float fKey;
};
typedef struct fnServerBtreeDeleteByFloat_args fnServerBtreeDeleteByFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByFloat_args(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByFloat_args();
#endif


struct fnServerBtreeDeleteByDouble_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeDeleteByDouble_rets fnServerBtreeDeleteByDouble_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByDouble_rets(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByDouble_rets();
#endif


struct fnServerBtreeDeleteByDouble_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	double fKey;
};
typedef struct fnServerBtreeDeleteByDouble_args fnServerBtreeDeleteByDouble_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByDouble_args(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByDouble_args();
#endif


struct fnServerBtreeDeleteByString_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeDeleteByString_rets fnServerBtreeDeleteByString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByString_rets(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByString_rets();
#endif


struct fnServerBtreeDeleteByString_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	string_t szKey;
};
typedef struct fnServerBtreeDeleteByString_args fnServerBtreeDeleteByString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeDeleteByString_args(...);
}
#else
bool_t xdr_fnServerBtreeDeleteByString_args();
#endif


struct fnServerBtreeInsert_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeInsert_rets fnServerBtreeInsert_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsert_rets(...);
}
#else
bool_t xdr_fnServerBtreeInsert_rets();
#endif


struct fnServerBtreeInsert_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nValueKey;
	SHTYPETAG nTypeTagKey;
	int nValueData;
	SHTYPETAG nTypeTagData;
};
typedef struct fnServerBtreeInsert_args fnServerBtreeInsert_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsert_args(...);
}
#else
bool_t xdr_fnServerBtreeInsert_args();
#endif


struct fnServerBtreeInsertByFloat_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeInsertByFloat_rets fnServerBtreeInsertByFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByFloat_rets(...);
}
#else
bool_t xdr_fnServerBtreeInsertByFloat_rets();
#endif


struct fnServerBtreeInsertByFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	float fKey;
	int nValueData;
	SHTYPETAG nTypeTagData;
};
typedef struct fnServerBtreeInsertByFloat_args fnServerBtreeInsertByFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByFloat_args(...);
}
#else
bool_t xdr_fnServerBtreeInsertByFloat_args();
#endif


struct fnServerBtreeInsertByDouble_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeInsertByDouble_rets fnServerBtreeInsertByDouble_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByDouble_rets(...);
}
#else
bool_t xdr_fnServerBtreeInsertByDouble_rets();
#endif


struct fnServerBtreeInsertByDouble_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	double fKey;
	int nValueData;
	SHTYPETAG nTypeTagData;
};
typedef struct fnServerBtreeInsertByDouble_args fnServerBtreeInsertByDouble_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByDouble_args(...);
}
#else
bool_t xdr_fnServerBtreeInsertByDouble_args();
#endif


struct fnServerBtreeInsertByString_rets {
	BTREERESULT ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeInsertByString_rets fnServerBtreeInsertByString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByString_rets(...);
}
#else
bool_t xdr_fnServerBtreeInsertByString_rets();
#endif


struct fnServerBtreeInsertByString_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	string_t szKey;
	int nValueData;
	SHTYPETAG nTypeTagData;
};
typedef struct fnServerBtreeInsertByString_args fnServerBtreeInsertByString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeInsertByString_args(...);
}
#else
bool_t xdr_fnServerBtreeInsertByString_args();
#endif


struct fnServerBtreemapSearch_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSearch_rets fnServerBtreemapSearch_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearch_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSearch_rets();
#endif


struct fnServerBtreemapSearch_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nValueKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	int nValueKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
};
typedef struct fnServerBtreemapSearch_args fnServerBtreemapSearch_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearch_args(...);
}
#else
bool_t xdr_fnServerBtreemapSearch_args();
#endif


struct fnServerBtreemapSearchByFloat_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSearchByFloat_rets fnServerBtreemapSearchByFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByFloat_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByFloat_rets();
#endif


struct fnServerBtreemapSearchByFloat_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	float fKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	float fKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
};
typedef struct fnServerBtreemapSearchByFloat_args fnServerBtreemapSearchByFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByFloat_args(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByFloat_args();
#endif


struct fnServerBtreemapSearchByDouble_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSearchByDouble_rets fnServerBtreemapSearchByDouble_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByDouble_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByDouble_rets();
#endif


struct fnServerBtreemapSearchByDouble_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	double fKeyLower;
	COMPARETAG eCompareLower;
	SHTYPETAG nTypeTagKeyLower;
	double fKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
};
typedef struct fnServerBtreemapSearchByDouble_args fnServerBtreemapSearchByDouble_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByDouble_args(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByDouble_args();
#endif


struct fnServerBtreemapSearchByString_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSearchByString_rets fnServerBtreemapSearchByString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByString_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByString_rets();
#endif


struct fnServerBtreemapSearchByString_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	string_t szKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	string_t szKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
};
typedef struct fnServerBtreemapSearchByString_args fnServerBtreemapSearchByString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSearchByString_args(...);
}
#else
bool_t xdr_fnServerBtreemapSearchByString_args();
#endif


struct fnServerBtreemapSeek_rets {
	int ReturnValue;
	int pnValueKey;
	SHTYPETAG pnTypeTagKey;
	int pnValueData;
	SHTYPETAG pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSeek_rets fnServerBtreemapSeek_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSeek_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSeek_rets();
#endif


struct fnServerBtreemapSeek_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdMapper;
	int nIncrement;
	SEEK eOrigin;
};
typedef struct fnServerBtreemapSeek_args fnServerBtreemapSeek_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSeek_args(...);
}
#else
bool_t xdr_fnServerBtreemapSeek_args();
#endif


struct fnServerBtreemapSeekSet_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapSeekSet_rets fnServerBtreemapSeekSet_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSeekSet_rets(...);
}
#else
bool_t xdr_fnServerBtreemapSeekSet_rets();
#endif


struct fnServerBtreemapSeekSet_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdMapper;
	int nIncrement;
	SEEK eOrigin;
	int nValueData;
	SHTYPETAG nTypeTagData;
};
typedef struct fnServerBtreemapSeekSet_args fnServerBtreemapSeekSet_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapSeekSet_args(...);
}
#else
bool_t xdr_fnServerBtreemapSeekSet_args();
#endif


struct fnServerBtreemapFirst_rets {
	int ReturnValue;
	SHORTOBJID lpoShortObjIdMapper;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapFirst_rets fnServerBtreemapFirst_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirst_rets(...);
}
#else
bool_t xdr_fnServerBtreemapFirst_rets();
#endif


struct fnServerBtreemapFirst_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nValueKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	int nValueKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
	int nMap;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
};
typedef struct fnServerBtreemapFirst_args fnServerBtreemapFirst_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirst_args(...);
}
#else
bool_t xdr_fnServerBtreemapFirst_args();
#endif


struct fnServerBtreemapFirstByFloat_rets {
	int ReturnValue;
	SHORTOBJID lpoShortObjIdMapper;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapFirstByFloat_rets fnServerBtreemapFirstByFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByFloat_rets(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByFloat_rets();
#endif


struct fnServerBtreemapFirstByFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	float fKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	float fKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
	int nMap;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
};
typedef struct fnServerBtreemapFirstByFloat_args fnServerBtreemapFirstByFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByFloat_args(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByFloat_args();
#endif


struct fnServerBtreemapFirstByDouble_rets {
	int ReturnValue;
	SHORTOBJID lpoShortObjIdMapper;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapFirstByDouble_rets fnServerBtreemapFirstByDouble_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByDouble_rets(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByDouble_rets();
#endif


struct fnServerBtreemapFirstByDouble_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	double fKeyLower;
	COMPARETAG eCompareLower;
	SHTYPETAG nTypeTagKeyLower;
	double fKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
	int nMap;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
};
typedef struct fnServerBtreemapFirstByDouble_args fnServerBtreemapFirstByDouble_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByDouble_args(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByDouble_args();
#endif


struct fnServerBtreemapFirstByString_rets {
	int ReturnValue;
	SHORTOBJID lpoShortObjIdMapper;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreemapFirstByString_rets fnServerBtreemapFirstByString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByString_rets(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByString_rets();
#endif


struct fnServerBtreemapFirstByString_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	string_t szKeyLower;
	SHTYPETAG nTypeTagKeyLower;
	COMPARETAG eCompareLower;
	string_t szKeyUpper;
	SHTYPETAG nTypeTagKeyUpper;
	COMPARETAG eCompareUpper;
	bool_t bDescending;
	int nMap;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
};
typedef struct fnServerBtreemapFirstByString_args fnServerBtreemapFirstByString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreemapFirstByString_args(...);
}
#else
bool_t xdr_fnServerBtreemapFirstByString_args();
#endif


struct fnClientBtreemapNext_rets {
	int ReturnValue;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreemapNext_rets fnClientBtreemapNext_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreemapNext_rets(...);
}
#else
bool_t xdr_fnClientBtreemapNext_rets();
#endif


struct fnClientBtreemapNext_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
	int nMap;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
};
typedef struct fnClientBtreemapNext_args fnClientBtreemapNext_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreemapNext_args(...);
}
#else
bool_t xdr_fnClientBtreemapNext_args();
#endif


struct fnClientBtreemapLast_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreemapLast_rets fnClientBtreemapLast_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreemapLast_rets(...);
}
#else
bool_t xdr_fnClientBtreemapLast_rets();
#endif


struct fnClientBtreemapLast_args {
	SHORTOBJID oShortObjIdMapper;
	SHORTOBJID oShortObjIdHeap;
};
typedef struct fnClientBtreemapLast_args fnClientBtreemapLast_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreemapLast_args(...);
}
#else
bool_t xdr_fnClientBtreemapLast_args();
#endif


struct fnClientBtreePrint_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreePrint_rets fnClientBtreePrint_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreePrint_rets(...);
}
#else
bool_t xdr_fnClientBtreePrint_rets();
#endif


struct fnClientBtreePrint_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	NUMERICSTDSTREAM nStdStream;
};
typedef struct fnClientBtreePrint_args fnClientBtreePrint_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreePrint_args(...);
}
#else
bool_t xdr_fnClientBtreePrint_args();
#endif


struct fnServerBtreeSearch_rets {
	BTREERESULT ReturnValue;
	int pnValueKey;
	SHTYPETAG pnTypeTagKey;
	int pnValueData;
	SHTYPETAG pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeSearch_rets fnServerBtreeSearch_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearch_rets(...);
}
#else
bool_t xdr_fnServerBtreeSearch_rets();
#endif


struct fnServerBtreeSearch_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nValueKey;
	SHTYPETAG nTypeTagKey;
};
typedef struct fnServerBtreeSearch_args fnServerBtreeSearch_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearch_args(...);
}
#else
bool_t xdr_fnServerBtreeSearch_args();
#endif


struct fnServerBtreeSearchByFloat_rets {
	BTREERESULT ReturnValue;
	int pnValueKey;
	SHTYPETAG pnTypeTagKey;
	int pnValueData;
	SHTYPETAG pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeSearchByFloat_rets fnServerBtreeSearchByFloat_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByFloat_rets(...);
}
#else
bool_t xdr_fnServerBtreeSearchByFloat_rets();
#endif


struct fnServerBtreeSearchByFloat_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	float fKey;
	SHTYPETAG nTypeTagKey;
};
typedef struct fnServerBtreeSearchByFloat_args fnServerBtreeSearchByFloat_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByFloat_args(...);
}
#else
bool_t xdr_fnServerBtreeSearchByFloat_args();
#endif


struct fnServerBtreeSearchByDouble_rets {
	BTREERESULT ReturnValue;
	int pnValueKey;
	SHTYPETAG pnTypeTagKey;
	int pnValueData;
	SHTYPETAG pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeSearchByDouble_rets fnServerBtreeSearchByDouble_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByDouble_rets(...);
}
#else
bool_t xdr_fnServerBtreeSearchByDouble_rets();
#endif


struct fnServerBtreeSearchByDouble_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	double fKey;
	SHTYPETAG nTypeTagKey;
};
typedef struct fnServerBtreeSearchByDouble_args fnServerBtreeSearchByDouble_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByDouble_args(...);
}
#else
bool_t xdr_fnServerBtreeSearchByDouble_args();
#endif


struct fnServerBtreeSearchByString_rets {
	BTREERESULT ReturnValue;
	int pnValueKey;
	SHTYPETAG pnTypeTagKey;
	int pnValueData;
	SHTYPETAG pnTypeTagData;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnServerBtreeSearchByString_rets fnServerBtreeSearchByString_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByString_rets(...);
}
#else
bool_t xdr_fnServerBtreeSearchByString_rets();
#endif


struct fnServerBtreeSearchByString_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	string_t szKey;
	SHTYPETAG nTypeTagKey;
};
typedef struct fnServerBtreeSearchByString_args fnServerBtreeSearchByString_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnServerBtreeSearchByString_args(...);
}
#else
bool_t xdr_fnServerBtreeSearchByString_args();
#endif


struct fnClientBtreeRoot_rets {
	SHORTOBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreeRoot_rets fnClientBtreeRoot_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeRoot_rets(...);
}
#else
bool_t xdr_fnClientBtreeRoot_rets();
#endif


struct fnClientBtreeRoot_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
};
typedef struct fnClientBtreeRoot_args fnClientBtreeRoot_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeRoot_args(...);
}
#else
bool_t xdr_fnClientBtreeRoot_args();
#endif


struct fnClientBtreeSize_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreeSize_rets fnClientBtreeSize_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeSize_rets(...);
}
#else
bool_t xdr_fnClientBtreeSize_rets();
#endif


struct fnClientBtreeSize_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
};
typedef struct fnClientBtreeSize_args fnClientBtreeSize_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeSize_args(...);
}
#else
bool_t xdr_fnClientBtreeSize_args();
#endif


struct fnClientBtreeTestMode_rets {
	COMPARETAG ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreeTestMode_rets fnClientBtreeTestMode_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeTestMode_rets(...);
}
#else
bool_t xdr_fnClientBtreeTestMode_rets();
#endif


struct fnClientBtreeTestMode_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	COMPARETAG nNewTestMode;
};
typedef struct fnClientBtreeTestMode_args fnClientBtreeTestMode_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreeTestMode_args(...);
}
#else
bool_t xdr_fnClientBtreeTestMode_args();
#endif


struct fnClientBtreePageSize_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreePageSize_rets fnClientBtreePageSize_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreePageSize_rets(...);
}
#else
bool_t xdr_fnClientBtreePageSize_rets();
#endif


struct fnClientBtreePageSize_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTree;
	int nNewPageSize;
};
typedef struct fnClientBtreePageSize_args fnClientBtreePageSize_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreePageSize_args(...);
}
#else
bool_t xdr_fnClientBtreePageSize_args();
#endif


struct fnClientBtreepageParent_rets {
	OBJID ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreepageParent_rets fnClientBtreepageParent_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageParent_rets(...);
}
#else
bool_t xdr_fnClientBtreepageParent_rets();
#endif


struct fnClientBtreepageParent_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTreePage;
};
typedef struct fnClientBtreepageParent_args fnClientBtreepageParent_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageParent_args(...);
}
#else
bool_t xdr_fnClientBtreepageParent_args();
#endif


struct fnClientBtreepageCount_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreepageCount_rets fnClientBtreepageCount_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageCount_rets(...);
}
#else
bool_t xdr_fnClientBtreepageCount_rets();
#endif


struct fnClientBtreepageCount_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTreePage;
};
typedef struct fnClientBtreepageCount_args fnClientBtreepageCount_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageCount_args(...);
}
#else
bool_t xdr_fnClientBtreepageCount_args();
#endif


struct fnClientBtreepageGetSize_rets {
	int ReturnValue;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreepageGetSize_rets fnClientBtreepageGetSize_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageGetSize_rets(...);
}
#else
bool_t xdr_fnClientBtreepageGetSize_rets();
#endif


struct fnClientBtreepageGetSize_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTreePage;
};
typedef struct fnClientBtreepageGetSize_args fnClientBtreepageGetSize_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageGetSize_args(...);
}
#else
bool_t xdr_fnClientBtreepageGetSize_args();
#endif


struct fnClientBtreepageItem_rets {
	int ReturnValue;
	int_vector_t pnValueKey;
	u_int_vector_t pnTypeTagKey;
	int_vector_t pnValueData;
	u_int_vector_t pnTypeTagData;
	u_int_vector_t poNext;
	int nErrorLvl;
	string_t pszErrorMsg;
};
typedef struct fnClientBtreepageItem_rets fnClientBtreepageItem_rets;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageItem_rets(...);
}
#else
bool_t xdr_fnClientBtreepageItem_rets();
#endif


struct fnClientBtreepageItem_args {
	SHORTOBJID oShortObjIdHeap;
	SHORTOBJID oShortObjIdBTreePage;
	int nIndex;
	int nItems;
	int pnValueKeySize;
	int pnTypeTagKeySize;
	int pnValueDataSize;
	int pnTypeTagDataSize;
	int poNextSize;
};
typedef struct fnClientBtreepageItem_args fnClientBtreepageItem_args;
#ifdef __cplusplus
extern "C" {
bool_t xdr_fnClientBtreepageItem_args(...);
}
#else
bool_t xdr_fnClientBtreepageItem_args();
#endif


typedef long	RPCPORT;
extern RPCPORT DLLEXPORT	fnPlobdGetPortOffset	( void );
extern RPCPORT DLLEXPORT	fnPlobdGetPort	( void );
extern RPCPORT DLLEXPORT	fnPlobdSetPort	( RPCPORT	lPortNew );

typedef u_long	RPCVERSION;
extern RPCVERSION DLLEXPORT	fnPlobdGetVersion	( void );
extern RPCVERSION DLLEXPORT	fnPlobdSetVersion	( RPCVERSION	lVersionNew );

extern struct svc_req *	fnServerPlobdRequest	( void );
extern struct svc_req *	fnServerPlobdReply
	( void (*pfnCalled)(), void * pReturnValue );

extern PCLIENT DLLEXPORT fnClientPlobdCreate
	( LPCSTR pszHost, LPCSTR pszTransport );
extern PCLIENT DLLEXPORT fnClientPlobd	( void );
extern LPCSTR DLLEXPORT fnClientPlobdHost	( void );
extern LPCSTR DLLEXPORT fnClientPlobdTransport	( void );
extern bool_t DLLEXPORT fnClientPlobdFlush	( PCLIENT pClient );
extern PCLIENT DLLEXPORT fnClientPlobdDestroy	( PCLIENT pClient );




/* 1996/09/19 HK kirschke@informatik.uni-hamburg.de		*/
/* Following #define bypasses a declaration error in		*/
/* /usr/include/rpc/xdr.h; the declaration found there is:	*/
/*	extern bool_t xdr_bool(XDR *, bool_t *);		*/
/* but should be:						*/
/*	extern bool_t xdr_bool_t(XDR *, bool_t *);		*/

#define xdr_bool_t xdr_bool



















































































































































































































































































































































#define PLOBD ((u_long)0x20506E62)
#define PLOBDVERS ((u_long)1)
#define fnRpc_fnClientDbReadRoot ((u_long)1)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbReadRoot_rets *
#endif
fnrpc_fnclientdbreadroot_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbReadRoot_rets *
#endif
fnrpc_fnclientdbreadroot_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbWriteRoot ((u_long)2)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbWriteRoot_rets *
#endif
fnrpc_fnserverdbwriteroot_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbWriteRoot_rets *
#endif
fnrpc_fnserverdbwriteroot_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbSessions ((u_long)3)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbSessions_rets *
#endif
fnrpc_fnclientdbsessions_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbSessions_rets *
#endif
fnrpc_fnclientdbsessions_1();
#endif /* __cplusplus */
#define fnRpc_fnServerGetVersion ((u_long)4)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetVersion_rets *
#endif
fnrpc_fnservergetversion_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetVersion_rets *
#endif
fnrpc_fnservergetversion_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbCreateMachine ((u_long)5)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbCreateMachine_rets *
#endif
fnrpc_fnclientdbcreatemachine_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbCreateMachine_rets *
#endif
fnrpc_fnclientdbcreatemachine_1();
#endif /* __cplusplus */
#define fnRpc_fnClientMachineLoginP ((u_long)6)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientMachineLoginP_rets *
#endif
fnrpc_fnclientmachineloginp_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientMachineLoginP_rets *
#endif
fnrpc_fnclientmachineloginp_1();
#endif /* __cplusplus */
#define fnRpc_fnClientMachineAddr ((u_long)7)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientMachineAddr_rets *
#endif
fnrpc_fnclientmachineaddr_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientMachineAddr_rets *
#endif
fnrpc_fnclientmachineaddr_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbMachineSearch ((u_long)8)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineSearch_rets *
#endif
fnrpc_fnclientdbmachinesearch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineSearch_rets *
#endif
fnrpc_fnclientdbmachinesearch_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbMachineDelete ((u_long)9)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineDelete_rets *
#endif
fnrpc_fnclientdbmachinedelete_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineDelete_rets *
#endif
fnrpc_fnclientdbmachinedelete_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbMachineInsert ((u_long)10)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineInsert_rets *
#endif
fnrpc_fnclientdbmachineinsert_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachineInsert_rets *
#endif
fnrpc_fnclientdbmachineinsert_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbMachines ((u_long)11)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachines_rets *
#endif
fnrpc_fnclientdbmachines_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbMachines_rets *
#endif
fnrpc_fnclientdbmachines_1();
#endif /* __cplusplus */
#define fnRpc_fnServerGetPortByDirectory ((u_long)12)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetPortByDirectory_rets *
#endif
fnrpc_fnservergetportbydirectory_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetPortByDirectory_rets *
#endif
fnrpc_fnservergetportbydirectory_1();
#endif /* __cplusplus */
#define fnRpc_fnServerGetPID ((u_long)13)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetPID_rets *
#endif
fnrpc_fnservergetpid_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetPID_rets *
#endif
fnrpc_fnservergetpid_1();
#endif /* __cplusplus */
#define fnRpc_fnServerGetDirectory ((u_long)14)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetDirectory_rets *
#endif
fnrpc_fnservergetdirectory_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerGetDirectory_rets *
#endif
fnrpc_fnservergetdirectory_1();
#endif /* __cplusplus */
#define fnRpc_fnServerExit ((u_long)15)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerExit_rets *
#endif
fnrpc_fnserverexit_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerExit_rets *
#endif
fnrpc_fnserverexit_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbReset ((u_long)16)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbReset_rets *
#endif
fnrpc_fnserverdbreset_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbReset_rets *
#endif
fnrpc_fnserverdbreset_1();
#endif /* __cplusplus */
#define fnRpc_fnServerRestart ((u_long)17)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerRestart_rets *
#endif
fnrpc_fnserverrestart_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerRestart_rets *
#endif
fnrpc_fnserverrestart_1();
#endif /* __cplusplus */
#define fnRpc_fnClientObjectCanModify ((u_long)18)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientObjectCanModify_rets *
#endif
fnrpc_fnclientobjectcanmodify_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientObjectCanModify_rets *
#endif
fnrpc_fnclientobjectcanmodify_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbClose_batch ((u_long)19)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverdbclose_batch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverdbclose_batch_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbConfiguration ((u_long)20)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbConfiguration_rets *
#endif
fnrpc_fnclientdbconfiguration_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbConfiguration_rets *
#endif
fnrpc_fnclientdbconfiguration_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbCreateObject ((u_long)21)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateObject_rets *
#endif
fnrpc_fnserverdbcreateobject_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateObject_rets *
#endif
fnrpc_fnserverdbcreateobject_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbCreateObjects ((u_long)22)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateObjects_rets *
#endif
fnrpc_fnserverdbcreateobjects_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateObjects_rets *
#endif
fnrpc_fnserverdbcreateobjects_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectDestroy_batch ((u_long)23)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverobjectdestroy_batch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverobjectdestroy_batch_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectObjIdSize ((u_long)24)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectObjIdSize_rets *
#endif
fnrpc_fnserverobjectobjidsize_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectObjIdSize_rets *
#endif
fnrpc_fnserverobjectobjidsize_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbOpen ((u_long)25)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbOpen_rets *
#endif
fnrpc_fnserverdbopen_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbOpen_rets *
#endif
fnrpc_fnserverdbopen_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectFlush ((u_long)26)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectFlush_rets *
#endif
fnrpc_fnserverobjectflush_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectFlush_rets *
#endif
fnrpc_fnserverobjectflush_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadAtIndex ((u_long)27)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadAtIndex_rets *
#endif
fnrpc_fnserverobjectreadatindex_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadAtIndex_rets *
#endif
fnrpc_fnserverobjectreadatindex_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadAtIndices ((u_long)28)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadAtIndices_rets *
#endif
fnrpc_fnserverobjectreadatindices_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadAtIndices_rets *
#endif
fnrpc_fnserverobjectreadatindices_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadObjId ((u_long)29)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadObjId_rets *
#endif
fnrpc_fnserverobjectreadobjid_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadObjId_rets *
#endif
fnrpc_fnserverobjectreadobjid_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadValues ((u_long)30)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadValues_rets *
#endif
fnrpc_fnserverobjectreadvalues_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadValues_rets *
#endif
fnrpc_fnserverobjectreadvalues_1();
#endif /* __cplusplus */
#define fnRpc_fnClientDbStatistics ((u_long)31)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbStatistics_rets *
#endif
fnrpc_fnclientdbstatistics_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientDbStatistics_rets *
#endif
fnrpc_fnclientdbstatistics_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbStabilise_batch ((u_long)32)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverdbstabilise_batch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverdbstabilise_batch_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectTypeTag ((u_long)33)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectTypeTag_rets *
#endif
fnrpc_fnserverobjecttypetag_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectTypeTag_rets *
#endif
fnrpc_fnserverobjecttypetag_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectValueSize ((u_long)34)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectValueSize_rets *
#endif
fnrpc_fnserverobjectvaluesize_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectValueSize_rets *
#endif
fnrpc_fnserverobjectvaluesize_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteAtIndex ((u_long)35)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteAtIndex_rets *
#endif
fnrpc_fnserverobjectwriteatindex_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteAtIndex_rets *
#endif
fnrpc_fnserverobjectwriteatindex_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteAtIndices ((u_long)36)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteAtIndices_rets *
#endif
fnrpc_fnserverobjectwriteatindices_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteAtIndices_rets *
#endif
fnrpc_fnserverobjectwriteatindices_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteObjId ((u_long)37)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteObjId_rets *
#endif
fnrpc_fnserverobjectwriteobjid_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteObjId_rets *
#endif
fnrpc_fnserverobjectwriteobjid_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteValues ((u_long)38)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteValues_rets *
#endif
fnrpc_fnserverobjectwritevalues_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteValues_rets *
#endif
fnrpc_fnserverobjectwritevalues_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeDependent ((u_long)39)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeDependent_rets *
#endif
fnrpc_fnshortmakedependent_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeDependent_rets *
#endif
fnrpc_fnshortmakedependent_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectPeekSlots ((u_long)40)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPeekSlots_rets *
#endif
fnrpc_fnserverobjectpeekslots_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPeekSlots_rets *
#endif
fnrpc_fnserverobjectpeekslots_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectPeekValues ((u_long)41)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPeekValues_rets *
#endif
fnrpc_fnserverobjectpeekvalues_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPeekValues_rets *
#endif
fnrpc_fnserverobjectpeekvalues_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectPoke_batch ((u_long)42)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverobjectpoke_batch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnserverobjectpoke_batch_1();
#endif /* __cplusplus */
#define fnRpc_fnFlushMode ((u_long)43)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnFlushMode_rets *
#endif
fnrpc_fnflushmode_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnFlushMode_rets *
#endif
fnrpc_fnflushmode_1();
#endif /* __cplusplus */
#define fnRpc_fnFlagWord ((u_long)44)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnFlagWord_rets *
#endif
fnrpc_fnflagword_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnFlagWord_rets *
#endif
fnrpc_fnflagword_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeIVector ((u_long)45)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeIVector_rets *
#endif
fnrpc_fnshortmakeivector_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeIVector_rets *
#endif
fnrpc_fnshortmakeivector_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeString ((u_long)46)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeString_rets *
#endif
fnrpc_fnshortmakestring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeString_rets *
#endif
fnrpc_fnshortmakestring_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbCreateStructures ((u_long)47)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateStructures_rets *
#endif
fnrpc_fnserverdbcreatestructures_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateStructures_rets *
#endif
fnrpc_fnserverdbcreatestructures_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbCreateInstances ((u_long)48)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateInstances_rets *
#endif
fnrpc_fnserverdbcreateinstances_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbCreateInstances_rets *
#endif
fnrpc_fnserverdbcreateinstances_1();
#endif /* __cplusplus */
#define fnRpc_fnServerInstanceWriteWrapper ((u_long)49)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerInstanceWriteWrapper_rets *
#endif
fnrpc_fnserverinstancewritewrapper_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerInstanceWriteWrapper_rets *
#endif
fnrpc_fnserverinstancewritewrapper_1();
#endif /* __cplusplus */
#define fnRpc_fnServerInstanceWriteData ((u_long)50)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerInstanceWriteData_rets *
#endif
fnrpc_fnserverinstancewritedata_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerInstanceWriteData_rets *
#endif
fnrpc_fnserverinstancewritedata_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbTypeTagName ((u_long)51)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbTypeTagName_rets *
#endif
fnrpc_fnserverdbtypetagname_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbTypeTagName_rets *
#endif
fnrpc_fnserverdbtypetagname_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectPrettyPrint ((u_long)52)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPrettyPrint_rets *
#endif
fnrpc_fnserverobjectprettyprint_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectPrettyPrint_rets *
#endif
fnrpc_fnserverobjectprettyprint_1();
#endif /* __cplusplus */
#define fnRpc_fnShortPrintSymbol ((u_long)53)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortPrintSymbol_rets *
#endif
fnrpc_fnshortprintsymbol_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortPrintSymbol_rets *
#endif
fnrpc_fnshortprintsymbol_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeSingleFloat ((u_long)54)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeSingleFloat_rets *
#endif
fnrpc_fnshortmakesinglefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeSingleFloat_rets *
#endif
fnrpc_fnshortmakesinglefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeDoubleFloat ((u_long)55)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeDoubleFloat_rets *
#endif
fnrpc_fnshortmakedoublefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeDoubleFloat_rets *
#endif
fnrpc_fnshortmakedoublefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbMakeBignum ((u_long)56)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbMakeBignum_rets *
#endif
fnrpc_fnserverdbmakebignum_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbMakeBignum_rets *
#endif
fnrpc_fnserverdbmakebignum_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadBignum ((u_long)57)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadBignum_rets *
#endif
fnrpc_fnserverobjectreadbignum_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadBignum_rets *
#endif
fnrpc_fnserverobjectreadbignum_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadDoubleFloat ((u_long)58)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadDoubleFloat_rets *
#endif
fnrpc_fnserverobjectreaddoublefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadDoubleFloat_rets *
#endif
fnrpc_fnserverobjectreaddoublefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadFixnum ((u_long)59)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadFixnum_rets *
#endif
fnrpc_fnserverobjectreadfixnum_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadFixnum_rets *
#endif
fnrpc_fnserverobjectreadfixnum_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectReadSingleFloat ((u_long)60)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadSingleFloat_rets *
#endif
fnrpc_fnserverobjectreadsinglefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectReadSingleFloat_rets *
#endif
fnrpc_fnserverobjectreadsinglefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteBignum ((u_long)61)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteBignum_rets *
#endif
fnrpc_fnserverobjectwritebignum_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteBignum_rets *
#endif
fnrpc_fnserverobjectwritebignum_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteDoubleFloat ((u_long)62)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteDoubleFloat_rets *
#endif
fnrpc_fnserverobjectwritedoublefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteDoubleFloat_rets *
#endif
fnrpc_fnserverobjectwritedoublefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteFixnum ((u_long)63)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteFixnum_rets *
#endif
fnrpc_fnserverobjectwritefixnum_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteFixnum_rets *
#endif
fnrpc_fnserverobjectwritefixnum_1();
#endif /* __cplusplus */
#define fnRpc_fnServerObjectWriteSingleFloat ((u_long)64)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteSingleFloat_rets *
#endif
fnrpc_fnserverobjectwritesinglefloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerObjectWriteSingleFloat_rets *
#endif
fnrpc_fnserverobjectwritesinglefloat_1();
#endif /* __cplusplus */
#define fnRpc_fnClientLockPrint ((u_long)65)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientLockPrint_rets *
#endif
fnrpc_fnclientlockprint_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientLockPrint_rets *
#endif
fnrpc_fnclientlockprint_1();
#endif /* __cplusplus */
#define fnRpc_fnClientTransactionLockGet ((u_long)66)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientTransactionLockGet_rets *
#endif
fnrpc_fnclienttransactionlockget_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientTransactionLockGet_rets *
#endif
fnrpc_fnclienttransactionlockget_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionLockInsert ((u_long)67)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionLockInsert_rets *
#endif
fnrpc_fnservertransactionlockinsert_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionLockInsert_rets *
#endif
fnrpc_fnservertransactionlockinsert_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionLockSet ((u_long)68)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionLockSet_rets *
#endif
fnrpc_fnservertransactionlockset_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionLockSet_rets *
#endif
fnrpc_fnservertransactionlockset_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionUnlock ((u_long)69)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlock_rets *
#endif
fnrpc_fnservertransactionunlock_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlock_rets *
#endif
fnrpc_fnservertransactionunlock_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionUnlockAll ((u_long)70)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlockAll_rets *
#endif
fnrpc_fnservertransactionunlockall_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlockAll_rets *
#endif
fnrpc_fnservertransactionunlockall_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionUnlockAllAll ((u_long)71)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlockAllAll_rets *
#endif
fnrpc_fnservertransactionunlockallall_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionUnlockAllAll_rets *
#endif
fnrpc_fnservertransactionunlockallall_1();
#endif /* __cplusplus */
#define fnRpc_fnShortMakeReadOnly ((u_long)72)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeReadOnly_rets *
#endif
fnrpc_fnshortmakereadonly_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnShortMakeReadOnly_rets *
#endif
fnrpc_fnshortmakereadonly_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionBegin ((u_long)73)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionBegin_rets *
#endif
fnrpc_fnservertransactionbegin_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionBegin_rets *
#endif
fnrpc_fnservertransactionbegin_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionCancel ((u_long)74)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionCancel_rets *
#endif
fnrpc_fnservertransactioncancel_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionCancel_rets *
#endif
fnrpc_fnservertransactioncancel_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionEnd ((u_long)75)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionEnd_rets *
#endif
fnrpc_fnservertransactionend_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerTransactionEnd_rets *
#endif
fnrpc_fnservertransactionend_1();
#endif /* __cplusplus */
#define fnRpc_fnServerTransactionFlush_batch ((u_long)76)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnservertransactionflush_batch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
void *
#endif
fnrpc_fnservertransactionflush_batch_1();
#endif /* __cplusplus */
#define fnRpc_fnServerDbTransactionP ((u_long)77)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbTransactionP_rets *
#endif
fnrpc_fnserverdbtransactionp_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerDbTransactionP_rets *
#endif
fnrpc_fnserverdbtransactionp_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreeClear ((u_long)78)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeClear_rets *
#endif
fnrpc_fnclientbtreeclear_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeClear_rets *
#endif
fnrpc_fnclientbtreeclear_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreeCount ((u_long)79)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeCount_rets *
#endif
fnrpc_fnclientbtreecount_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeCount_rets *
#endif
fnrpc_fnclientbtreecount_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeDelete ((u_long)80)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDelete_rets *
#endif
fnrpc_fnserverbtreedelete_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDelete_rets *
#endif
fnrpc_fnserverbtreedelete_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeDeleteByFloat ((u_long)81)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByFloat_rets *
#endif
fnrpc_fnserverbtreedeletebyfloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByFloat_rets *
#endif
fnrpc_fnserverbtreedeletebyfloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeDeleteByDouble ((u_long)82)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByDouble_rets *
#endif
fnrpc_fnserverbtreedeletebydouble_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByDouble_rets *
#endif
fnrpc_fnserverbtreedeletebydouble_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeDeleteByString ((u_long)83)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByString_rets *
#endif
fnrpc_fnserverbtreedeletebystring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeDeleteByString_rets *
#endif
fnrpc_fnserverbtreedeletebystring_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeInsert ((u_long)84)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsert_rets *
#endif
fnrpc_fnserverbtreeinsert_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsert_rets *
#endif
fnrpc_fnserverbtreeinsert_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeInsertByFloat ((u_long)85)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByFloat_rets *
#endif
fnrpc_fnserverbtreeinsertbyfloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByFloat_rets *
#endif
fnrpc_fnserverbtreeinsertbyfloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeInsertByDouble ((u_long)86)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByDouble_rets *
#endif
fnrpc_fnserverbtreeinsertbydouble_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByDouble_rets *
#endif
fnrpc_fnserverbtreeinsertbydouble_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeInsertByString ((u_long)87)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByString_rets *
#endif
fnrpc_fnserverbtreeinsertbystring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeInsertByString_rets *
#endif
fnrpc_fnserverbtreeinsertbystring_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSearch ((u_long)88)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearch_rets *
#endif
fnrpc_fnserverbtreemapsearch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearch_rets *
#endif
fnrpc_fnserverbtreemapsearch_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSearchByFloat ((u_long)89)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByFloat_rets *
#endif
fnrpc_fnserverbtreemapsearchbyfloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByFloat_rets *
#endif
fnrpc_fnserverbtreemapsearchbyfloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSearchByDouble ((u_long)90)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByDouble_rets *
#endif
fnrpc_fnserverbtreemapsearchbydouble_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByDouble_rets *
#endif
fnrpc_fnserverbtreemapsearchbydouble_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSearchByString ((u_long)91)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByString_rets *
#endif
fnrpc_fnserverbtreemapsearchbystring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSearchByString_rets *
#endif
fnrpc_fnserverbtreemapsearchbystring_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSeek ((u_long)92)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSeek_rets *
#endif
fnrpc_fnserverbtreemapseek_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSeek_rets *
#endif
fnrpc_fnserverbtreemapseek_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapSeekSet ((u_long)93)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSeekSet_rets *
#endif
fnrpc_fnserverbtreemapseekset_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapSeekSet_rets *
#endif
fnrpc_fnserverbtreemapseekset_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapFirst ((u_long)94)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirst_rets *
#endif
fnrpc_fnserverbtreemapfirst_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirst_rets *
#endif
fnrpc_fnserverbtreemapfirst_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapFirstByFloat ((u_long)95)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByFloat_rets *
#endif
fnrpc_fnserverbtreemapfirstbyfloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByFloat_rets *
#endif
fnrpc_fnserverbtreemapfirstbyfloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapFirstByDouble ((u_long)96)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByDouble_rets *
#endif
fnrpc_fnserverbtreemapfirstbydouble_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByDouble_rets *
#endif
fnrpc_fnserverbtreemapfirstbydouble_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreemapFirstByString ((u_long)97)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByString_rets *
#endif
fnrpc_fnserverbtreemapfirstbystring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreemapFirstByString_rets *
#endif
fnrpc_fnserverbtreemapfirstbystring_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreemapNext ((u_long)98)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreemapNext_rets *
#endif
fnrpc_fnclientbtreemapnext_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreemapNext_rets *
#endif
fnrpc_fnclientbtreemapnext_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreemapLast ((u_long)99)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreemapLast_rets *
#endif
fnrpc_fnclientbtreemaplast_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreemapLast_rets *
#endif
fnrpc_fnclientbtreemaplast_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreePrint ((u_long)100)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreePrint_rets *
#endif
fnrpc_fnclientbtreeprint_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreePrint_rets *
#endif
fnrpc_fnclientbtreeprint_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeSearch ((u_long)101)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearch_rets *
#endif
fnrpc_fnserverbtreesearch_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearch_rets *
#endif
fnrpc_fnserverbtreesearch_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeSearchByFloat ((u_long)102)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByFloat_rets *
#endif
fnrpc_fnserverbtreesearchbyfloat_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByFloat_rets *
#endif
fnrpc_fnserverbtreesearchbyfloat_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeSearchByDouble ((u_long)103)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByDouble_rets *
#endif
fnrpc_fnserverbtreesearchbydouble_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByDouble_rets *
#endif
fnrpc_fnserverbtreesearchbydouble_1();
#endif /* __cplusplus */
#define fnRpc_fnServerBtreeSearchByString ((u_long)104)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByString_rets *
#endif
fnrpc_fnserverbtreesearchbystring_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnServerBtreeSearchByString_rets *
#endif
fnrpc_fnserverbtreesearchbystring_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreeRoot ((u_long)105)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeRoot_rets *
#endif
fnrpc_fnclientbtreeroot_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeRoot_rets *
#endif
fnrpc_fnclientbtreeroot_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreeSize ((u_long)106)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeSize_rets *
#endif
fnrpc_fnclientbtreesize_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeSize_rets *
#endif
fnrpc_fnclientbtreesize_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreeTestMode ((u_long)107)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeTestMode_rets *
#endif
fnrpc_fnclientbtreetestmode_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreeTestMode_rets *
#endif
fnrpc_fnclientbtreetestmode_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreePageSize ((u_long)108)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreePageSize_rets *
#endif
fnrpc_fnclientbtreepagesize_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreePageSize_rets *
#endif
fnrpc_fnclientbtreepagesize_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreepageParent ((u_long)109)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageParent_rets *
#endif
fnrpc_fnclientbtreepageparent_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageParent_rets *
#endif
fnrpc_fnclientbtreepageparent_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreepageCount ((u_long)110)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageCount_rets *
#endif
fnrpc_fnclientbtreepagecount_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageCount_rets *
#endif
fnrpc_fnclientbtreepagecount_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreepageGetSize ((u_long)111)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageGetSize_rets *
#endif
fnrpc_fnclientbtreepagegetsize_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageGetSize_rets *
#endif
fnrpc_fnclientbtreepagegetsize_1();
#endif /* __cplusplus */
#define fnRpc_fnClientBtreepageItem ((u_long)112)
#ifdef __cplusplus
extern "C" {
extern 
#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageItem_rets *
#endif
fnrpc_fnclientbtreepageitem_1(...);
}
#else

#ifdef MULTITHREAD
enum clnt_stat
#else
fnClientBtreepageItem_rets *
#endif
fnrpc_fnclientbtreepageitem_1();
#endif /* __cplusplus */


/* ------------------------------------------------------------------------
| End of plobd.x
 ----------------------------------------------------------------------- */
