# --------------------------------------------------------------------------
# NOTE: This makefile was generated by plobimake;
# ===== changes done directly to this file will be lost!
# --------------------------------------------------------------------------
SHELL=/bin/sh
PLOBDIR=/home/hkirschk/plob-2.09
FRANZCL=/opt/acl60
OPSYS=WIN32
opsys=win32
CC=cl
COPTPIC=
COPTDEB=-Zi
COPTOPT=-Ox
CPP=gcc -E -P
LDLIBS=
RELPLOBDIR=../..
BINDIR=$(RELPLOBDIR)/bin
CONFDIR=$(RELPLOBDIR)/conf
RULES=$(CONFDIR)/make.rules.in
LIBDIR=$(RELPLOBDIR)/lib/$(opsys)
PSDIR=$(RELPLOBDIR)/ps
SRCDIR=$(RELPLOBDIR)/src
SRCIDIR=$(SRCDIR)/include
LISPDOCDIR=$(SRCDIR)/lisp-doc
TEXDIR=$(RELPLOBDIR)/tex
TEXIDIR=$(TEXDIR)/inputs
RPC_PROGRAM=0x20506E62
RPC_VERSION=1
HASAUTH=AUTH_NON
AR=lib
ARFLAGS=
LINK=link
LINKc=$(LINK) $(LDFLAGS)
MAKE_EXE=make
MAKE_F= -f
MAKE_FILE=win32/makefile
MAKE=$(MAKE_EXE) $(MAKE_F) $(MAKE_FILE)
RANLIB=: ranlib
LDSHAREDOPT=-dll
STDTARGETS=all clean dist-clean initial makefiles
SHELL=/bin/sh
C2RPC=$(BINDIR)/c2rpc -CPP   '$(CPP)' -I$(BINDIR)   -P   $(RPC_PROGRAM) -V   $(RPC_VERSION) $(C2RPCFLAGS)
C2LISP=$(BINDIR)/c2lisp -CPP   '$(CPP)' -I$(BINDIR)   $(C2LISPFLAGS)
SUFFIXES=.exe .dll .lib .obj  \
	 .x .lisp .c .h \
	 .bbl .aux \
	 .ps .eps .dvi .dgr .tex
DEFAULTHOST=localhost
DEFAULTTRANS=tcp
DEFAULTROOT=/opt/data/plob
DEFAULTBASE=database
COMPILEc=$(CC) $(CFLAGS) $(CPPFLAGS)
OUTPUT_OPTION_OBJ= -c    -Fo$@
OUTPUT_OPTION_LIB=  -out:$@
OUTPUT_OPTION_DLL= $(LDSHAREDOPT)  -out:$@
OUTPUT_OPTION_EXE=  -out:$@
CPPFLAGS=  -I$(opsys)    -I$(SRCIDIR)    -I$(FRANZCL)/home/misc -DDATABASE='"$(DEFAULTBASE)"' -D$(OPSYS)=1 -DOPSYS='"$(OPSYS)"' -DHASAUTH=$(HASAUTH)  -nologo -D_DLL   -D_NTSDK -D_WIN32_WINNT=0x0400 -Fd$(LIBDIR)/ -I$(MSVCPATH)/include -I$(RELPLOBDIR)/oncrpc-1.12
RPCGEN=rpcgen
RPCGENFLAGS=
all :: 
MAKECMD=fnCallMake() { \
set +e; \
status="0"; \
dirs="$$1"; \
if [ -n   "$$2" ]; then \
shift; \
args="$$*"; \
fi; \
if [ -d   "$(BINDIR)" ]; then \
PATH="$(BINDIR):$${PATH}"; export PATH; \
elif [ -d   "bin" ]; then \
PATH="`pwd`/bin:$${PATH}"; export PATH; \
fi; \
case "$(MAKEFLAGS)" in \
''|'-'*)	szMakeflags="$(MAKEFLAGS)";; \
*)		szMakeflags="-$(MAKEFLAGS)";; \
esac; \
if [ "$${szMakeflags}" = "-w" ]; then \
szMakeflags="--no-print-directory"; \
else \
szMakeflags=""; \
fi; \
if [ ! -r   "$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$(opsys)/makefile"   "makefile.in"; \
fi; \
for dir in $${dirs} ; do \
if [ ! -r   "$${dir}/$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile in $${dir}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$${dir}/$(opsys)/makefile"   "$${dir}/makefile.in"; \
fi; \
( \
echo "cd `pwd`/$${dir}"; \
cd "$${dir}"; \
$(MAKE_EXE) $${szMakeflags}  $(MAKE_F) "$(opsys)/makefile" $${args} ; \
); \
s="$$?"; \
if [ "$${s}" -ne   0 ]; then \
status="$$s"; \
fi; \
done; \
return $${status} ; \
}; fnCallMake
DGRTODVI=dgrtodvi
LATEXCMD=fnCallLaTeX() { \
set +e; \
trap "rm -f /tmp/*.$$$$" 1 2 15; \
TEXINPUTS="$(TEXIDIR):$(LISPDOCDIR):$${TEXINPUTS}"; \
export TEXINPUTS; \
srcfile="$$1"; \
texfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${texfile}`"; \
touch="/usr/5bin/touch"; \
if [ -n   "$(BATCHMODE)" ]; then \
batchmode="\batchmode"; \
else \
batchmode=""; \
fi; \
options="$${batchmode}$(TEXOPTS)$$*"; \
if [ -z   "$${options}" ]; then \
cmd="latex '$${texfile}'"; \
else \
cmd="latex '$${options}\input{$${texfile}}'"; \
fi; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
logfile="$${jobname}.log"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
auxfile="$${jobname}.aux"; \
bblfile="$${jobname}.bbl"; \
dvifile="$${jobname}.dvi"; \
glofile="$${jobname}.glo"; \
if [ "$${status}" -eq   0 ]; then \
if [ "$${dvifile}" != "$@" ]; then \
cmd="mv $${dvifile} $@"; \
echo "$${cmd}"; $${cmd}; \
fi; \
if [ -s   "$${glofile}" -a   -w   "$${glofile}" ]; then \
tmpfile="/tmp/$${jobname}.$$$$"; \
cmd="sort -bdfi $${glofile}"; \
echo "$${cmd} > $${tmpfile}"; \
$${cmd}  > $${tmpfile}; \
cmd="mv $${tmpfile} $${glofile}"; \
echo "$${cmd}"; \
$${cmd} ; \
fi; \
if tail -32   "${logpath}"|grep -is   "have changed">/dev/null 1>&2; then \
cmd="$${touch} 01010101 $@"; \
echo "$${cmd}"; $${cmd} ; \
if [ "$@" = "$${dvifile}" ]; then \
unset dvifile; \
fi; \
fi; \
if head -32   "$${auxfile}"|grep -is   "\\bibstyle">/dev/null 1>&2; then \
if grep -is   "citation.*undefined" "$${logpath}">/dev/null 1>&2; then \
cmd="rm -f $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
elif [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${dvifile} $${auxfile} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
else \
cmd="rm -f $${dvifile} $@ $${glofile}"; \
echo "$${cmd}"; $${cmd} ; \
if [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
return $${status} ; \
}; fnCallLaTeX
BIBTEXCMD=fnCallBiBTeX() { \
set +e; \
srcfile="$$1"; \
bibfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${bibfile}`"; \
cmd="bibtex $${bibfile}"; \
echo "$${cmd}"; $${cmd} ; status="$$?"; \
logfile="$${jobname}.blg"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
return $${status} ; \
}; fnCallBiBTeX
LNCMD=fnCallLn() { \
set +e; \
for file in $${*} ; do \
target="`basename $${file}`"; \
if [ ! -r   "$${target}" ]; then \
cmd="ln -s $${file} $${target}"; \
echo "$${cmd}"; $${cmd} ; \
fi \
done; \
return 0; \
}; fnCallLn
RMCMD=fnCallRm() { \
set +e; \
if [ -r   "$$2" ]; then \
echo ""; \
echo "$$1"; \
echo -n   "Answer 'yes' if this is ok. "; \
read answer; \
if [ "$${answer}" != "yes" ]; then \
echo ""; \
echo "Canceled $@"; \
exit 255; \
fi; \
fi; \
shift; \
echo "rm $$*"; \
rm $${*} ; \
return 0; \
}; fnCallRm
GZIP=gzip
GZIPCMD=fnCallGZip() { \
set +e; \
status="0"; \
trap "mv $<.$$$$ $<" 1 2 15; \
cmd="cp $< $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="$(GZIP) $(GZIPFLAGS) -f $<"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="mv $<.$$$$ $<; touch $@"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
else \
cmd="rm -f $@ $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
fi; \
fi; \
return $${status} ; \
}; fnCallGZip
ASSERTTOPLEVEL= \
PWD="`pwd`"; \
if [ ! -d   "src/include/allegro5" ]; then \
echo "*** "'`'"make $@' can be called only" 1>&2; \
echo "*** in the top-level directory of PLOB!" 1>&2; \
exit 1; \
fi; \
PATH="$${PWD}/bin:$${PATH}"; export PATH
config shipout : 
	@$(ASSERTTOPLEVEL); \
plobconfig -$@
standard-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -standard
advanced-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -advanced
ADDBINDIR=if [ -d   "bin" ]; then \
	    BINPATH="`pwd`/bin"; \
	  elif [ -d   "../bin" ]; then \
	    BINPATH="`(cd ../bin;pwd)`"; \
	  elif [ -d   "../../bin" ]; then \
	    BINPATH="`(cd ../../bin;pwd)`"; \
	  fi; \
	  PATH="$${BINPATH}:$${PATH}"; export PATH
$(CONFDIR)/$(opsys)/make.server : $(RULES)        $(CONFDIR)/make.server.in $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP \"$(CPP)\" -I $(CONFDIR)/$(opsys) -o $@ $(CONFDIR)/make.server.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o $@      "$(CONFDIR)/make.server.in"
server : $(CONFDIR)/$(opsys)/make.server
	@$(MAKE_EXE) $(MAKE_F) "$(CONFDIR)/$(opsys)/make.server"
tex-log-directory : log
bin log $(CONFDIR)/$(opsys) $(opsys) $(opsys)/pic : 
	@if [ ! -d   "$@" ]; then \
echo "mkdir $@"; \
mkdir  $@   ; \
fi
default-all :: 
default-clean :: 
		-rm -f   *~ core a.out gmon.out *.log log/*
default-dist-clean :: clean
		-rm -f     *.lib       *.obj *.dll     *.fsl *.fasl *.wfasl
default-initial :: $(opsys)
$(RULES) : 
$(CONFDIR)/make.server.in : 
GETMAKEVARSCMD=fnCallGetMakeVars() { \
echo 'Looking for old configuration file, please wait ...'; \
szOldConfFile="`ls -1t $$1/../../*/conf/$(opsys)/make.vars.in 2>/dev/null|head -1`"; \
if [ -r   "$${szOldConfFile}" ]; then \
szOldConfDir="`dirname $${szOldConfFile}`"; \
szOldConfFile="`(cd $${szOldConfDir}; pwd)`/`basename $${szOldConfFile}`"; \
echo "Using old configuration file $${szOldConfFile}"; \
cp -p   "$${szOldConfFile}" "$$2"; \
fi; \
if [ ! -r   "$$2" ]; then \
cp -p   "$$1/make.vars.def" "$$2"; \
fi; \
}; fnCallGetMakeVars
$(CONFDIR)/$(opsys)/make.vars.in : 
	@if [ -d   "$(CONFDIR)" ]; then \
$(GETMAKEVARSCMD) $(CONFDIR)  $@   ; \
elif [ -r   "conf/make.vars.def" -a   ! -r   "conf/make.vars.in" ]; then \
$(GETMAKEVARSCMD) conf $(CONFDIR)/$(opsys)/make.vars.in; \
fi
makefile default-makefiles :: makefile.in $(RULES)         $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP '$(CPP)' -I $(CONFDIR)/$(opsys) -o $(opsys)/makefile makefile.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o "$(opsys)/makefile" "makefile.in"
ALLOPSYS=irix linux solaris win32
MKMAKEFILE=fnMkMakefile() { \
set +e; \
echo ''; \
echo "Making makefiles for $${1}"; \
if [ ! -r   "$(CONFDIR)/$${1}/make.vars.in" ]; then \
if [ -r   "$(CONFDIR)/$${1}/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/$$1/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
elif [ -r   "$(CONFDIR)/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
fi; \
fi; \
if [ ! -r   "$${1}/makefile" ]; then \
echo "Making bootstrap makefile for $${1}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$${1}" -o "$${1}/makefile" "makefile.in"; \
fi; \
$(MAKE_EXE) $(MAKE_F) "$${1}/makefile" makefiles; \
}
all-makefiles : 
	@$(ADDBINDIR); \
$(MKMAKEFILE); \
for o in $(ALLOPSYS); do \
fnMkMakefile $${o} ; \
done
all :: 
doc :: ../../tex/inputs/plobversion.tex
../../tex/inputs/plobversion.tex : plobversion.h       c2tex.h
	$(CPP) -o $@       -DC2TEX=1     plobversion.h
plobrootDeps=$(SRCIDIR)/plobversion.h
lisp : lispworks-code  allegro-code
allegro4/plobroot.lisp : plobroot.h     $(plobrootDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobroot.h
allegro4/plobadmin.lisp : plobadmin.h     $(plobadminDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobadmin.h
allegro4/plob.lisp : plob.h     $(plobDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plob.h
allegro4/plobmisc.lisp : plobmisc.h     $(plobmiscDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobmisc.h
allegro4/plobff.lisp : plobff.h     $(plobffDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobff.h
allegro4/plobsequ.lisp : plobsequ.h     $(plobsequDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobsequ.h
allegro4/plobstruct.lisp : plobstruct.h     $(plobstructDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobstruct.h
allegro4/plobclos.lisp : plobclos.h     $(plobclosDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobclos.h
allegro4/plobtype.lisp : plobtype.h     $(plobtypeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobtype.h
allegro4/plobnumber.lisp : plobnumber.h     $(plobnumberDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobnumber.h
allegro4/ploblock.lisp : ploblock.h     $(ploblockDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ ploblock.h
allegro4/plobheap.lisp : plobheap.h     $(plobheapDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobheap.h
allegro4/plobbtree.lisp : plobbtree.h     $(plobbtreeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO4=1 -DPACKAGE=:plob   -o $@ plobbtree.h
allegro5/plobroot.lisp : plobroot.h     $(plobrootDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobroot.h
allegro5/plobadmin.lisp : plobadmin.h     $(plobadminDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobadmin.h
allegro5/plob.lisp : plob.h     $(plobDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plob.h
allegro5/plobmisc.lisp : plobmisc.h     $(plobmiscDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobmisc.h
allegro5/plobff.lisp : plobff.h     $(plobffDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobff.h
allegro5/plobsequ.lisp : plobsequ.h     $(plobsequDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobsequ.h
allegro5/plobstruct.lisp : plobstruct.h     $(plobstructDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobstruct.h
allegro5/plobclos.lisp : plobclos.h     $(plobclosDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobclos.h
allegro5/plobtype.lisp : plobtype.h     $(plobtypeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobtype.h
allegro5/plobnumber.lisp : plobnumber.h     $(plobnumberDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobnumber.h
allegro5/ploblock.lisp : ploblock.h     $(ploblockDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ ploblock.h
allegro5/plobheap.lisp : plobheap.h     $(plobheapDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobheap.h
allegro5/plobbtree.lisp : plobbtree.h     $(plobbtreeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO5=1 -DPACKAGE=:plob   -o $@ plobbtree.h
allegro6/plobroot.lisp : plobroot.h     $(plobrootDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobroot.h
allegro6/plobadmin.lisp : plobadmin.h     $(plobadminDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobadmin.h
allegro6/plob.lisp : plob.h     $(plobDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plob.h
allegro6/plobmisc.lisp : plobmisc.h     $(plobmiscDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobmisc.h
allegro6/plobff.lisp : plobff.h     $(plobffDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobff.h
allegro6/plobsequ.lisp : plobsequ.h     $(plobsequDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobsequ.h
allegro6/plobstruct.lisp : plobstruct.h     $(plobstructDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobstruct.h
allegro6/plobclos.lisp : plobclos.h     $(plobclosDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobclos.h
allegro6/plobtype.lisp : plobtype.h     $(plobtypeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobtype.h
allegro6/plobnumber.lisp : plobnumber.h     $(plobnumberDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobnumber.h
allegro6/ploblock.lisp : ploblock.h     $(ploblockDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ ploblock.h
allegro6/plobheap.lisp : plobheap.h     $(plobheapDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobheap.h
allegro6/plobbtree.lisp : plobbtree.h     $(plobbtreeDeps) $(STDINCLUDE)
	$(C2LISP) -DALLEGRO6=1 -DPACKAGE=:plob   -o $@ plobbtree.h
ALLEGRO4FILES=          allegro4/plobroot.lisp allegro4/plobadmin.lisp allegro4/plob.lisp allegro4/plobmisc.lisp allegro4/plobff.lisp allegro4/plobsequ.lisp allegro4/plobstruct.lisp allegro4/plobclos.lisp allegro4/plobtype.lisp allegro4/plobnumber.lisp allegro4/ploblock.lisp allegro4/plobheap.lisp allegro4/plobbtree.lisp
ALLEGRO5FILES=          allegro5/plobroot.lisp allegro5/plobadmin.lisp allegro5/plob.lisp allegro5/plobmisc.lisp allegro5/plobff.lisp allegro5/plobsequ.lisp allegro5/plobstruct.lisp allegro5/plobclos.lisp allegro5/plobtype.lisp allegro5/plobnumber.lisp allegro5/ploblock.lisp allegro5/plobheap.lisp allegro5/plobbtree.lisp
ALLEGRO6FILES=          allegro6/plobroot.lisp allegro6/plobadmin.lisp allegro6/plob.lisp allegro6/plobmisc.lisp allegro6/plobff.lisp allegro6/plobsequ.lisp allegro6/plobstruct.lisp allegro6/plobclos.lisp allegro6/plobtype.lisp allegro6/plobnumber.lisp allegro6/ploblock.lisp allegro6/plobheap.lisp allegro6/plobbtree.lisp
ALLEGROFILES=$(ALLEGRO4FILES) $(ALLEGRO5FILES) $(ALLEGRO6FILES)
allegro-code : $(ALLEGROFILES)
lispworks3/plobroot.lisp : plobroot.h     $(plobrootDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobroot.h
lispworks3/plobadmin.lisp : plobadmin.h     $(plobadminDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobadmin.h
lispworks3/plob.lisp : plob.h     $(plobDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plob.h
lispworks3/plobmisc.lisp : plobmisc.h     $(plobmiscDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobmisc.h
lispworks3/plobff.lisp : plobff.h     $(plobffDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobff.h
lispworks3/plobsequ.lisp : plobsequ.h     $(plobsequDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobsequ.h
lispworks3/plobstruct.lisp : plobstruct.h     $(plobstructDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobstruct.h
lispworks3/plobclos.lisp : plobclos.h     $(plobclosDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobclos.h
lispworks3/plobtype.lisp : plobtype.h     $(plobtypeDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobtype.h
lispworks3/plobnumber.lisp : plobnumber.h     $(plobnumberDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobnumber.h
lispworks3/ploblock.lisp : ploblock.h     $(ploblockDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ ploblock.h
lispworks3/plobheap.lisp : plobheap.h     $(plobheapDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobheap.h
lispworks3/plobbtree.lisp : plobbtree.h     $(plobbtreeDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS3=1 -DPACKAGE=:plob   -o $@ plobbtree.h
lispworks4/plobroot.lisp : plobroot.h     $(plobrootDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobroot.h
lispworks4/plobadmin.lisp : plobadmin.h     $(plobadminDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobadmin.h
lispworks4/plob.lisp : plob.h     $(plobDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plob.h
lispworks4/plobmisc.lisp : plobmisc.h     $(plobmiscDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobmisc.h
lispworks4/plobff.lisp : plobff.h     $(plobffDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobff.h
lispworks4/plobsequ.lisp : plobsequ.h     $(plobsequDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobsequ.h
lispworks4/plobstruct.lisp : plobstruct.h     $(plobstructDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobstruct.h
lispworks4/plobclos.lisp : plobclos.h     $(plobclosDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobclos.h
lispworks4/plobtype.lisp : plobtype.h     $(plobtypeDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobtype.h
lispworks4/plobnumber.lisp : plobnumber.h     $(plobnumberDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobnumber.h
lispworks4/ploblock.lisp : ploblock.h     $(ploblockDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ ploblock.h
lispworks4/plobheap.lisp : plobheap.h     $(plobheapDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobheap.h
lispworks4/plobbtree.lisp : plobbtree.h     $(plobbtreeDeps) $(STDINCLUDE)
	$(C2LISP) -DLISPWORKS4=1 -DPACKAGE=:plob   -o $@ plobbtree.h
LISPWORKS3FILES=          lispworks3/plobroot.lisp lispworks3/plobadmin.lisp lispworks3/plob.lisp lispworks3/plobmisc.lisp lispworks3/plobff.lisp lispworks3/plobsequ.lisp lispworks3/plobstruct.lisp lispworks3/plobclos.lisp lispworks3/plobtype.lisp lispworks3/plobnumber.lisp lispworks3/ploblock.lisp lispworks3/plobheap.lisp lispworks3/plobbtree.lisp
LISPWORKS4FILES=          lispworks4/plobroot.lisp lispworks4/plobadmin.lisp lispworks4/plob.lisp lispworks4/plobmisc.lisp lispworks4/plobff.lisp lispworks4/plobsequ.lisp lispworks4/plobstruct.lisp lispworks4/plobclos.lisp lispworks4/plobtype.lisp lispworks4/plobnumber.lisp lispworks4/ploblock.lisp lispworks4/plobheap.lisp lispworks4/plobbtree.lisp
LISPWORKSFILES=$(LISPWORKS3FILES) $(LISPWORKS4FILES)
lispworks-code : $(LISPWORKSFILES)
$(STDTARGETS) :: 
	@$(MAKE) default-$@
