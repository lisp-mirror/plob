
;;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp -*-----------------------------
;;;; NOTE: This Common LISP file was generated by c2lisp
;;;; ===== on "Aug 25 1999" "05:11:54"
;;;; Changes done directly to this file will be lost!
;;;; ------------------------------------------------------------------------


  (in-package  :plob)

;;;; --------------------------------------------------------------------------
;;;; For further comments look into file plob.h
;;;; --------------------------------------------------------------------------


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_psint
           	:int
           	"Constant defined by C macro MapType."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_BOOL
           	:int
           	"Constant defined by C macro MapType."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHORTOBJID
           	:int
           	"Constant defined by C macro DefineType."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_OBJID
           	C2L_psint
           	"Constant defined by C macro DefineType."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+null-objid+")
           	  0
      
		 "NULL (i.e. always invalid) objid."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+null-type-tag+")
           	  -1
      
		 "NULL (i.e. always invalid) type tag."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+bits-per-byte+")
           	  8
      
		 "Number of bits in a byte."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+bits-per-bigit+")
           	  16
      
		 "Number of bits in an Allegro bigit. A bigit is the atom \\allegro\\ bignums are built from."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+sizeof-postore-word+")
           	  4
      
		 "Size of a POSTORE memory word in bytes. Actually,this is sizeof ( psint )."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+p-fixnum-bits+")
      
		 (-   (*   4     8)
			    2)
      
		 "Number of bits in a persistent fixnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHSYMBOLIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHSYMBOLIDX*)
          (let ((last-enum-hash-table   *SHSYMBOLIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob symbol function.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-location-function+")
           	   0
           	   	       "Index of plob symbol function."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of plob symbol package.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-location-package+")
           	   1
           	   	       "Index of plob symbol package."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Index of plob symbol property list.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-location-plist+")
           	   2
           	   	       "Index of plob symbol property list."))

  (setf  (gethash     3     last-enum-hash-table)
	       "Index of plob symbol name field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-location-name+")
           	   3
           	   	       "Index of plob symbol name field."))

  (setf  (gethash     4     last-enum-hash-table)
	       "Index of plob symbol value field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-location-value+")
           	   4
           	   	       "Index of plob symbol value field."))

  (setf  (gethash     5     last-enum-hash-table)
	       "Size of of plob symbol cell in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-size+")
           	   5
           	   	       "Size of of plob symbol cell in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHSYMBOLIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHFUNCTIONIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHFUNCTIONIDX*)
          (let ((last-enum-hash-table   *SHFUNCTIONIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of function name field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+function-location-name+")
           	   0
           	   	       "Index of function name field."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of function language field. :sun-o for .o object-code,:wfasl for LISP .wfasl-code,:c for C source code.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+function-location-language+")
           	   1
           	   	       "Index of function language field. :sun-o for .o object-code,:wfasl for LISP .wfasl-code,:c for C source code."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Index of function code field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+function-location-code+")
           	   2
           	   	       "Index of function code field."))

  (setf  (gethash     3     last-enum-hash-table)
	       "Size of of plob function in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+function-size+")
           	   3
           	   	       "Size of of plob function in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHFUNCTIONIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHTLATTERIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHTLATTERIDX*)
          (let ((last-enum-hash-table   *SHTLATTERIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob TLatter key field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+tlatter-location-key+")
           	   0
           	   	       "Index of plob TLatter key field."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of plob TLatter data field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+tlatter-location-data+")
           	   1
           	   	       "Index of plob TLatter data field."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Index of plob TLatter next field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+tlatter-location-next+")
           	   2
           	   	       "Index of plob TLatter next field."))

  (setf  (gethash     3     last-enum-hash-table)
	       "Size of plob TLatter in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+tlatter-size+")
           	   3
           	   	       "Size of plob TLatter in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHTLATTERIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHTYPETAG*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHTYPETAG*)
          (let ((last-enum-hash-table   *SHTYPETAG*))

  (setf  (gethash    			(parse-integer  "00" :radix    16)         last-enum-hash-table)
	       "Bit 3..31 is a stable heap reference to another object.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+objid-type-tag+")
           	  			(parse-integer  "00" :radix    16)
           	   	       "Bit 3..31 is a stable heap reference to another object."))

  (setf  (gethash    		(parse-integer  "01" :radix    16)         last-enum-hash-table)
	       "Bit 2..31 hold a 30 bit fixnum; also fixnum for tag 5.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+fixnum-type-tag+")
           	  		(parse-integer  "01" :radix    16)
           	   	       "Bit 2..31 hold a 30 bit fixnum; also fixnum for tag 5."))

  (setf  (gethash    	(parse-integer  "02" :radix    16)         last-enum-hash-table)
	       "Bit 3..31 hold a short float.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+short-float-type-tag+")
           	  	(parse-integer  "02" :radix    16)
           	   	       "Bit 3..31 hold a short float."))

  (setf  (gethash    		(parse-integer  "03" :radix    16)         last-enum-hash-table)
	       "Bit 3..11 hold a 8 bit character.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    	"+character-type-tag+")
           	  		(parse-integer  "03" :radix    16)
           	   	       "Bit 3..11 hold a 8 bit character."))

  (setf  (gethash    		(parse-integer  "04" :radix    16)          last-enum-hash-table)
	       "Object is a marker.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+marker-type-tag+")
           	  		(parse-integer  "04" :radix    16)
           	   	       "Object is a marker."))

  (setf  (gethash
	       (logior   (parse-integer  "0100" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Object is a unbound marker.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unbound-type-tag+")
           	   	       (logior   (parse-integer  "0100" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Object is a unbound marker."))

  (setf  (gethash
	       (logior   (parse-integer  "0200" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Object is a slot unbound marker.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+slot-unbound-type-tag+")
           	   	       (logior   (parse-integer  "0200" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Object is a slot unbound marker."))

  (setf  (gethash
	       (logior   (parse-integer  "0300" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "A marker which represents unstorable objects.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unstorable-object-marker+")
           	   	       (logior   (parse-integer  "0300" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "A marker which represents unstorable objects."))

  (setf  (gethash
	       (logior   (parse-integer  "0400" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "End-marker.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+end-tag+")
           	   	       (logior   (parse-integer  "0400" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "End-marker."))

  (setf  (gethash
	       (logior   (parse-integer  "0500" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning minimum possible value.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+min-tag+")
           	   	       (logior   (parse-integer  "0500" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning minimum possible value."))

  (setf  (gethash
	       (logior   (parse-integer  "0600" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning maximum possible value.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+max-tag+")
           	   	       (logior   (parse-integer  "0600" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning maximum possible value."))

  (setf  (gethash
	       (logior   (parse-integer  "0700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning TRUE.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+true-tag+")
           	   	       (logior   (parse-integer  "0700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning TRUE."))

  (setf  (gethash
	       (logior   (parse-integer  "0800" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning to ignore a slot.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+ignore-slot-tag+")
           	   	       (logior   (parse-integer  "0800" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning to ignore a slot."))

  (setf  (gethash
	       (logior   (parse-integer  "0900" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning NIL.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+nil-tag+")
           	   	       (logior   (parse-integer  "0900" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning NIL."))

  (setf  (gethash
	       (logior   (parse-integer  "0A00" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning :ALLOW.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+allow-tag+")
           	   	       (logior   (parse-integer  "0A00" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning :ALLOW."))

  (setf  (gethash
	       (logior   (parse-integer  "0B00" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning :DENY.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+deny-tag+")
           	   	       (logior   (parse-integer  "0B00" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning :DENY."))

  (setf  (gethash
	       (logior   (parse-integer  "0C00" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning EQ.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+eq-tag+")
           	   	       (logior   (parse-integer  "0C00" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning EQ."))

  (setf  (gethash
	       (logior   (parse-integer  "0D00" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning EQL.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+eql-tag+")
           	   	       (logior   (parse-integer  "0D00" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning EQL."))

  (setf  (gethash
	       (logior   (parse-integer  "0E00" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Marker meaning EQUAL.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+equal-tag+")
           	   	       (logior   (parse-integer  "0E00" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Marker meaning EQUAL."))

  (setf  (gethash    				(parse-integer  "06" :radix    16)         last-enum-hash-table)
	       "Object is a 24 bit immediate bitmask.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+bitmask-type-tag+")
           	  				(parse-integer  "06" :radix    16)
           	   	       "Object is a 24 bit immediate bitmask."))

  (setf  (gethash    				(parse-integer  "07" :radix    16)         last-enum-hash-table)
	       "Object is a built in class.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+built-in-type-tag+")
           	  				(parse-integer  "07" :radix    16)
           	   	       "Object is a built in class."))

  (setf  (gethash     		(parse-integer  "10" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type SYMBOL.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+symbol-type-tag+")
           	   		(parse-integer  "10" :radix    16)
           	   	       "Type tag for plob objects of type SYMBOL."))

  (setf  (gethash     		(parse-integer  "18" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type ARRAY.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+function-type-tag+")
           	   		(parse-integer  "18" :radix    16)
           	   	       "Type tag for plob objects of type ARRAY."))

  (setf  (gethash     	(parse-integer  "50" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type SINGLE-FLOAT.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+single-float-type-tag+")
           	   	(parse-integer  "50" :radix    16)
           	   	       "Type tag for plob objects of type SINGLE-FLOAT."))

  (setf  (gethash     	(parse-integer  "58" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type LONG-FLOAT.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+double-float-type-tag+")
           	   	(parse-integer  "58" :radix    16)
           	   	       "Type tag for plob objects of type LONG-FLOAT."))

  (setf  (gethash     		(parse-integer  "60" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type BIGNUM (integers bigger than fixnums).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+bignum-type-tag+")
           	   		(parse-integer  "60" :radix    16)
           	   	       "Type tag for plob objects of type BIGNUM (integers bigger than fixnums)."))

  (setf  (gethash     		(parse-integer  "68" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type RATIO.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+ratio-type-tag+")
           	   		(parse-integer  "68" :radix    16)
           	   	       "Type tag for plob objects of type RATIO."))

  (setf  (gethash     		(parse-integer  "70" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type COMPLEX.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+complex-type-tag+")
           	   		(parse-integer  "70" :radix    16)
           	   	       "Type tag for plob objects of type COMPLEX."))

  (setf  (gethash     		(parse-integer  "B8" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects of type TLATTER.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+tlatter-type-tag+")
           	   		(parse-integer  "B8" :radix    16)
           	   	       "Type tag for plob objects of type TLATTER."))

  (setf  (gethash    		(parse-integer  "78" :radix    16)         last-enum-hash-table)
	       "Type tag for plob objects referenced by a short objid.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+short-objid-tag+")
           	  		(parse-integer  "78" :radix    16)
           	   	       "Type tag for plob objects referenced by a short objid."))

  (setf  (gethash     (parse-integer  "80" :radix    16)         last-enum-hash-table)
	       "Type tag for pointers to transient 0-terminated C strings with dynamic and transient extent.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+dynamic-cstring-ptr-tag+")
           	   (parse-integer  "80" :radix    16)
           	   	       "Type tag for pointers to transient 0-terminated C strings with dynamic and transient extent."))

  (setf  (gethash     (parse-integer  "C8" :radix    16)         last-enum-hash-table)
	       "Type tag for pointers to transient C floats with dynamic and transient extent.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+dynamic-cfloat-ptr-tag+")
           	   (parse-integer  "C8" :radix    16)
           	   	       "Type tag for pointers to transient C floats with dynamic and transient extent."))

  (setf  (gethash     (parse-integer  "E0" :radix    16)         last-enum-hash-table)
	       "Type tag for pointers to transient C double floats with dynamic and transient extent.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+dynamic-cdouble-ptr-tag+")
           	   (parse-integer  "E0" :radix    16)
           	   	       "Type tag for pointers to transient C double floats with dynamic and transient extent."))

  (setf  (gethash
	       (parse-integer  "E8" :radix    16)         last-enum-hash-table)         "Type tag for pointers to transient C long double floats with dynamic and transient extent.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+dynamic-cquadruple-ptr-tag+")
           	   	       (parse-integer  "E8" :radix    16)
           	   "Type tag for pointers to transient C long double floats with dynamic and transient extent."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHTYPETAG
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *ERRLVL*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *ERRLVL*)
          (let ((last-enum-hash-table   *ERRLVL*))
  (setf  (gethash    		0     last-enum-hash-table)
	       "No error was encountered.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-0+")
           	  		0
           	   	       "No error was encountered."))

  (setf  (gethash    	1     last-enum-hash-table)
	       "An information message was returned from the server.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-info+")
           	  	1
           	   	       "An information message was returned from the server."))

  (setf  (gethash    	2     last-enum-hash-table)
	       "A warning message was returned from the server.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-warn+")
           	  	2
           	   	       "A warning message was returned from the server."))

  (setf  (gethash    	3     last-enum-hash-table)
	       "A continuable error occurred on the server (the server continued its operation).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-cerror+")
           	  	3
           	   	       "A continuable error occurred on the server (the server continued its operation)."))

  (setf  (gethash    	4     last-enum-hash-table)
	       "An error occurred on the server (the offending remote procedure called abended its operation).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-error+")
           	  	4
           	   	       "An error occurred on the server (the offending remote procedure called abended its operation)."))

  (setf  (gethash    	5     last-enum-hash-table)
	       "A fatal error was encountered on the server. The client should send a request to restart the server.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-level-fatal+")
           	  	5
           	   	       "A fatal error was encountered on the server. The client should send a request to restart the server."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_ERRLVL
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+tag-bits+")
           	  3
      
		 "Number of tag bits in a long (i.e. 32 bit) OBJID."))     ;

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+tag-mask+")
      
		 (-   (ash   1    3)       1)
      

		 "And-mask for type tag bits of a long (i.e. 32 bit) OBJID."))     ;


  (define-foreign-function
            #.C2L_BOOL
           	"fnClientObjectCanModify"
           	 #.(read-from-string    "c-sh-can-modify")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.:void
           	"fnClientDbClose"
           	 #.(read-from-string    "c-sh-close")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (bWithGarbageCollection    #.C2L_BOOL      :value-in)
                   ))    ;


  (define-foreign-function
            #.C2L_BOOL
           	"fnClientDbConfiguration"
           	 #.(read-from-string    "c-sh-configuration")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (pnFlags    #.:int           :value-out)
             

		   (pnMinimumKey    #.:int           :value-out)
             

		   (pnMaximumKey    #.:int           :value-out)
             

		   (
			      pnKeyAlignment    #.:int           :value-out)
                   ))    ;


  (define-foreign-function
            #.C2L_SHORTOBJID
           	"fnClientDbCreateObject"
           	 #.(read-from-string    "c-sh-create-object")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (nTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nExtraReferences    #.:int           :value-in)
             

		   (eTypeTagValues    #.C2L_SHTYPETAG      :value-in)
             

		   (nExtraValues    #.:int           :value-in)
                   ))    ;


  (define-foreign-function
            #.:void
           	"fnClientObjectDestroy"
           	 #.(read-from-string    "c-sh-destroy-object")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectObjIdSize"
           	 #.(read-from-string    "c-sh-objid-size")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.C2L_SHORTOBJID
           	"fnClientDbOpen"
           	 #.(read-from-string    "c-sh-short-open")
      
		 ( (szURL    #.:string           :vector-in)
             

		   (szDescription    #.:string           :vector-in)
             

		   (nMinAddrInK    #.:int           :value-in)
                   ))    ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHLOCK*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHLOCK*)
          (let ((last-enum-hash-table   *SHLOCK*))

  (setf  (gethash     -10     last-enum-hash-table)
	       "The key was not found.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+error-key-not-found+")
           	   -10
           	   	       "The key was not found."))

  (setf  (gethash
	       -9      last-enum-hash-table)
	       "The first error value indicating a lock error.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-error-first+")
           	   	       -9
           	   	       "The first error value indicating a lock error."))

  (setf  (gethash
	       -1      last-enum-hash-table)
	       "The last error value indicating a lock error.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-error-last+")
           	   	       -1
           	   	       "The last error value indicating a lock error."))

  (setf  (gethash     -9     last-enum-hash-table)
	       "The locking-object denied to lock an object-to-lock. This error arises e.g. when a (locking) heap without an active transaction is asked to lock an object (to lock).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-denied+")
           	   -9
           	   	       "The locking-object denied to lock an object-to-lock. This error arises e.g. when a (locking) heap without an active transaction is asked to lock an object (to lock)."))

  (setf  (gethash     -8     last-enum-hash-table)
	       "The current lock mode could not be determined.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unknown-lock-mode+")
           	   -8
           	   	       "The current lock mode could not be determined."))

  (setf  (gethash     -7     last-enum-hash-table)
	       "An error occurred.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+general-error+")
           	   -7
           	   	       "An error occurred."))

  (setf  (gethash     -6     last-enum-hash-table)
	       "The unlock could not be performed.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unlock-failed+")
           	   -6
           	   	       "The unlock could not be performed."))

  (setf  (gethash     -5     last-enum-hash-table)
	       "Writing to an object failed.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+write-failed+")
           	   -5
           	   	       "Writing to an object failed."))

  (setf  (gethash     -4     last-enum-hash-table)
	       "The requested lock level and mode could not be established. This is signalled when a general lock error arises.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-failed+")
           	   -4
           	   	       "The requested lock level and mode could not be established. This is signalled when a general lock error arises."))

  (setf  (gethash
	       -3       last-enum-hash-table)
	       "The first error value indicating a lock conflict.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-conflict-first+")
           	   	       -3
           	   	       "The first error value indicating a lock conflict."))

  (setf  (gethash
	       -1       last-enum-hash-table)
	       "The last error value indicating a lock conflict.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-conflict-last+")
           	   	       -1
           	   	       "The last error value indicating a lock conflict."))

  (setf  (gethash
	       -3      last-enum-hash-table)
	       "A non-solvable conflict occurred at element (i.e. object slot) locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-conflict-element+")
           	   	       -3
           	   	       "A non-solvable conflict occurred at element (i.e. object slot) locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime."))

  (setf  (gethash
	       -2      last-enum-hash-table)
	       "A non-solvable conflict occurred at vector (i.e. object) locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-conflict-vector+")
           	   	       -2
           	   	       "A non-solvable conflict occurred at vector (i.e. object) locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime."))

  (setf  (gethash
	       -1      last-enum-hash-table)
	       "A non-solvable conflict occurred at store locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-conflict-store+")
           	   	       -1
           	   	       "A non-solvable conflict occurred at store locking. Repeating the offending locking at some time later might be successful if the conflict was resolved in the meantime."))

  (setf  (gethash
	       (parse-integer  "20" :radix    16)          last-enum-hash-table)
	       "Indicates that a sub-object has a read-only lock set.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-read-only-intent+")
           	   	       (parse-integer  "20" :radix    16)
           	   	       "Indicates that a sub-object has a read-only lock set."))

  (setf  (gethash
	       (parse-integer  "40" :radix    16)          last-enum-hash-table)
	       "Indicates that a sub-object has a read lock set.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-read-intent+")
           	   	       (parse-integer  "40" :radix    16)
           	   	       "Indicates that a sub-object has a read lock set."))

  (setf  (gethash
	       (parse-integer  "80" :radix    16)          last-enum-hash-table)
	       "Indicates that a sub-object has a write lock set.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-write-intent+")
           	   	       (parse-integer  "80" :radix    16)
           	   	       "Indicates that a sub-object has a write lock set."))

  (setf  (gethash
	       (parse-integer  "00" :radix    16)          last-enum-hash-table)
	       "Request no lock at all.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-nothing+")
           	   	       (parse-integer  "00" :radix    16)
           	   	       "Request no lock at all."))

  (setf  (gethash
	       (parse-integer  "01" :radix    16)          last-enum-hash-table)
	       "Minimal possible lock level.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-min+")
           	   	       (parse-integer  "01" :radix    16)
           	   	       "Minimal possible lock level."))

  (setf  (gethash
	       (parse-integer  "03" :radix    16)          last-enum-hash-table)
	       "Maximal possible lock level.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-max+")
           	   	       (parse-integer  "03" :radix    16)
           	   	       "Maximal possible lock level."))

  (setf  (gethash
	       (parse-integer  "01" :radix    16)          last-enum-hash-table)
	       "Request lock for a single element of a sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-element+")
           	   	       (parse-integer  "01" :radix    16)
           	   	       "Request lock for a single element of a sh-vector."))

  (setf  (gethash
	       (parse-integer  "02" :radix    16)          last-enum-hash-table)
	       "Request lock for a single sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-vector+")
           	   	       (parse-integer  "02" :radix    16)
           	   	       "Request lock for a single sh-vector."))

  (setf  (gethash
	       (parse-integer  "03" :radix    16)          last-enum-hash-table)
	       "Request lock for whole persistent storage.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-store+")
           	   	       (parse-integer  "03" :radix    16)
           	   	       "Request lock for whole persistent storage."))

  (setf  (gethash
	       (parse-integer  "00" :radix    16)          last-enum-hash-table)
	       "[Un]set no lock; just read old lock.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-nothing+")
           	   	       (parse-integer  "00" :radix    16)
           	   	       "[Un]set no lock; just read old lock."))

  (setf  (gethash
	       (parse-integer  "04" :radix    16)          last-enum-hash-table)
	       "[Un]set a read-only lock.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-read-only+")
           	   	       (parse-integer  "04" :radix    16)
           	   	       "[Un]set a read-only lock."))

  (setf  (gethash
	       (parse-integer  "08" :radix    16)          last-enum-hash-table)
	       "[Un]set a read lock.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-read+")
           	   	       (parse-integer  "08" :radix    16)
           	   	       "[Un]set a read lock."))

  (setf  (gethash
	       (parse-integer  "10" :radix    16)          last-enum-hash-table)
	       "[Un]set a write lock.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-write+")
           	   	       (parse-integer  "10" :radix    16)
           	   	       "[Un]set a write lock."))

  (setf  (gethash     (parse-integer  "100" :radix    16)         last-enum-hash-table)
	       "Unlock the object.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-unlock+")
           	   (parse-integer  "100" :radix    16)
           	   	       "Unlock the object."))

  (setf  (gethash     (parse-integer  "200" :radix    16)         last-enum-hash-table)
	       "Force the [un]lock. This is a kind of 'emergency [un]lock'; the [un]lock is always performed to the level specified regardless to its previous lock state. May release locks held by other objects too.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-force+")
           	   (parse-integer  "200" :radix    16)
           	   	       "Force the [un]lock. This is a kind of 'emergency [un]lock'; the [un]lock is always performed to the level specified regardless to its previous lock state. May release locks held by other objects too."))

  (setf  (gethash     (parse-integer  "400" :radix    16)         last-enum-hash-table)
	       "Do prepare object peeking at locking.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-and-peek+")
           	   (parse-integer  "400" :radix    16)
           	   	       "Do prepare object peeking at locking."))

  (setf  (gethash
	       (logior   (parse-integer  "01" :radix    16)         (parse-integer  "08" :radix    16))        last-enum-hash-table)
	       "Request a read lock for a single element of a sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-element-read+")
           	   	       (logior   (parse-integer  "01" :radix    16)         (parse-integer  "08" :radix    16))
           	   	       "Request a read lock for a single element of a sh-vector."))

  (setf  (gethash
	       (logior   (parse-integer  "02" :radix    16)         (parse-integer  "08" :radix    16))        last-enum-hash-table)
	       "Request a read lock for a single sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-vector-read+")
           	   	       (logior   (parse-integer  "02" :radix    16)         (parse-integer  "08" :radix    16))
           	   	       "Request a read lock for a single sh-vector."))

  (setf  (gethash
	       (logior   (parse-integer  "03" :radix    16)         (parse-integer  "08" :radix    16))        last-enum-hash-table)
	       "Request a read lock for the whole stable heap.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-store-read+")
           	   	       (logior   (parse-integer  "03" :radix    16)         (parse-integer  "08" :radix    16))
           	   	       "Request a read lock for the whole stable heap."))

  (setf  (gethash
	       (logior   (parse-integer  "01" :radix    16)         (parse-integer  "10" :radix    16))        last-enum-hash-table)
	       "Request a write lock for a single element of a sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-element-write+")
           	   	       (logior   (parse-integer  "01" :radix    16)         (parse-integer  "10" :radix    16))
           	   	       "Request a write lock for a single element of a sh-vector."))

  (setf  (gethash
	       (logior   (parse-integer  "02" :radix    16)         (parse-integer  "10" :radix    16))        last-enum-hash-table)
	       "Request a write lock for a single sh-vector.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-vector-write+")
           	   	       (logior   (parse-integer  "02" :radix    16)         (parse-integer  "10" :radix    16))
           	   	       "Request a write lock for a single sh-vector."))

  (setf  (gethash
	       (logior   (parse-integer  "03" :radix    16)         (parse-integer  "10" :radix    16))        last-enum-hash-table)
	       "Request a write lock for the whole stable heap.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-store-write+")
           	   	       (logior   (parse-integer  "03" :radix    16)         (parse-integer  "10" :radix    16))
           	   	       "Request a write lock for the whole stable heap."))

  (setf  (gethash
	       (logior   (parse-integer  "00" :radix    16)
		 (logior   (parse-integer  "01" :radix    16)
		   (logior   (parse-integer  "02" :radix    16)
			        (parse-integer  "03" :radix    16))))        last-enum-hash-table)
	       "Bitmask over all lock levels.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-level-mask+")
           	   	       (logior   (parse-integer  "00" :radix    16)         		 (logior   (parse-integer  "01" :radix    16)         		   (logior   (parse-integer  "02" :radix    16)         			        (parse-integer  "03" :radix    16))))
           	   	       "Bitmask over all lock levels."))

  (setf  (gethash
	       (logior   (parse-integer  "00" :radix    16)
		 (logior   (parse-integer  "04" :radix    16)
		   (logior   (parse-integer  "08" :radix    16)
		     (parse-integer  "10" :radix    16))))        last-enum-hash-table)
	       "Bitmask over all lock modes.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-mask+")
           	   	       (logior   (parse-integer  "00" :radix    16)         		 (logior   (parse-integer  "04" :radix    16)         		   (logior   (parse-integer  "08" :radix    16)         		     (parse-integer  "10" :radix    16))))
           	   	       "Bitmask over all lock modes."))

  (setf  (gethash
	       (parse-integer  "10" :radix    16)          last-enum-hash-table)
	       "Bitmask over all exclusive lock modes.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+lock-mode-exclusive-mask+")
           	   	       (parse-integer  "10" :radix    16)
           	   	       "Bitmask over all exclusive lock modes."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHLOCK
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (define-foreign-function
            #.C2L_BOOL
           	"fnClientObjectFlush"
           	 #.(read-from-string    "c-sh-flush-object")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (bRemoveFromCache    #.C2L_BOOL      :value-in)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectReadChars"
           	 #.(read-from-string    "c-sh-read-chars")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nSizeInCharacters    #.:int           :value-in)
             

		   (pszBuffer    #.:string
			      :vector-out)
                   ))    ;


  (define-foreign-function
            #.C2L_SHLOCK
           	"fnClientObjectReadAtIndex"
           	 #.(read-from-string    "c-sh-read-index")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (pnValue    #.:int           :value-out)
             

		   (pnTypeTag    #.C2L_SHTYPETAG      :value-out)
                   ))    ;

  (define-foreign-function
            #.:int
           	"fnClientObjectReadAtIndices"
           	 #.(read-from-string    "c-sh-read-indices")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (nObjIds    #.:int           :value-in)
             

		   (pObjIds    #.:int
			      :vector-out)
             

		   (pnTypeTags    #.:int
			      :vector-out)
                   ))    ;


  (define-foreign-function
            #.C2L_SHLOCK
           	"fnClientObjectReadObjId"
           	 #.(read-from-string    "c-sh-read-objid")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (pnObjId    #.:int           :value-out)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectReadValues"
           	 #.(read-from-string    "c-sh-read-values")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (nElementTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nSizeInElements    #.:int           :value-in)
             

		   (pBuffer    #.:array
			      :vector-out)
                   ))    ;


  (define-foreign-function
            #.C2L_BOOL
           	"fnClientDbStatistics"
           	 #.(read-from-string    "c-sh-statistics")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (pnMaximumSpace    #.:int           :value-out)
             

		   (pnAllocatedSpace    #.:int           :value-out)
             

		   (
			      pnUnallocatedSpace    #.:int           :value-out)
             

		   (
			      pnUnusedAllocatedSpace    #.:int           :value-out)
             

		   (
			      pnAllocatedManagementSpace    #.:int           :value-out)
             

		   (
			      pnNumberOfObjects    #.:int           :value-out)
                   ))    ;


  (define-foreign-function
            #.:void
           	"fnClientDbStabilise"
           	 #.(read-from-string    "c-sh-stabilise")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.C2L_SHTYPETAG
           	"fnClientObjectTypeTag"
           	 #.(read-from-string    "c-sh-type-tag")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectValueSize"
           	 #.(read-from-string    "c-sh-value-size")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectWriteChars"
           	 #.(read-from-string    "c-sh-write-chars")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nSizeInCharacters    #.:int           :value-in)
             

		   (pszBuffer    #.:string           :vector-in)
                   ))    ;


  (define-foreign-function
            #.C2L_SHLOCK
           	"fnClientObjectWriteAtIndex"
           	 #.(read-from-string    "c-sh-write-index")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (nValue    #.:int           :value-in)
             

		   (nTypeTagValue    #.C2L_SHTYPETAG      :value-in)
                   ))    ;

  (define-foreign-function
            #.:int
           	"fnClientObjectWriteAtIndices"
           	 #.(read-from-string    "c-sh-write-indices")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (nObjIds    #.:int           :value-in)
             

		   (pObjIds    #.:int
			      :vector-in)
             

		   (pnTypeTags    #.:int
			      :vector-in)
                   ))    ;


  (define-foreign-function
            #.C2L_SHLOCK
           	"fnClientObjectWriteObjId"
           	 #.(read-from-string    "c-sh-write-objid")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (oShortObjIdWrite    #.C2L_SHORTOBJID      :value-in)
                   ))    ;


  (define-foreign-function
            #.:int
           	"fnClientObjectWriteValues"
           	 #.(read-from-string    "c-sh-write-values")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (oShortObjId    #.C2L_SHORTOBJID      :value-in)
             

		   (oExpectingClass    #.C2L_SHORTOBJID      :value-in)
             

		   (nExpectingTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nIndex    #.:int           :value-in)
             

		   (nElementTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nSizeInElements    #.:int           :value-in)
             

		   (pBuffer    #.:array
			      :vector-in)
                   ))    ;

