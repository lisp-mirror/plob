
;;;; -*- Mode: LISP; Syntax: ANSI-Common-Lisp -*-----------------------------
;;;; NOTE: This Common LISP file was generated by c2lisp
;;;; ===== on "Feb 14 2001" "11:52:05"
;;;; Changes done directly to this file will be lost!
;;;; ------------------------------------------------------------------------


(in-package  :plob)

;;;; --------------------------------------------------------------------------
;;;; For further comments look into file plobsequ.h
;;;; --------------------------------------------------------------------------


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+cons-type-tag+")
           	  (parse-integer  "08" :radix    16)
      
		 "Type tag for objects of type CONS."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHCONSIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHCONSIDX*)
          (let ((last-enum-hash-table   *SHCONSIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob cons car.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+cons-location-car+")
           	   0
           	   	       "Index of plob cons car."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of plob cons cdr.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+cons-location-cdr+")
           	   1
           	   	       "Index of plob cons cdr."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Size of plob cons cell in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+cons-size+")
           	   2
           	   	       "Size of plob cons cell in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHCONSIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+vector-type-tag+")
           	  (parse-integer  "40" :radix    16)
      
		 "Type tag for plob objects of type VECTOR."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHVECTORIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHVECTORIDX*)
          (let ((last-enum-hash-table   *SHVECTORIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Fix size of plob vector in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+vector-size+")
           	   0
           	   	       "Fix size of plob vector in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHVECTORIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+ivector-type-tag+")
           	  (parse-integer  "C0" :radix    16)
      
		 "Type tag for plob objects of type IVECTOR. The 'I' means 'immediate',i.e. ivectors hold immediate values of a single type."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *IVECTORTAG*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *IVECTORTAG*)
          (let ((last-enum-hash-table   *IVECTORTAG*))
  (setf  (gethash
	       (logior   (parse-integer  "1700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (signed-byte 2).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+signed-byte-2-tag+")
           	   	       (logior   (parse-integer  "1700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (signed-byte 2)."))

  (setf  (gethash
	       (logior   (parse-integer  "2700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (signed-byte 4).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+signed-byte-4-tag+")
           	   	       (logior   (parse-integer  "2700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (signed-byte 4)."))

  (setf  (gethash
	       (logior   (parse-integer  "3700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (signed-byte 8).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+signed-byte-8-tag+")
           	   	       (logior   (parse-integer  "3700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (signed-byte 8)."))

  (setf  (gethash
	       (logior   (parse-integer  "4700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (signed-byte 16).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+signed-byte-16-tag+")
           	   	       (logior   (parse-integer  "4700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (signed-byte 16)."))

  (setf  (gethash
	       (logior   (parse-integer  "5700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (signed-byte 32).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+signed-byte-32-tag+")
           	   	       (logior   (parse-integer  "5700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (signed-byte 32)."))

  (setf  (gethash
	       (logior   (parse-integer  "B700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 1).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-1-tag+")
           	   	       (logior   (parse-integer  "B700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 1)."))

  (setf  (gethash
	       (logior   (parse-integer  "6700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 2).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-2-tag+")
           	   	       (logior   (parse-integer  "6700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 2)."))

  (setf  (gethash
	       (logior   (parse-integer  "7700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 4).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-4-tag+")
           	   	       (logior   (parse-integer  "7700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 4)."))

  (setf  (gethash
	       (logior   (parse-integer  "8700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 8).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-8-tag+")
           	   	       (logior   (parse-integer  "8700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 8)."))

  (setf  (gethash
	       (logior   (parse-integer  "9700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 16).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-16-tag+")
           	   	       (logior   (parse-integer  "9700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 16)."))

  (setf  (gethash
	       (logior   (parse-integer  "A700" :radix    16)        (parse-integer  "04" :radix    16))        last-enum-hash-table)
	       "Type tag for IVector with element type (unsigned-byte 32).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+unsigned-byte-32-tag+")
           	   	       (logior   (parse-integer  "A700" :radix    16)        (parse-integer  "04" :radix    16))
           	   	       "Type tag for IVector with element type (unsigned-byte 32)."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_IVECTORTAG
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *IVECTORIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *IVECTORIDX*)
          (let ((last-enum-hash-table   *IVECTORIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of PLOB ivector type field. It contains a fixnum type tag to which the IVector elements are specialized.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+ivector-location-type+")
           	   0
           	   	       "Index of PLOB ivector type field. It contains a fixnum type tag to which the IVector elements are specialized."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of PLOB ivector length field. It contains the number of elements the ivector contains.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+ivector-location-length+")
           	   1
           	   	       "Index of PLOB ivector length field. It contains the number of elements the ivector contains."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Fix size of plob vector in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+ivector-size+")
           	   2
           	   	       "Fix size of plob vector in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_IVECTORIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (define-foreign-function
            #.C2L_SHORTOBJID
           	"fnShortMakeIVector"
           	 #.(read-from-string    "c-sh-make-ivector")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (nTypeTag    #.C2L_SHTYPETAG      :value-in)
             

		   (nElements    #.:int           :value-in)
                   ))    ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+array-type-tag+")
           	  (parse-integer  "20" :radix    16)
      
		 "Type tag for plob objects of type ARRAY."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHARRAYIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHARRAYIDX*)
          (let ((last-enum-hash-table   *SHARRAYIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob array table field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-location-data-vector+")
           	   0
           	   	       "Index of plob array table field."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Index of plob array fill pointer field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-location-fill-pointer+")
           	   1
           	   	       "Index of plob array fill pointer field."))

  (setf  (gethash     2     last-enum-hash-table)
	       "Index of plob array displaced to field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string
	       "+array-location-displaced-offset+")
           	   2
           	   	       "Index of plob array displaced to field."))

  (setf  (gethash     3     last-enum-hash-table)
	       "Index of plob array adjustable field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-location-adjustable+")
           	   3
           	   	       "Index of plob array adjustable field."))

  (setf  (gethash     4     last-enum-hash-table)
	       "Index of plob array dimensions field                 (contains the rank of the array).")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-location-rank+")
           	   4
           	   	       "Index of plob array dimensions field                 (contains the rank of the array)."))

  (setf  (gethash     5     last-enum-hash-table)
	       "Index of first element of the plob array dimension-table.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-location-first-dimension+")
           	   5
           	   	       "Index of first element of the plob array dimension-table."))

  (setf  (gethash     5     last-enum-hash-table)
	       "Fix size of plob array in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+array-size+")
           	   5
           	   	       "Fix size of plob array in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHARRAYIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+string-type-tag+")
           	  (parse-integer  "28" :radix    16)
      
		 "Type tag for plob objects of type STRING."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHSTRINGIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHSTRINGIDX*)
          (let ((last-enum-hash-table   *SHSTRINGIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob string length field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+string-location-length+")
           	   0
           	   	       "Index of plob string length field."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Fix size of plob string in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+string-size+")
           	   1
           	   	       "Fix size of plob string in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHSTRINGIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;


  (define-foreign-function
            #.C2L_SHORTOBJID
           	"fnShortMakeString"
           	 #.(read-from-string    "c-sh-make-string")
      
		 ( (oShortObjIdHeap    #.C2L_SHORTOBJID      :value-in)
             

		   (lpszFrom    #.:string           :vector-in)
                   ))    ;


  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string    "+bit-vector-type-tag+")
           	  (parse-integer  "30" :radix    16)
      
		 "Type tag for plob objects of type BIT-VECTOR."))     ;


  (eval-when (:compile-toplevel    :load-toplevel    :execute)
          (progn
          (defvar
            *SHBITVECTORIDX*
            (make-hash-table  :test    (quote  equal))
           	"Variable defined by C macro BeginEnum.")
          (clrhash   *SHBITVECTORIDX*)
          (let ((last-enum-hash-table   *SHBITVECTORIDX*))
  (setf  (gethash     0     last-enum-hash-table)
	       "Index of plob bit-vector length field.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+bit-vector-location-length+")
           	   0
           	   	       "Index of plob bit-vector length field."))

  (setf  (gethash     1     last-enum-hash-table)
	       "Fix size of plob bit-vector in words.")

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
            #.(read-from-string     "+bit-vector-size+")
           	   1
           	   	       "Fix size of plob bit-vector in words."))
)))

  (eval-when
          (:compile-toplevel    :load-toplevel    :execute)
           	 (defconstant
           C2L_SHBITVECTORIDX
           	:int
           	"Constant defined by C macro EndEnum."))     ;

