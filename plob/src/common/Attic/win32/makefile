# --------------------------------------------------------------------------
# NOTE: This makefile was generated by plobimake;
# ===== changes done directly to this file will be lost!
# --------------------------------------------------------------------------
SHELL=/bin/sh
PLOBDIR=/home/hkirschk/plob-2.09
FRANZCL=/opt/acl60
OPSYS=WIN32
opsys=win32
CC=cl
COPTPIC=
COPTDEB=-Zi
COPTOPT=-Ox
CPP=gcc -E -P
LDLIBS=
RELPLOBDIR=../..
BINDIR=$(RELPLOBDIR)/bin
CONFDIR=$(RELPLOBDIR)/conf
RULES=$(CONFDIR)/make.rules.in
LIBDIR=$(RELPLOBDIR)/lib/$(opsys)
PSDIR=$(RELPLOBDIR)/ps
SRCDIR=$(RELPLOBDIR)/src
SRCIDIR=$(SRCDIR)/include
LISPDOCDIR=$(SRCDIR)/lisp-doc
TEXDIR=$(RELPLOBDIR)/tex
TEXIDIR=$(TEXDIR)/inputs
RPC_PROGRAM=0x20506E62
RPC_VERSION=1
HASAUTH=AUTH_NON
AR=lib
ARFLAGS=
LINK=link
LINKc=$(LINK) $(LDFLAGS)
MAKE_EXE=make
MAKE_F= -f
MAKE_FILE=win32/makefile
MAKE=$(MAKE_EXE) $(MAKE_F) $(MAKE_FILE)
RANLIB=: ranlib
LDSHAREDOPT=-dll
STDTARGETS=all clean dist-clean initial makefiles
SHELL=/bin/sh
C2RPC=$(BINDIR)/c2rpc -CPP   '$(CPP)' -I$(BINDIR)   -P   $(RPC_PROGRAM) -V   $(RPC_VERSION) $(C2RPCFLAGS)
C2LISP=$(BINDIR)/c2lisp -CPP   '$(CPP)' -I$(BINDIR)   $(C2LISPFLAGS)
SUFFIXES=.exe .dll .lib .obj  \
	 .x .lisp .c .h \
	 .bbl .aux \
	 .ps .eps .dvi .dgr .tex
DEFAULTHOST=localhost
DEFAULTTRANS=tcp
DEFAULTROOT=/opt/data/plob
DEFAULTBASE=database
COMPILEc=$(CC) $(CFLAGS) $(CPPFLAGS)
OUTPUT_OPTION_OBJ= -c    -Fo$@
OUTPUT_OPTION_LIB=  -out:$@
OUTPUT_OPTION_DLL= $(LDSHAREDOPT)  -out:$@
OUTPUT_OPTION_EXE=  -out:$@
CPPFLAGS=  -I$(opsys)    -I$(SRCIDIR)    -I$(FRANZCL)/home/misc -DDATABASE='"$(DEFAULTBASE)"' -D$(OPSYS)=1 -DOPSYS='"$(OPSYS)"' -DHASAUTH=$(HASAUTH)  -nologo -D_DLL   -D_NTSDK -D_WIN32_WINNT=0x0400 -Fd$(LIBDIR)/ -I$(MSVCPATH)/include -I$(RELPLOBDIR)/oncrpc-1.12     -DBUILDDLL=1
RPCGEN=rpcgen
RPCGENFLAGS=
all :: 
MAKECMD=fnCallMake() { \
set +e; \
status="0"; \
dirs="$$1"; \
if [ -n   "$$2" ]; then \
shift; \
args="$$*"; \
fi; \
if [ -d   "$(BINDIR)" ]; then \
PATH="$(BINDIR):$${PATH}"; export PATH; \
elif [ -d   "bin" ]; then \
PATH="`pwd`/bin:$${PATH}"; export PATH; \
fi; \
case "$(MAKEFLAGS)" in \
''|'-'*)	szMakeflags="$(MAKEFLAGS)";; \
*)		szMakeflags="-$(MAKEFLAGS)";; \
esac; \
if [ "$${szMakeflags}" = "-w" ]; then \
szMakeflags="--no-print-directory"; \
else \
szMakeflags=""; \
fi; \
if [ ! -r   "$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$(opsys)/makefile"   "makefile.in"; \
fi; \
for dir in $${dirs} ; do \
if [ ! -r   "$${dir}/$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile in $${dir}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$${dir}/$(opsys)/makefile"   "$${dir}/makefile.in"; \
fi; \
( \
echo "cd `pwd`/$${dir}"; \
cd "$${dir}"; \
$(MAKE_EXE) $${szMakeflags}  $(MAKE_F) "$(opsys)/makefile" $${args} ; \
); \
s="$$?"; \
if [ "$${s}" -ne   0 ]; then \
status="$$s"; \
fi; \
done; \
return $${status} ; \
}; fnCallMake
DGRTODVI=dgrtodvi
LATEXCMD=fnCallLaTeX() { \
set +e; \
trap "rm -f /tmp/*.$$$$" 1 2 15; \
TEXINPUTS="$(TEXIDIR):$(LISPDOCDIR):$${TEXINPUTS}"; \
export TEXINPUTS; \
srcfile="$$1"; \
texfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${texfile}`"; \
touch="/usr/5bin/touch"; \
if [ -n   "$(BATCHMODE)" ]; then \
batchmode="\batchmode"; \
else \
batchmode=""; \
fi; \
options="$${batchmode}$(TEXOPTS)$$*"; \
if [ -z   "$${options}" ]; then \
cmd="latex '$${texfile}'"; \
else \
cmd="latex '$${options}\input{$${texfile}}'"; \
fi; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
logfile="$${jobname}.log"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
auxfile="$${jobname}.aux"; \
bblfile="$${jobname}.bbl"; \
dvifile="$${jobname}.dvi"; \
glofile="$${jobname}.glo"; \
if [ "$${status}" -eq   0 ]; then \
if [ "$${dvifile}" != "$@" ]; then \
cmd="mv $${dvifile} $@"; \
echo "$${cmd}"; $${cmd}; \
fi; \
if [ -s   "$${glofile}" -a   -w   "$${glofile}" ]; then \
tmpfile="/tmp/$${jobname}.$$$$"; \
cmd="sort -bdfi $${glofile}"; \
echo "$${cmd} > $${tmpfile}"; \
$${cmd}  > $${tmpfile}; \
cmd="mv $${tmpfile} $${glofile}"; \
echo "$${cmd}"; \
$${cmd} ; \
fi; \
if tail -32   "${logpath}"|grep -is   "have changed">/dev/null 1>&2; then \
cmd="$${touch} 01010101 $@"; \
echo "$${cmd}"; $${cmd} ; \
if [ "$@" = "$${dvifile}" ]; then \
unset dvifile; \
fi; \
fi; \
if head -32   "$${auxfile}"|grep -is   "\\bibstyle">/dev/null 1>&2; then \
if grep -is   "citation.*undefined" "$${logpath}">/dev/null 1>&2; then \
cmd="rm -f $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
elif [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${dvifile} $${auxfile} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
else \
cmd="rm -f $${dvifile} $@ $${glofile}"; \
echo "$${cmd}"; $${cmd} ; \
if [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
return $${status} ; \
}; fnCallLaTeX
BIBTEXCMD=fnCallBiBTeX() { \
set +e; \
srcfile="$$1"; \
bibfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${bibfile}`"; \
cmd="bibtex $${bibfile}"; \
echo "$${cmd}"; $${cmd} ; status="$$?"; \
logfile="$${jobname}.blg"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
return $${status} ; \
}; fnCallBiBTeX
LNCMD=fnCallLn() { \
set +e; \
for file in $${*} ; do \
target="`basename $${file}`"; \
if [ ! -r   "$${target}" ]; then \
cmd="ln -s $${file} $${target}"; \
echo "$${cmd}"; $${cmd} ; \
fi \
done; \
return 0; \
}; fnCallLn
RMCMD=fnCallRm() { \
set +e; \
if [ -r   "$$2" ]; then \
echo ""; \
echo "$$1"; \
echo -n   "Answer 'yes' if this is ok. "; \
read answer; \
if [ "$${answer}" != "yes" ]; then \
echo ""; \
echo "Canceled $@"; \
exit 255; \
fi; \
fi; \
shift; \
echo "rm $$*"; \
rm $${*} ; \
return 0; \
}; fnCallRm
GZIP=gzip
GZIPCMD=fnCallGZip() { \
set +e; \
status="0"; \
trap "mv $<.$$$$ $<" 1 2 15; \
cmd="cp $< $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="$(GZIP) $(GZIPFLAGS) -f $<"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="mv $<.$$$$ $<; touch $@"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
else \
cmd="rm -f $@ $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
fi; \
fi; \
return $${status} ; \
}; fnCallGZip
ASSERTTOPLEVEL= \
PWD="`pwd`"; \
if [ ! -d   "src/include/allegro5" ]; then \
echo "*** "'`'"make $@' can be called only" 1>&2; \
echo "*** in the top-level directory of PLOB!" 1>&2; \
exit 1; \
fi; \
PATH="$${PWD}/bin:$${PATH}"; export PATH
config shipout : 
	@$(ASSERTTOPLEVEL); \
plobconfig -$@
standard-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -standard
advanced-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -advanced
ADDBINDIR=if [ -d   "bin" ]; then \
	    BINPATH="`pwd`/bin"; \
	  elif [ -d   "../bin" ]; then \
	    BINPATH="`(cd ../bin;pwd)`"; \
	  elif [ -d   "../../bin" ]; then \
	    BINPATH="`(cd ../../bin;pwd)`"; \
	  fi; \
	  PATH="$${BINPATH}:$${PATH}"; export PATH
$(CONFDIR)/$(opsys)/make.server : $(RULES)        $(CONFDIR)/make.server.in $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP \"$(CPP)\" -I $(CONFDIR)/$(opsys) -o $@ $(CONFDIR)/make.server.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o $@      "$(CONFDIR)/make.server.in"
server : $(CONFDIR)/$(opsys)/make.server
	@$(MAKE_EXE) $(MAKE_F) "$(CONFDIR)/$(opsys)/make.server"
tex-log-directory : log
bin log $(CONFDIR)/$(opsys) $(opsys) $(opsys)/pic : 
	@if [ ! -d   "$@" ]; then \
echo "mkdir $@"; \
mkdir  $@   ; \
fi
default-all :: 
default-clean :: 
		-rm -f   *~ core a.out gmon.out *.log log/*
default-dist-clean :: clean
		-rm -f     *.lib       *.obj *.dll     *.fsl *.fasl *.wfasl
default-initial :: $(opsys)
$(RULES) : 
$(CONFDIR)/make.server.in : 
GETMAKEVARSCMD=fnCallGetMakeVars() { \
echo 'Looking for old configuration file, please wait ...'; \
szOldConfFile="`ls -1t $$1/../../*/conf/$(opsys)/make.vars.in 2>/dev/null|head -1`"; \
if [ -r   "$${szOldConfFile}" ]; then \
szOldConfDir="`dirname $${szOldConfFile}`"; \
szOldConfFile="`(cd $${szOldConfDir}; pwd)`/`basename $${szOldConfFile}`"; \
echo "Using old configuration file $${szOldConfFile}"; \
cp -p   "$${szOldConfFile}" "$$2"; \
fi; \
if [ ! -r   "$$2" ]; then \
cp -p   "$$1/make.vars.def" "$$2"; \
fi; \
}; fnCallGetMakeVars
$(CONFDIR)/$(opsys)/make.vars.in : 
	@if [ -d   "$(CONFDIR)" ]; then \
$(GETMAKEVARSCMD) $(CONFDIR)  $@   ; \
elif [ -r   "conf/make.vars.def" -a   ! -r   "conf/make.vars.in" ]; then \
$(GETMAKEVARSCMD) conf $(CONFDIR)/$(opsys)/make.vars.in; \
fi
makefile default-makefiles :: makefile.in $(RULES)         $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP '$(CPP)' -I $(CONFDIR)/$(opsys) -o $(opsys)/makefile makefile.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o "$(opsys)/makefile" "makefile.in"
ALLOPSYS=irix linux solaris win32
MKMAKEFILE=fnMkMakefile() { \
set +e; \
echo ''; \
echo "Making makefiles for $${1}"; \
if [ ! -r   "$(CONFDIR)/$${1}/make.vars.in" ]; then \
if [ -r   "$(CONFDIR)/$${1}/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/$$1/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
elif [ -r   "$(CONFDIR)/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
fi; \
fi; \
if [ ! -r   "$${1}/makefile" ]; then \
echo "Making bootstrap makefile for $${1}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$${1}" -o "$${1}/makefile" "makefile.in"; \
fi; \
$(MAKE_EXE) $(MAKE_F) "$${1}/makefile" makefiles; \
}
all-makefiles : 
	@$(ADDBINDIR); \
$(MKMAKEFILE); \
for o in $(ALLOPSYS); do \
fnMkMakefile $${o} ; \
done
CFLAGS=$(COPTDEB) $(COPTOPT)
STDINCLUDE= $(SRCIDIR)/global.h $(SRCIDIR)/hash.h $(SRCIDIR)/generic.h
plobrootDeps=$(SRCIDIR)/plobversion.h
PICDIR=$(opsys)
COMMONOBJECTS=$(opsys)/global.obj $(opsys)/trmalloc.obj $(opsys)/hash.obj $(opsys)/generic.obj $(opsys)/plobroot.obj $(opsys)/plobadmin.obj $(opsys)/plob.obj $(opsys)/plobmisc.obj $(opsys)/plobff.obj $(opsys)/plobsequ.obj $(opsys)/plobstruct.obj $(opsys)/plobclos.obj $(opsys)/plobtype.obj $(opsys)/plobnumber.obj $(opsys)/ploblock.obj $(opsys)/plobheap.obj $(opsys)/plobbtree.obj
OBJECTS=$(COMMONOBJECTS) $(opsys)/plobdxdr.obj $(opsys)/plobpxdr.obj
COMMONSHAREDOBJECTS=$(PICDIR)/global.obj $(PICDIR)/trmalloc.obj $(PICDIR)/hash.obj $(PICDIR)/generic.obj $(PICDIR)/plobroot.obj $(PICDIR)/plobadmin.obj $(PICDIR)/plob.obj $(PICDIR)/plobmisc.obj $(PICDIR)/plobff.obj $(PICDIR)/plobsequ.obj $(PICDIR)/plobstruct.obj $(PICDIR)/plobclos.obj $(PICDIR)/plobtype.obj $(PICDIR)/plobnumber.obj $(PICDIR)/ploblock.obj $(PICDIR)/plobheap.obj $(PICDIR)/plobbtree.obj
SHAREDOBJECTS= $(COMMONSHAREDOBJECTS) $(PICDIR)/plobdxdr.obj $(PICDIR)/plobpxdr.obj
LIBRARY=$(LIBDIR)/libcommonplob.lib
LIBCOMMONPLOBDLL=libcommonplob.dll
SHAREDLIBRARY=$(LIBDIR)/$(LIBCOMMONPLOBDLL)
all :: $(opsys) $(PICDIR) $(opsys)/plobd.h $(OBJECTS) $(COMMONOBJECTS) $(LIBRARY) $(SHAREDOBJECTS) $(COMMONSHAREDOBJECTS)
objects :: $(OBJECTS)
$(opsys)/global.obj : global.c $(SRCIDIR)/global.h $(globalDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) global.c
$(opsys)/trmalloc.obj : trmalloc.c $(SRCIDIR)/trmalloc.h $(trmallocDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) trmalloc.c
$(opsys)/hash.obj : hash.c $(SRCIDIR)/hash.h $(hashDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) hash.c
$(opsys)/generic.obj : generic.c $(SRCIDIR)/generic.h $(genericDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) generic.c
$(opsys)/plobroot.obj : plobroot.c $(SRCIDIR)/plobroot.h $(plobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobroot.c
$(opsys)/plobadmin.obj : plobadmin.c $(SRCIDIR)/plobadmin.h $(plobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobadmin.c
$(opsys)/plob.obj : plob.c $(SRCIDIR)/plob.h $(plobDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plob.c
$(opsys)/plobmisc.obj : plobmisc.c $(SRCIDIR)/plobmisc.h $(plobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobmisc.c
$(opsys)/plobff.obj : plobff.c $(SRCIDIR)/plobff.h $(plobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobff.c
$(opsys)/plobsequ.obj : plobsequ.c $(SRCIDIR)/plobsequ.h $(plobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobsequ.c
$(opsys)/plobstruct.obj : plobstruct.c $(SRCIDIR)/plobstruct.h $(plobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobstruct.c
$(opsys)/plobclos.obj : plobclos.c $(SRCIDIR)/plobclos.h $(plobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobclos.c
$(opsys)/plobtype.obj : plobtype.c $(SRCIDIR)/plobtype.h $(plobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobtype.c
$(opsys)/plobnumber.obj : plobnumber.c $(SRCIDIR)/plobnumber.h $(plobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobnumber.c
$(opsys)/ploblock.obj : ploblock.c $(SRCIDIR)/ploblock.h $(ploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) ploblock.c
$(opsys)/plobheap.obj : plobheap.c $(SRCIDIR)/plobheap.h $(plobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobheap.c
$(opsys)/plobbtree.obj : plobbtree.c $(SRCIDIR)/plobbtree.h $(plobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) plobbtree.c
$(LIBRARY) : $(COMMONOBJECTS)
	$(AR) $(ARFLAGS) $(OUTPUT_OPTION_LIB) $(COMMONOBJECTS)
	$(RANLIB)  $@
$(opsys)/plobdxdr.c : ../server/plobd.x
	rm -f    $@
	cd .. && cd server && $(RPCGEN) $(RPCGENFLAGS) -c -o ../common/$@      plobd.x
$(opsys)/plobd.h : ../server/plobd.x
	rm -f    $@
	cd .. && cd server && $(RPCGEN) $(RPCGENFLAGS) -h -o ../common/$@      plobd.x
../server/plobd.x : 
	cd .. && cd server && $(MAKE) plobd.x
$(opsys)/plobdxdr.obj : $(opsys)/plobdxdr.c     $(opsys)/plobd.h
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) $(opsys)/plobdxdr.c
$(opsys)/plobpxdr.obj : plobpxdr.c     $(opsys)/plobd.h
	$(COMPILEc) $(OUTPUT_OPTION_OBJ)   plobpxdr.c
$(opsys)/pic/global.obj : global.c $(SRCIDIR)/global.h $(globalDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) global.c
$(opsys)/pic/trmalloc.obj : trmalloc.c $(SRCIDIR)/trmalloc.h $(trmallocDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) trmalloc.c
$(opsys)/pic/hash.obj : hash.c $(SRCIDIR)/hash.h $(hashDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) hash.c
$(opsys)/pic/generic.obj : generic.c $(SRCIDIR)/generic.h $(genericDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) generic.c
$(opsys)/pic/plobroot.obj : plobroot.c $(SRCIDIR)/plobroot.h $(plobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobroot.c
$(opsys)/pic/plobadmin.obj : plobadmin.c $(SRCIDIR)/plobadmin.h $(plobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobadmin.c
$(opsys)/pic/plob.obj : plob.c $(SRCIDIR)/plob.h $(plobDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plob.c
$(opsys)/pic/plobmisc.obj : plobmisc.c $(SRCIDIR)/plobmisc.h $(plobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobmisc.c
$(opsys)/pic/plobff.obj : plobff.c $(SRCIDIR)/plobff.h $(plobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobff.c
$(opsys)/pic/plobsequ.obj : plobsequ.c $(SRCIDIR)/plobsequ.h $(plobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobsequ.c
$(opsys)/pic/plobstruct.obj : plobstruct.c $(SRCIDIR)/plobstruct.h $(plobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobstruct.c
$(opsys)/pic/plobclos.obj : plobclos.c $(SRCIDIR)/plobclos.h $(plobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobclos.c
$(opsys)/pic/plobtype.obj : plobtype.c $(SRCIDIR)/plobtype.h $(plobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobtype.c
$(opsys)/pic/plobnumber.obj : plobnumber.c $(SRCIDIR)/plobnumber.h $(plobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobnumber.c
$(opsys)/pic/ploblock.obj : ploblock.c $(SRCIDIR)/ploblock.h $(ploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) ploblock.c
$(opsys)/pic/plobheap.obj : plobheap.c $(SRCIDIR)/plobheap.h $(plobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobheap.c
$(opsys)/pic/plobbtree.obj : plobbtree.c $(SRCIDIR)/plobbtree.h $(plobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) plobbtree.c
$(opsys)/libcommonplob.res : libcommonplob.rc ../server/mop-inside.ico $(SRCIDIR)/plobversion.h
	rc -r   -fo $@ -I$(SRCIDIR) -I$(MSVCPATH)/mfc/include -I$(MSVCPATH)/include libcommonplob.rc
$(SHAREDLIBRARY) : $(COMMONSHAREDOBJECTS) $(opsys)/libcommonplob.res
	$(LINKc) $(OUTPUT_OPTION_DLL) -nologo      -implib:$(LIBDIR)/libcommonplobimp.lib  $(COMMONSHAREDOBJECTS) $(opsys)/libcommonplob.res    -nodefaultlib -libpath:$(LIBDIR) -libpath:$(RELPLOBDIR)/oncrpc-1.12/bin -libpath:$(MSVCPATH)/lib binmode.obj       oncrpc.lib       msvcrt.lib advapi32.lib       ws2_32.lib       kernel32.lib oldnames.lib      $(LDLIBS)
initial :: $(opsys) $(PICDIR)
$(STDTARGETS) :: 
	@$(MAKE) default-$@
#Local variables:
#buffer-file-coding-system: iso-latin-1-unix
#End:
