# --------------------------------------------------------------------------
# NOTE: This makefile was generated by plobimake;
# ===== changes done directly to this file will be lost!
# --------------------------------------------------------------------------
SHELL=/bin/sh
PLOBDIR=/home/hkirschk/plob-2.09
FRANZCL=/opt/acl60
OPSYS=WIN32
opsys=win32
CC=cl
COPTPIC=
COPTDEB=-Zi
COPTOPT=-Ox
CPP=gcc -E -P
LDLIBS=
RELPLOBDIR=../..
BINDIR=$(RELPLOBDIR)/bin
CONFDIR=$(RELPLOBDIR)/conf
RULES=$(CONFDIR)/make.rules.in
LIBDIR=$(RELPLOBDIR)/lib/$(opsys)
PSDIR=$(RELPLOBDIR)/ps
SRCDIR=$(RELPLOBDIR)/src
SRCIDIR=$(SRCDIR)/include
LISPDOCDIR=$(SRCDIR)/lisp-doc
TEXDIR=$(RELPLOBDIR)/tex
TEXIDIR=$(TEXDIR)/inputs
RPC_PROGRAM=0x20506E62
RPC_VERSION=1
HASAUTH=AUTH_NON
AR=lib
ARFLAGS=
LINK=link
LINKc=$(LINK) $(LDFLAGS)
MAKE_EXE=make
MAKE_F= -f
MAKE_FILE=win32/makefile
MAKE=$(MAKE_EXE) $(MAKE_F) $(MAKE_FILE)
RANLIB=: ranlib
LDSHAREDOPT=-dll
STDTARGETS=all clean dist-clean initial shipoutconf makefiles
SHELL=/bin/sh
C2RPC=$(BINDIR)/c2rpc -CPP   '$(CPP)' -I$(BINDIR)   -P   $(RPC_PROGRAM) -V   $(RPC_VERSION) $(C2RPCFLAGS)
C2LISP=$(BINDIR)/c2lisp -CPP   '$(CPP)' -I$(BINDIR)   $(C2LISPFLAGS)
SUFFIXES=.exe .dll .lib .obj  \
	 .x .lisp .c .h \
	 .bbl .aux \
	 .ps .eps .dvi .dgr .tex
DEFAULTHOST=localhost
DEFAULTTRANS=tcp
DEFAULTROOT=/opt/data/plob
DEFAULTBASE=database
COMPILEc=$(CC) $(CFLAGS) $(CPPFLAGS)
OUTPUT_OPTION_OBJ= -c    -Fo$@
OUTPUT_OPTION_LIB=  -out:$@
OUTPUT_OPTION_DLL= $(LDSHAREDOPT)  -out:$@
OUTPUT_OPTION_EXE=  -out:$@
CPPFLAGS=  -I$(opsys)    -I$(SRCIDIR)    -I$(FRANZCL)/home/misc -DDATABASE='"$(DEFAULTBASE)"' -D$(OPSYS)=1 -DOPSYS='"$(OPSYS)"' -DHASAUTH=$(HASAUTH)  -nologo -D_DLL   -D_NTSDK -D_WIN32_WINNT=0x0400 -Fd$(LIBDIR)/ -I$(MSVCPATH)/include -I$(RELPLOBDIR)/oncrpc-1.12     -DBUILDDLL=1
RPCGEN=rpcgen
RPCGENFLAGS=
all :: 
MAKECMD=fnCallMake() { \
set +e; \
status="0"; \
dirs="$$1"; \
if [ -n   "$$2" ]; then \
shift; \
args="$$*"; \
fi; \
if [ -d   "$(BINDIR)" ]; then \
PATH="$(BINDIR):$${PATH}"; export PATH; \
elif [ -d   "bin" ]; then \
PATH="`pwd`/bin:$${PATH}"; export PATH; \
fi; \
case "$(MAKEFLAGS)" in \
''|'-'*)	szMakeflags="$(MAKEFLAGS)";; \
*)		szMakeflags="-$(MAKEFLAGS)";; \
esac; \
if [ "$${szMakeflags}" = "-w" ]; then \
szMakeflags="--no-print-directory"; \
else \
szMakeflags=""; \
fi; \
if [ ! -r   "$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$(opsys)/makefile"   "makefile.in"; \
fi; \
for dir in $${dirs} ; do \
if [ ! -r   "$${dir}/$(opsys)/makefile" ]; then \
echo "Making bootstrap makefile in $${dir}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$(opsys)"   -o "$${dir}/$(opsys)/makefile"   "$${dir}/makefile.in"; \
fi; \
( \
echo "cd `pwd`/$${dir}"; \
cd "$${dir}"; \
$(MAKE_EXE) $${szMakeflags}  $(MAKE_F) "$(opsys)/makefile" $${args} ; \
); \
s="$$?"; \
if [ "$${s}" -ne   0 ]; then \
status="$$s"; \
fi; \
done; \
return $${status} ; \
}; fnCallMake
DGRTODVI=dgrtodvi
LATEXCMD=fnCallLaTeX() { \
set +e; \
trap "rm -f /tmp/*.$$$$" 1 2 15; \
TEXINPUTS="$(TEXIDIR):$(LISPDOCDIR):$${TEXINPUTS}"; \
export TEXINPUTS; \
srcfile="$$1"; \
texfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${texfile}`"; \
touch="/usr/5bin/touch"; \
if [ -n   "$(BATCHMODE)" ]; then \
batchmode="\batchmode"; \
else \
batchmode=""; \
fi; \
options="$${batchmode}$(TEXOPTS)$$*"; \
if [ -z   "$${options}" ]; then \
cmd="latex '$${texfile}'"; \
else \
cmd="latex '$${options}\input{$${texfile}}'"; \
fi; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
logfile="$${jobname}.log"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
auxfile="$${jobname}.aux"; \
bblfile="$${jobname}.bbl"; \
dvifile="$${jobname}.dvi"; \
glofile="$${jobname}.glo"; \
if [ "$${status}" -eq   0 ]; then \
if [ "$${dvifile}" != "$@" ]; then \
cmd="mv $${dvifile} $@"; \
echo "$${cmd}"; $${cmd}; \
fi; \
if [ -s   "$${glofile}" -a   -w   "$${glofile}" ]; then \
tmpfile="/tmp/$${jobname}.$$$$"; \
cmd="sort -bdfi $${glofile}"; \
echo "$${cmd} > $${tmpfile}"; \
$${cmd}  > $${tmpfile}; \
cmd="mv $${tmpfile} $${glofile}"; \
echo "$${cmd}"; \
$${cmd} ; \
fi; \
if tail -32   "${logpath}"|grep -is   "have changed">/dev/null 1>&2; then \
cmd="$${touch} 01010101 $@"; \
echo "$${cmd}"; $${cmd} ; \
if [ "$@" = "$${dvifile}" ]; then \
unset dvifile; \
fi; \
fi; \
if head -32   "$${auxfile}"|grep -is   "\\bibstyle">/dev/null 1>&2; then \
if grep -is   "citation.*undefined" "$${logpath}">/dev/null 1>&2; then \
cmd="rm -f $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
elif [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${dvifile} $${auxfile} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
else \
cmd="rm -f $${dvifile} $@ $${glofile}"; \
echo "$${cmd}"; $${cmd} ; \
if [ -s   "$${bblfile}" ]; then \
cmd="$${touch} $${bblfile}"; \
echo "$${cmd}"; $${cmd} ; \
fi; \
fi; \
return $${status} ; \
}; fnCallLaTeX
BIBTEXCMD=fnCallBiBTeX() { \
set +e; \
srcfile="$$1"; \
bibfile="`echo $${srcfile}|sed 's/\.[^./]*$$//'`"; shift; \
jobname="`basename $${bibfile}`"; \
cmd="bibtex $${bibfile}"; \
echo "$${cmd}"; $${cmd} ; status="$$?"; \
logfile="$${jobname}.blg"; \
if [ -d   "log" ]; then \
logpath="log/$${logfile}"; \
cmd="mv $${logfile} $${logpath}"; \
echo "$${cmd}"; $${cmd} ; \
else \
logpath="$${logfile}"; \
fi; \
return $${status} ; \
}; fnCallBiBTeX
LNCMD=fnCallLn() { \
set +e; \
for file in $${*} ; do \
target="`basename $${file}`"; \
if [ ! -r   "$${target}" ]; then \
cmd="ln -s $${file} $${target}"; \
echo "$${cmd}"; $${cmd} ; \
fi \
done; \
return 0; \
}; fnCallLn
RMCMD=fnCallRm() { \
set +e; \
if [ -r   "$$2" ]; then \
echo ""; \
echo "$$1"; \
echo -n   "Answer 'yes' if this is ok. "; \
read answer; \
if [ "$${answer}" != "yes" ]; then \
echo ""; \
echo "Canceled $@"; \
exit 255; \
fi; \
fi; \
shift; \
echo "rm $$*"; \
rm $${*} ; \
return 0; \
}; fnCallRm
GZIP=gzip
GZIPCMD=fnCallGZip() { \
set +e; \
status="0"; \
trap "mv $<.$$$$ $<" 1 2 15; \
cmd="cp $< $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="$(GZIP) $(GZIPFLAGS) -f $<"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; status="$$?"; \
if [ "$${status}" -eq   0 ]; then \
cmd="mv $<.$$$$ $<; touch $@"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
else \
cmd="rm -f $@ $<.$$$$"; \
echo "$${cmd}"; sh -c "$${cmd}"  ; \
fi; \
fi; \
return $${status} ; \
}; fnCallGZip
ASSERTTOPLEVEL= \
PWD="`pwd`"; \
if [ ! -d   "src/include/allegro5" ]; then \
echo "*** "'`'"make $@' can be called only" 1>&2; \
echo "*** in the top-level directory of PLOB!" 1>&2; \
exit 1; \
fi; \
PATH="$${PWD}/bin:$${PATH}"; export PATH
config shipout :: 
	@$(ASSERTTOPLEVEL); \
plobconfig -$@
standard-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -standard
advanced-config : 
	@$(ASSERTTOPLEVEL); \
plobconfig -config   -advanced
ADDBINDIR=if [ -d   "bin" ]; then \
	    BINPATH="`pwd`/bin"; \
	  elif [ -d   "../bin" ]; then \
	    BINPATH="`(cd ../bin;pwd)`"; \
	  elif [ -d   "../../bin" ]; then \
	    BINPATH="`(cd ../../bin;pwd)`"; \
	  fi; \
	  PATH="$${BINPATH}:$${PATH}"; export PATH
$(CONFDIR)/$(opsys)/make.server : $(RULES)        $(CONFDIR)/make.server.in $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP \"$(CPP)\" -I $(CONFDIR)/$(opsys) -o $@ $(CONFDIR)/make.server.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o $@      "$(CONFDIR)/make.server.in"
server : $(CONFDIR)/$(opsys)/make.server
	@$(MAKE_EXE) $(MAKE_F) "$(CONFDIR)/$(opsys)/make.server"
tex-log-directory : log
bin log $(CONFDIR)/$(opsys) $(opsys) $(opsys)/pic : 
	@if [ ! -d   "$@" ]; then \
echo "mkdir $@"; \
mkdir  $@   ; \
fi
default-all :: 
default-clean :: 
		-rm -f   *~ core a.out gmon.out *.log log/*
default-dist-clean :: clean
		-rm -f     *.lib       *.obj *.dll     *.fsl *.fasl *.wfasl
default-initial :: $(opsys)
default-shipoutconf :: $(opsys)
$(RULES) : 
$(CONFDIR)/make.server.in : 
GETMAKEVARSCMD=fnCallGetMakeVars() { \
echo 'Looking for old configuration file, please wait ...'; \
szOldConfFile="`ls -1t $$1/../../*/conf/$(opsys)/make.vars.in 2>/dev/null|head -1`"; \
if [ -r   "$${szOldConfFile}" ]; then \
szOldConfDir="`dirname $${szOldConfFile}`"; \
szOldConfFile="`(cd $${szOldConfDir}; pwd)`/`basename $${szOldConfFile}`"; \
echo "Using old configuration file $${szOldConfFile}"; \
cp -p   "$${szOldConfFile}" "$$2"; \
fi; \
if [ ! -r   "$$2" ]; then \
cp -p   "$$1/make.vars.def" "$$2"; \
fi; \
}; fnCallGetMakeVars
$(CONFDIR)/$(opsys)/make.vars.in : 
	@if [ -d   "$(CONFDIR)" ]; then \
$(GETMAKEVARSCMD) $(CONFDIR)  $@   ; \
elif [ -r   "conf/make.vars.def" -a   ! -r   "conf/make.vars.in" ]; then \
$(GETMAKEVARSCMD) conf $(CONFDIR)/$(opsys)/make.vars.in; \
fi
makefile default-makefiles :: makefile.in $(RULES)         $(CONFDIR)/$(opsys)/make.vars.in
	@$(ADDBINDIR); \
echo "plobimake -CPP '$(CPP)' -I $(CONFDIR)/$(opsys) -o $(opsys)/makefile makefile.in"; \
$${BINPATH}/plobimake -CPP "$(CPP)" -I "$(CONFDIR)/$(opsys)" -o "$(opsys)/makefile" "makefile.in"
ALLOPSYS=irix linux solaris win32
echo-allopsys : 
	@echo '>>aa>>' $(ALLOPSYS) '<<zz<<'
MKMAKEFILE=fnMkMakefile() { \
set +e; \
echo ''; \
echo "Making makefiles for $${1}"; \
if [ ! -r   "$(CONFDIR)/$${1}/make.vars.in" ]; then \
if [ -r   "$(CONFDIR)/$${1}/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/$$1/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
elif [ -r   "$(CONFDIR)/make.vars.def" ]; then \
cp -p   "$(CONFDIR)/make.vars.def" "$(CONFDIR)/$${1}/make.vars.in"; \
fi; \
fi; \
if [ ! -r   "$${1}/makefile" ]; then \
echo "Making bootstrap makefile for $${1}"; \
plobimake -CPP "$(CPP)"   -I "$(CONFDIR)/$${1}" -o "$${1}/makefile" "makefile.in"; \
fi; \
$(MAKE_EXE) $(MAKE_F) "$${1}/makefile" makefiles; \
}
all-makefiles : 
	@$(ADDBINDIR); \
$(MKMAKEFILE); \
for o in $(ALLOPSYS); do \
fnMkMakefile $${o} ; \
done
CFLAGS=$(COPTDEB) $(COPTOPT)
STDINCLUDE= $(SRCIDIR)/c2c.h $(SRCIDIR)/global.h $(SRCIDIR)/hash.h $(SRCIDIR)/generic.h cplob.h ../include/plobconst.h ../include/plobintern.h
cplobrootDeps=$(SRCIDIR)/plobversion.h
PICDIR=$(opsys)
OBJECTS=$(opsys)/cplobroot.obj $(opsys)/cplobadmin.obj $(opsys)/cplob.obj $(opsys)/cplobmisc.obj $(opsys)/cplobff.obj $(opsys)/cplobsequ.obj $(opsys)/cplobstruct.obj $(opsys)/cplobclos.obj $(opsys)/cplobtype.obj $(opsys)/cplobnumber.obj $(opsys)/cploblock.obj $(opsys)/cplobheap.obj $(opsys)/cplobbtree.obj
COMMONOBJECTS=../common/$(opsys)/global.obj ../common/$(opsys)/trmalloc.obj ../common/$(opsys)/hash.obj ../common/$(opsys)/generic.obj ../common/$(opsys)/plobroot.obj ../common/$(opsys)/plobadmin.obj ../common/$(opsys)/plob.obj ../common/$(opsys)/plobmisc.obj ../common/$(opsys)/plobff.obj ../common/$(opsys)/plobsequ.obj ../common/$(opsys)/plobstruct.obj ../common/$(opsys)/plobclos.obj ../common/$(opsys)/plobtype.obj ../common/$(opsys)/plobnumber.obj ../common/$(opsys)/ploblock.obj ../common/$(opsys)/plobheap.obj ../common/$(opsys)/plobbtree.obj
LCOMMONOBJECTS=../lcommon/$(opsys)/lcplobroot.obj ../lcommon/$(opsys)/lcplobadmin.obj ../lcommon/$(opsys)/lcplob.obj ../lcommon/$(opsys)/lcplobmisc.obj ../lcommon/$(opsys)/lcplobff.obj ../lcommon/$(opsys)/lcplobsequ.obj ../lcommon/$(opsys)/lcplobstruct.obj ../lcommon/$(opsys)/lcplobclos.obj ../lcommon/$(opsys)/lcplobtype.obj ../lcommon/$(opsys)/lcplobnumber.obj ../lcommon/$(opsys)/lcploblock.obj ../lcommon/$(opsys)/lcplobheap.obj ../lcommon/$(opsys)/lcplobbtree.obj
LIBFILES=$(OBJECTS) $(opsys)/plobdclnt.obj ../common/$(opsys)/plobdxdr.obj ../common/$(opsys)/plobpxdr.obj $(COMMONOBJECTS) $(LCOMMONOBJECTS)
LIBRPCLIENTLIB=librpclientplob.lib
LIBRARY=$(LIBDIR)/$(LIBRPCLIENTLIB)
SHAREDOBJECTS=$(PICDIR)/cplobroot.obj $(PICDIR)/cplobadmin.obj $(PICDIR)/cplob.obj $(PICDIR)/cplobmisc.obj $(PICDIR)/cplobff.obj $(PICDIR)/cplobsequ.obj $(PICDIR)/cplobstruct.obj $(PICDIR)/cplobclos.obj $(PICDIR)/cplobtype.obj $(PICDIR)/cplobnumber.obj $(PICDIR)/cploblock.obj $(PICDIR)/cplobheap.obj $(PICDIR)/cplobbtree.obj
SHAREDCOMMONOBJECTS=../common/$(PICDIR)/global.obj ../common/$(PICDIR)/trmalloc.obj ../common/$(PICDIR)/hash.obj ../common/$(PICDIR)/generic.obj ../common/$(PICDIR)/plobroot.obj ../common/$(PICDIR)/plobadmin.obj ../common/$(PICDIR)/plob.obj ../common/$(PICDIR)/plobmisc.obj ../common/$(PICDIR)/plobff.obj ../common/$(PICDIR)/plobsequ.obj ../common/$(PICDIR)/plobstruct.obj ../common/$(PICDIR)/plobclos.obj ../common/$(PICDIR)/plobtype.obj ../common/$(PICDIR)/plobnumber.obj ../common/$(PICDIR)/ploblock.obj ../common/$(PICDIR)/plobheap.obj ../common/$(PICDIR)/plobbtree.obj
LSHAREDCOMMONOBJECTS=../lcommon/$(PICDIR)/lcplobroot.obj ../lcommon/$(PICDIR)/lcplobadmin.obj ../lcommon/$(PICDIR)/lcplob.obj ../lcommon/$(PICDIR)/lcplobmisc.obj ../lcommon/$(PICDIR)/lcplobff.obj ../lcommon/$(PICDIR)/lcplobsequ.obj ../lcommon/$(PICDIR)/lcplobstruct.obj ../lcommon/$(PICDIR)/lcplobclos.obj ../lcommon/$(PICDIR)/lcplobtype.obj ../lcommon/$(PICDIR)/lcplobnumber.obj ../lcommon/$(PICDIR)/lcploblock.obj ../lcommon/$(PICDIR)/lcplobheap.obj ../lcommon/$(PICDIR)/lcplobbtree.obj
SHAREDLIBFILES=$(SHAREDOBJECTS) $(PICDIR)/plobdclnt.obj ../common/$(PICDIR)/plobdxdr.obj ../common/$(PICDIR)/plobpxdr.obj $(SHAREDCOMMONOBJECTS) $(LSHAREDCOMMONOBJECTS)
LIBRPCLIENTPLOBDLL=librpclientplob.dll
SHAREDLIBRARY=$(LIBDIR)/$(LIBRPCLIENTPLOBDLL)
all :: $(opsys) $(PICDIR) $(opsys)/plobd.h objects $(SHAREDLIBRARY)
dll : $(SHAREDLIBRARY)
objects : $(OBJECTS) $(opsys)/plobdclnt.obj
$(opsys)/cplobroot.obj : cplobroot.c cplobroot.h $(SRCIDIR)/plobroot.h $(cplobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobroot.c
$(opsys)/cplobadmin.obj : cplobadmin.c cplobadmin.h $(SRCIDIR)/plobadmin.h $(cplobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobadmin.c
$(opsys)/cplob.obj : cplob.c cplob.h $(SRCIDIR)/plob.h $(cplobDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplob.c
$(opsys)/cplobmisc.obj : cplobmisc.c cplobmisc.h $(SRCIDIR)/plobmisc.h $(cplobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobmisc.c
$(opsys)/cplobff.obj : cplobff.c cplobff.h $(SRCIDIR)/plobff.h $(cplobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobff.c
$(opsys)/cplobsequ.obj : cplobsequ.c cplobsequ.h $(SRCIDIR)/plobsequ.h $(cplobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobsequ.c
$(opsys)/cplobstruct.obj : cplobstruct.c cplobstruct.h $(SRCIDIR)/plobstruct.h $(cplobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobstruct.c
$(opsys)/cplobclos.obj : cplobclos.c cplobclos.h $(SRCIDIR)/plobclos.h $(cplobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobclos.c
$(opsys)/cplobtype.obj : cplobtype.c cplobtype.h $(SRCIDIR)/plobtype.h $(cplobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobtype.c
$(opsys)/cplobnumber.obj : cplobnumber.c cplobnumber.h $(SRCIDIR)/plobnumber.h $(cplobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobnumber.c
$(opsys)/cploblock.obj : cploblock.c cploblock.h $(SRCIDIR)/ploblock.h $(cploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cploblock.c
$(opsys)/cplobheap.obj : cplobheap.c cplobheap.h $(SRCIDIR)/plobheap.h $(cplobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobheap.c
$(opsys)/cplobbtree.obj : cplobbtree.c cplobbtree.h $(SRCIDIR)/plobbtree.h $(cplobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ) cplobbtree.c
$(LIBRARY) : $(LIBFILES)
	$(AR) $(ARFLAGS) $(OUTPUT_OPTION_LIB) $(LIBFILES)
	$(RANLIB)  $@
$(opsys)/plobdclnt.c : ../server/plobd.x
	rm -f    $@
	cd .. && cd server && $(RPCGEN) $(RPCGENFLAGS)   -l -o ../client/$@      plobd.x
$(opsys)/plobd.h : ../server/plobd.x
	rm -f    $@
	cd .. && cd server && $(RPCGEN) $(RPCGENFLAGS)   -h -o ../client/$@      plobd.x
$(opsys)/plobdclnt.obj : $(opsys)/plobdclnt.c        $(opsys)/plobd.h
	$(COMPILEc)  -DMULTITHREAD=1 $(OUTPUT_OPTION_OBJ) $(opsys)/plobdclnt.c
$(opsys)/librpclientplob.res : librpclientplob.rc ../server/mop-inside.ico $(SRCIDIR)/plobversion.h
	rc -r   -fo $@ -I$(SRCIDIR) -I$(MSVCPATH)/mfc/include -I$(MSVCPATH)/include librpclientplob.rc
$(opsys)/pic/cplobroot.obj : cplobroot.c cplobroot.h $(SRCIDIR)/plobroot.h $(cplobrootDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobroot.c
$(opsys)/pic/cplobadmin.obj : cplobadmin.c cplobadmin.h $(SRCIDIR)/plobadmin.h $(cplobadminDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobadmin.c
$(opsys)/pic/cplob.obj : cplob.c cplob.h $(SRCIDIR)/plob.h $(cplobDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplob.c
$(opsys)/pic/cplobmisc.obj : cplobmisc.c cplobmisc.h $(SRCIDIR)/plobmisc.h $(cplobmiscDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobmisc.c
$(opsys)/pic/cplobff.obj : cplobff.c cplobff.h $(SRCIDIR)/plobff.h $(cplobffDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobff.c
$(opsys)/pic/cplobsequ.obj : cplobsequ.c cplobsequ.h $(SRCIDIR)/plobsequ.h $(cplobsequDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobsequ.c
$(opsys)/pic/cplobstruct.obj : cplobstruct.c cplobstruct.h $(SRCIDIR)/plobstruct.h $(cplobstructDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobstruct.c
$(opsys)/pic/cplobclos.obj : cplobclos.c cplobclos.h $(SRCIDIR)/plobclos.h $(cplobclosDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobclos.c
$(opsys)/pic/cplobtype.obj : cplobtype.c cplobtype.h $(SRCIDIR)/plobtype.h $(cplobtypeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobtype.c
$(opsys)/pic/cplobnumber.obj : cplobnumber.c cplobnumber.h $(SRCIDIR)/plobnumber.h $(cplobnumberDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobnumber.c
$(opsys)/pic/cploblock.obj : cploblock.c cploblock.h $(SRCIDIR)/ploblock.h $(cploblockDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cploblock.c
$(opsys)/pic/cplobheap.obj : cplobheap.c cplobheap.h $(SRCIDIR)/plobheap.h $(cplobheapDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobheap.c
$(opsys)/pic/cplobbtree.obj : cplobbtree.c cplobbtree.h $(SRCIDIR)/plobbtree.h $(cplobbtreeDeps) $(STDINCLUDE)
	$(COMPILEc) $(COPTPIC) $(OUTPUT_OPTION_OBJ) cplobbtree.c
$(SHAREDLIBRARY) : $(SHAREDLIBFILES) $(opsys)/librpclientplob.res
	$(LINKc) $(OUTPUT_OPTION_DLL) -nologo       -implib:$(LIBDIR)/librpclientplobimp.lib  $(SHAREDLIBFILES) $(opsys)/librpclientplob.res    -nodefaultlib -libpath:$(LIBDIR) -libpath:$(RELPLOBDIR)/oncrpc-1.12/bin -libpath:$(MSVCPATH)/lib binmode.obj       oncrpc.lib       msvcrt.lib advapi32.lib       ws2_32.lib       kernel32.lib oldnames.lib      $(LDLIBS)
test :: $(opsys)/cplobtest.exe
$(opsys)/cplobtest.obj : cplobtest.c ../include/plobheap.h ../include/plobbtree.h $(STDINCLUDE)
	$(COMPILEc) $(OUTPUT_OPTION_OBJ)        -I. cplobtest.c
$(opsys)/cplobtest.exe : $(opsys)/cplobtest.obj $(LIBDIR)/$(LIBRPCLIENTLIB) $(LIBDIR)/$(LIBPLOB)
	$(LINKc) $(OUTPUT_OPTION_EXE) -nologo      $(opsys)/cplobtest.obj -libpath:$(LIBDIR) -map:$(opsys)/cplobtest.map $(LIBRPCLIENTLIB) $(LIBPLOB)    -nodefaultlib -libpath:$(LIBDIR) -libpath:$(RELPLOBDIR)/oncrpc-1.12/bin -libpath:$(MSVCPATH)/lib binmode.obj       oncrpc.lib       msvcrt.lib advapi32.lib       ws2_32.lib       kernel32.lib oldnames.lib      $(LDLIBS)
initial :: $(opsys) $(PICDIR)
$(STDTARGETS) :: 
	@$(MAKE) default-$@
