#!/bin/sh
# 17.12.1993 Heiko Kirschke, Fachbereich Informatik, Uni Hamburg
# e-mail: kirschke@kogs26.informatik.uni-hamburg.de

# 'Uebersetzt' C Deklarationen einer Header-Datei in LISP Deklarationen.
# Die Deklarationen in der Header-Datei muessen mittels der in
# c2c.h definierten Makros erfolgen.

# set -vx

# Konstanten:
CPP='gcc -E -P'
szDefaultDefines='-D LISPWORKS=1'
szDefaultIncludes="`pwd`:${PATH}"
szScript='c2lisp'; export szScript
szSpaces='      '
nPID="$$"; export nPID

if [ -n "${TMP}" ]; then
  TMP="`echo \"${TMP}\"|sed 's|\\\\|/|'`"
elif [ -n "${TEMP}" ]; then
  TMP="`echo \"${TEMP}\"|sed 's|\\\\|/|'`"
elif [ -n "${TMPDIR}" ]; then
  TMP="`echo \"${TMPDIR}\"|sed 's|\\\\|/|'`"
elif [ -n "${TEMPDIR}" ]; then
  TMP="`echo \"${TEMPDIR}\"|sed 's|\\\\|/|'`"
else
  TMP="/tmp"
fi
export TMP

szTmpCfile="${TMP}/${nPID}_${szScript}.c"

set +e

# ----------------------------------------------------------------------
# Funktion	fnUsage
# Argumente	---
# Beschreibung	Gibt einen Hilfstext aus.
# ----------------------------------------------------------------------
fnUsage () {
  echo "\
Usage: ${szScript} [-CPP <ANSI C preprocessor>]
       ${szSpaces} [-D <define>] [-I <include dir>{:<more include dirs>}]
       ${szSpaces} [-h] [-o <.lisp file>|-|--] [-v] [{<.h files>}]
Description:
    Generates a .lisp file from <.h files>.
Options:
    -CPP Use <ANSI C preprocessor> instead of '${CPP}'.
    -D	#define <define> to .h file.
    -I	Prepend <include dir> to standard #include dirs.
    -h	Show this help text.
    -o	Specifies the output file; '-' and '--' mean writing to
	stdout.
    -v	Verbous flag: show some information during processing." 1>&2
  exit 1
} # fnUsage

# ----------------------------------------------------------------------
# Funktion	fnTrimLispFile
# Argumente	---
# Beschreibung	Entfernt ueberfluessige Leerzeilen und -zeichen.
# ----------------------------------------------------------------------
fnTrimLispFile () {
  sed -n '
/^[^!-~]*$/ !b nempty
s/^[^!-~]*$//
p
:skip
/^[^!-~]*$/ {
  n
  b skip
}
:nempty
s/[^!-~]*$//
s/\([,`]\)[^!-~]*/\1/g
/[,`]$/ {
  N
  s/\([,`]\)[^!-~]*/\1/g
}
:rmblank
/@[	 ][	 ]*\([bghstn]\)[	 ]*@/ {
  s/[	 ]*@[	 ][	 ]*\([bghstn]\)[	 ]*@[	 ]*/@\1@/g
  b rmblank
}
/@[	 ]*\([bghstn]\)[	 ][	 ]*@/ {
  s/[	 ]*@[	 ]*\([bghstn]\)[	 ][	 ]*@[	 ]*/@\1@/g
  b rmblank
}
/@[	 ][	 ]*\([bghstn]\)[	 ][	 ]*@/ {
  s/[	 ][	 ]*@[	 ]*\([bghstn]\)[	 ][	 ]*@[	 ]*/@\1@/g
  b rmblank
}
:loopglu
/@g@/ {
 s/[	 ]*@g@[	 ]*//g
 b loopglu
}
s/\([-:]\)[	 ][	 ]*\([0-9a-z]\)/\1\2/g
s/[^!-~]*$//
s/@h@/ #/g
s/\([,`]\)[^!-~]*/\1/g
:loopspc
/@s@/ {
 s/@s@/ /g
 b loopspc
}
:loopnln
/@n@/ {
  h
  s/[^!-~]*@n@.*$//
  p
  g
  s/@n@/@newline@/
  s/^.*@newline@//
  b loopnln
}
s/^[	 ]*;[	 ]*$//
s/^\(#ident\)/;; \1/g
s/^\(#line\)/;; \1/g
s/^  *\((in-package\)/\1/
p'
} # fnTrimLispFile

# ----------------------------------------------------------------------
# Mainline
# ----------------------------------------------------------------------

trap "rm -f ${TMP}/${nPID}_${szScript}.*; exit 15" 1 2

unset szDefines szHeaderFile szLispFile
bVerbous='false'
szIncludes="${szDefaultIncludes}"

while [ $# -gt 0 ]; do
  case "$1" in
  '-CPP')	CPP="$2"; shift;;
  '-D')		szDefines="${szDefines} $1$2"; shift;;
  '-D'*)	szDefines="${szDefines} $1";;
  '-I')		szIncludes="$2:${szIncludes}"; shift;;
  '-I'*)	szIncludes="`echo \"$1\"|sed 's/^-I *//'`:${szIncludes}";;
  '-h')		fnUsage; exit 1;;
  '-o')		szLispFile="$2"; shift;;
  '+o')		unset szLispFile;;
  '-v')		bVerbous='true';;
  '+v')		bVerbous='false';;
  '-'*|'+'*)	echo "${szScript}: W01: Ignoring unknown option '$1'" 1>&2;;
  *)		szHeaderFile="$*"; break;;
  esac
  shift
done

if [ -z "${szDefines}" ]; then
  szDefines="${szDefaultDefines}"
fi

case "${szLispFile}" in
'-'|'--')	unset szLispFile;;
esac

echo "/* Junk C file generated by ${szScript} */
#include	<c2lisp.h>" > ${szTmpCfile}

if [ -z "${szHeaderFile}" ]; then
  cat >> ${szTmpCfile}
else
  for f in ${szHeaderFile}; do
    if [ -r "${f}" ]; then
      reldir="`dirname ${f}`"
      absdir="`cd ${reldir};pwd`"
      echo '#include	"'"${absdir}/`basename ${f}`"'"' >> ${szTmpCfile}
    else
      echo "${szScript}: E02: Can't read file ${f}" 1>&2
    fi
  done
fi

szCmdLine="${CPP}"
if ${bVerbous}; then
  szCmdLine="${szCmdLine} -v"
fi
szIncludes="`echo \"'-I${szIncludes}'\"|sed -e \"s/:/' -I'/g\"`"
szCmdLine="${szCmdLine} ${szDefines} ${szIncludes} '${szTmpCfile}'"

if [ -z "${szLispFile}" ]; then
  if ${bVerbous}; then
    echo "${szCmdLine}" 1>&2
  fi
  eval ${szCmdLine}|fnTrimLispFile
  nExitCode="$?"
else
  if ${bVerbous}; then
    echo "${szCmdLine} > ${szLispFile}" 1>&2
  fi
  case "`uname`" in
  *[cC][yY][gG][wW][iI][nN]*)
    eval ${szCmdLine}|fnTrimLispFile >${TMP}/${nPID}_${szScript}.cr
    dos2unix "${TMP}/${nPID}_${szScript}.cr" "${szLispFile}";;
  *)
    eval ${szCmdLine}|fnTrimLispFile >${szLispFile}
  esac
  nExitCode="$?"
fi

if [ ${nExitCode} -eq 0 ]; then
  unset szLispFile
fi
rm -f ${TMP}/${nPID}_${szScript}.* ${szLispFile}
exit ${nExitCode}

# Local variables:
# buffer-file-coding-system: iso-latin-1-unix
# End:
