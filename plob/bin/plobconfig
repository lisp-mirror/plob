#!/bin/sh
# 1996/10/02 Heiko Kirschke, Comp. Science Dept., University of Hamburg
#            mailto:Heiko.Kirschke@acm.org

# ----------------------------------------------------------------------
# Constants
# ----------------------------------------------------------------------
szScript='plobconfig'; export szScript
szSpaces='          '
nPID="$$"; export nPID
PWD="`pwd`"; export PWD

szConfDir='./conf'
szConfDefaultFile='make.vars.def'
szDefLisp='./src/allegro/defsystem-plob.lisp'
szConfLisp='./src/allegro/plob-defaults.lisp'
szEmail='Heiko.Kirschke@acm.org'

unset bDefaultClient bDefaultServer bClient bServer szUname

set +e
# set -vx

# ----------------------------------------------------------------------
# Function	fnEchoC
# Argument(s)	$*	String(s) to echo
# Description	Echo without a LF at end of line
# ----------------------------------------------------------------------
fnEchoC ()
{
  if [ -z "${szEcho}" ]; then
    szEcho='echo'
    if ( echo 'a\c'; echo 'b'; ) | grep 'ab' >/dev/null 2>&1; then
      szEchoOpt=''
      cEchoC='\c'
    else
      szEchoOpt="-n"
      cEchoC=''
    fi
  fi
  ${szEcho} ${szEchoOpt} "$*${cEchoC}"
} # fnEchoC

# ----------------------------------------------------------------------
# Function	fMoveFile
# Argument(s)	$1	source file
#		$2	destination file
# Description	Move a file
# ----------------------------------------------------------------------
fnMove ()
{
  if [ -n "${COMSPEC}" ]; then
    cp -p $1 $2
    rm -f $1
  else
    mv $1 $2
  fi
} # fnMove

# ----------------------------------------------------------------------
# Function	fnSearchPath
# Argument(s)	$1	name of program to search
# Description	Search a program in the PATH variable
# ----------------------------------------------------------------------
fnSearchPath ()
{
  if [ -x "$1" ]; then
    return 0
  fi
  if [ -z "${szPathList}" ]; then
    szPathList="`echo \"${PATH}\"|sed 's/:/ /g'`"
  fi
  for dir in ${szPathList}; do
    if [ -x "${dir}/$1" ]; then
      return 0
      break
    fi
  done
  return 1
} # fnSearchPath

# ----------------------------------------------------------------------
# Function	fnPing
# Argument(s)	$1	host to ping
# Description	Ping a host
# ----------------------------------------------------------------------
fnPing ()
{(
  szHost="$1"
  nReturn='0'
  if fnSearchPath ping; then
    case "${szopsys}" in
    'irix')
      ping -c 1 ${szHost} >/dev/null 2>&1
      nReturn="$?";;
    'sunos'|'solaris')
      ping ${szHost} >/dev/null 2>&1
      nReturn="$?";;
    *)
      : ;;
    esac
  fi
  return ${nReturn}
);} # fnPing

# ----------------------------------------------------------------------
# Function	fnHostname
# Argument(s)	none
# Description	Return the name of the current host
# ----------------------------------------------------------------------
fnHostname ()
{(
  hostname
) 2>/dev/null;} # fnHostname

# ----------------------------------------------------------------------
# Function	fnConfSearchKey
# Argument(s)	$1	filename
#		$2	key to search
#		$3	default for the data value if the key was not found
# Description	Scan file $1 for a macro assignment and echo
#		the assigment found to stdout
# ----------------------------------------------------------------------
fnConfSearchKey ()
{(
  szFile="$1"
  szKey="$2"
  szDefault="$3"
  sed -n "
s/[^ -~]$//
/^${szKey}[	 ]*=/ {
  s/^${szKey}[	 ]*=//
  s/['\"]//g
  p
  q
}
/^#define[	 ][	 ]*${szKey}[	 ]/ {
  s/^#define[	 ]*${szKey}[	 ]*//
  s/['\"]//g
  p
  q
}
\$ i\\
${szDefault}
" < ${szFile}
);} # fnConfSearchKey

# ----------------------------------------------------------------------
# Function	fnConfSetKey
# Argument(s)	$1	filename
#		$2	key to search
#		$3	new value of the key
# Description	Set the macro named by $2 in file $1
#		to the value of $3
# ----------------------------------------------------------------------
fnConfSetKey ()
{(
  szFile="$1"
  szKey="$2"
  szNewValue="$3"
  szTmpFile1="/tmp/${nPID}_1.txt"
  szTmpFile2="/tmp/${nPID}_2.txt"
  trap "rm -f ${szTmpFile1} ${szTmpFile2}; return 1" 1 2 15
  rm -f ${szTmpFile1} ${szTmpFile2}
  sed "
s/[^ -~]$//
/^${szKey}[	 ]*=[	 ]*['\"]/ {
  s|^\(${szKey}[	 ]*=[	 ]*\)\(.\).*\$|\1\2${szNewValue}\2|
  b copy
}
/^${szKey}[	 ]*=/ {
  s|^\(${szKey}[	 ]*=\).*\$|\1${szNewValue}|
  b copy
}
/^#define[	 ][	 ]*${szKey}[	 ]['\"]/ {
  s|^\(#define[	 ][	 ]*${szKey}[	 ]*\)\(['\"]\).*\$|\1\2${szNewValue}\2|
  b copy
}
/^#define[	 ][	 ]*${szKey}[	 ]/ {
  s|^\(#define[	 ][	 ]*${szKey}[	 ]*\).*\$|\1${szNewValue}|
  b copy
}
\$ {
  p
  s|^.*\$|${szKey}=${szNewValue}|
  w ${szTmpFile2}
  s|^.*\$||
  q
}
b end
:copy
  n
  b copy
:end" < ${szFile} > ${szTmpFile1}
  if [ -s "${szTmpFile2}" ]; then
    cat ${szTmpFile2} ${szTmpFile1} > ${szFile}
  else
    cat ${szTmpFile1} > ${szFile}
  fi
  rm -f ${szTmpFile1} ${szTmpFile2}
  trap 1 2 15
);} # fnConfSetKey

# ----------------------------------------------------------------------
# Function	fnLispSetKey
# Argument(s)	$1	name of LISP file
#		$2	key to search
#		$3	new value of the key
# Description	Set the parameter named by $1 in ./src/lisp/plob-defaults
#		to the value of $2
# ----------------------------------------------------------------------
fnLispSetKey ()
{(
  szFile="$1"
  szKey="$2"
  szNewValue="$3"
  szTmpFile="/tmp/${nPID}_1.lisp"
  trap "rm -f ${szTmpFile}; return 1" 1 2 15
  rm -f ${szTmpFile}
  sed "
s/[^ -~]$//
/^(def.*${szKey}/ {
  s|\(${szKey}\).*$|\1 \"${szNewValue}\"|
:loop
  n
  b loop
}" < ${szFile} > ${szTmpFile}
  fnMove ${szTmpFile} ${szFile}
  trap 1 2 15
);} # fnLispSetKey

# ----------------------------------------------------------------------
# Function	fnPrompt
# Argument(s)	$1	name of environment variable which will hold
#			the  answer
#		$2	default value
#		$3	question to print to stdout
#		$4	optional help text
# Description	Prompt a message and ask user for input
# ----------------------------------------------------------------------
fnPrompt ()
{
  while true; do
    if [ -z "$2" ]; then
      fnEchoC "
$3 "
    else
      fnEchoC "
$3 [$2] "
    fi
    if [ -n "$4" ]; then
      fnEchoC "(? help, ! shell escape,
   q quit) "
    else
      fnEchoC "(! for shell escape, q to quit) "
    fi
    read __szAnswer__
    if [ -z "${__szAnswer__}" ]; then
      __szAnswer__="$2"
    fi
    case "${__szAnswer__}" in
    '-')	__szAnswer__=''; break;;
    'q')	echo "
*** Exit from configuring PLOB! with error code 1" 1>&2
		exit 1;;
    '?')	if [ -n "$4" ]; then
		  echo "$4"
		else
		  echo 'Sorry, no extra help available.'
		fi;;
   '!')		${SHELL};;
   '!'*)	${SHELL} -c "`echo \"${__szAnswer__}\"|sed 's/^!//'`";;
    *)		break;;
    esac
  done
  eval $1="'${__szAnswer__}'"
  unset __szAnswer__
} # fnPrompt

# ----------------------------------------------------------------------
# Function	fnYesOrNoP
# Argument(s)	$1	default value
#		$2	question to print to stdout
#		$3	optional help text
# Description	Prompt a message and ask user for input of yes or no
# ----------------------------------------------------------------------
fnYesOrNoP ()
{
  case "$1" in
  [jJyY1]*)	set -- 'yes' "$2" "$3";;
  *)		set -- 'no'  "$2" "$3";;
  esac
  while true; do
    fnPrompt __szYesOrNo__ "$1" "$2" "$3"
    if [ -z "${__szYesOrNo__}" ]; then
      __szYesOrNo__="$1"
    fi
    case "${__szYesOrNo__}" in
    [jJyY]*)	unset __szYesOrNo__; return 0;;
    [nN]*)	unset __szYesOrNo__; return 1;;
    *)		echo "Please enter only 'y[es]' or 'n[o]'";
    esac
  done
}

# ----------------------------------------------------------------------
# Function	fnInstallBase
# Argument(s)	---
# Description	Base installation
# ----------------------------------------------------------------------
fnInstallBase ()
{
  echo "
PLOB! configuration and installation
PLOB! (C) 1994-1998 Heiko Kirschke ${szEmail}

This script will configure PLOB! to make it ready for use; optional,
compiling the client and server source code can also be done after
the configuration. The default answer is shown in square brackets;
optional help is available by entering a '?', shell escape by entering
a '!', entering '-' means an empty string."

  bStandard='true'
  while [ $# -gt 0 ]; do
    case "$1" in
    '-advanced'|'+standard')	bStandard='false';;
    '+advanced'|'-standard')	bStandard='true';;
    *)				break;;
    esac
    shift
  done

  fnGetUname
  szPlobDir="`pwd`"
  szBinDir='./bin'

  if [ ! -d "${szConfDir}" ]; then
    mkdir ${szConfDir}
  fi
  if [ ! -d "${szConfDir}/${szopsys}" ]; then
    mkdir ${szConfDir}/${szopsys}
  fi
  if [ ! -r "${szConfFile}" ]; then
    echo 'Looking for old configuration file, please wait ...'
    szOldConfFile="`ls -1t ../*/conf/${szopsys}/make.vars.in 2>/dev/null|head -1`"
    if [ -r "${szOldConfFile}" ]; then
      echo "Using old configuration file ${szOldConfFile}"
      cp -p ${szOldConfFile} ${szConfFile}
    fi
    if [ ! -r "${szConfFile}" ]; then
      if [ -r "${szConfDir}/${szopsys}/${szConfDefaultFile}" ]; then
        cp -p ${szConfDir}/${szopsys}/${szConfDefaultFile} ${szConfFile}
      elif [ -r "${szConfDir}/${szConfDefaultFile}" ]; then
        cp -p ${szConfDir}/${szConfDefaultFile} ${szConfFile}
      fi
    fi
  fi

  case "${szopsys}" in
  'win32')	szCC='cl'
		szDefaultCCs='';;
  'hpux')	szCC="`fnConfSearchKey ${szConfFile} CC CC`"
		szDefaultCCs='gcc CC aCC';;
  *)		szCC="`fnConfSearchKey ${szConfFile} CC gcc`"
		szDefaultCCs='gcc cc CC';;
  esac

  unset szNewCC
  for cc in ${szCC} ${szDefaultCCs}; do
    if fnSearchPath ${cc}; then
      szNewCC="${cc}"
      break
    fi
  done

  if ${bStandard}; then
    if [ -z "${szNewCC}" ]; then
      echo "
   *** Warning: Found no C compiler in your PATH, using default of '${szCC}'"
      szNewCC="${szCC}"
    fi
  else
    while true; do
      fnPrompt szNewCC "${szCC}" "\
A. What is the name of the C
   compiler" "\
   Enter the name of the C compiler to use, either gcc for GNU C or
   cc for the native C compiler or cl for Windows/NT. This must be
   an ANSI-compliant compiler. For WIN32, Microsoft Visual C version
   5.00 or above must be used."
      if fnSearchPath ${szNewCC}; then
        break
      else
        echo "\
  *** Error: Could not locate ${szNewCC} in your PATH.
             Please enter another C compiler."
      fi
    done
  fi

  case "${szNewCC}" in
  *'cl')	szCPPFLAGS='-EP'
		szCOPTPIC=''
		szCOPTDEB='-Zi'
		szCOPTOPT='-Ox';;
  *'gcc')	szCPPFLAGS='-E -P'
		szCOPTPIC='-fPIC'
		szCOPTDEB='-g2'
		szCOPTOPT='-O2';;
  *)		case "${szopsys}" in
		'hpux')	szCPPFLAGS='-E';;
		*)	szCPPFLAGS='-E -P';;
		esac
		szCOPTPIC="`fnConfSearchKey ${szConfFile} COPTPIC`"
		szCOPTDEB="`fnConfSearchKey ${szConfFile} COPTDEB`"
		szCOPTOPT="`fnConfSearchKey ${szConfFile} COPTOPT`";;
  esac

  if ${bStandard}; then
    szNewCOPTPIC="${szCOPTPIC}"
  elif [ -z "${szCOPTPIC}" ]; then
    unset szNewCOPTPIC
  else
    fnPrompt szNewCOPTPIC "${szCOPTPIC}" "\
B. What is the C compiler option for generating position-independent
   code" "\
   Enter the option which must be passed to the C compiler to generate
   position-independent code. This kind of code is needed for shared
   libraries. If your system doesn't need position-independent code
   for shared libraries, enter a '-' here.
   Consult the man pages of ${szNewCC} for details if your system
   needs position-independent code on shared libraries."
  fi

  if ${bStandard}; then
    szNewCOPTDEB="${szCOPTDEB}"
  else
    fnPrompt szNewCOPTDEB "${szCOPTDEB}" "\
C. What is the C compiler option for generating code with debug
   information" "\
   Enter the option which must be passed to the C compiler to generate
   code with debug informations; specify '-' if you are not interested
   in generating code with debug informations at all."
  fi

  if ${bStandard}; then
    szNewCOPTOPT="${szCOPTOPT}"
  else
    fnPrompt szNewCOPTOPT "${szCOPTOPT}" "\
D. What is the C compiler option for generating optimized
   code" "\
   Enter the option which must be passed to the C compiler to generate
   optimized code; specify '-' if you are not interested in generating
   optimized code at all."
  fi

  case "${szNewCC}" in
  *'cl')	if fnSearchPath gcc; then
		  szCPPFLAGS='-E -P'
  		  szCPP="gcc ${szCPPFLAGS}"
		else
		  szCPPFLAGS='-EP'
  		  szCPP="\$(CC) ${szCPPFLAGS}"
		fi;;
  *)		if fnSearchPath gcc; then
		  szCPPFLAGS='-E -P'
  		  szCPP="gcc ${szCPPFLAGS}"
		else
		  szCPP="\$(CC) ${szCPPFLAGS}"
		fi;;
  esac

  if ${bStandard}; then
    szNewCPP="${szCPP}"
  else
    fnPrompt szNewCPP "${szCPP}" "\
E. What is the name of the C
   precompiler" "\
   Enter here the name of the C precompiler. This must be an ANSI-compliant
   C precompiler, i.e. it must support token pasting and stringinizing
   as defined by ANSI. The output of the precompiler must be send to
   stdout. For simple cross-platform development, specify 'gcc -E -P'
   here."
  fi

  szLDLIBS="`fnConfSearchKey ${szConfFile} LDLIBS`"
  if ${bStandard}; then
    szNewLDLIBS="${szLDLIBS}"
  else
    fnPrompt szNewLDLIBS "${szLDLIBS}" "\
F. What extra libraries should be added to the link
   call" "\
   Enter here the extra libraries which should be passed additionally
   to the linker, obeying the '-l<library>' syntax.

   This option is not needed for a standard installation; it is left for
   installation of PLOB on not yet supported platforms."
  fi

  if ${bStandard}; then
    szNewPlobDir="`(cd ${szPlobDir}; pwd)`"
  else
    fnPrompt szNewPlobDir "${szPlobDir}" "\
G. What is the PLOB! installation
   directory" "\
   This is the directory containing all PLOB subdirectories."
    if [ -d "${szNewPlobDir}/src/include/allegro" ]; then
      szNewPlobDir="`(cd ${szNewPlobDir}; pwd)`"
    else
      echo "\
  *** Warning: ${szNewPlobDir} might be an invalid
               installation directory."
    fi
  fi

  if [ "${bDefaultClient}" = 'yes' -a "${bDefaultServer}" = 'yes' ]; then
    szDefaultClientServer='both client and server'
  elif [ "${bServer}" = 'yes' ]; then
    szDefaultClientServer='only server'
  else
    szDefaultClientServer='only client'
  fi
  bClient="`fnConfSearchKey ${szConfFile} HasClient dontknow`"
  if [ -z "${bClient}" -o "${bClient}" = 'dontknow' ]; then
    bClient="${bDefaultClient}"
  fi
  bServer="`fnConfSearchKey ${szConfFile} HasServer dontknow`"
  if [ -z "${bServer}" -o "${bServer}" = 'dontknow' ]; then
    bServer="${bDefaultServer}"
  fi
  if [ "${bClient}" = 'yes' -a "${bServer}" = 'yes' ]; then
    szClientServer='both'
  elif [ "${bServer}" = 'yes' ]; then
    szClientServer='server'
  else
    szClientServer='client'
  fi

  if ${bStandard}; then
    szNewClientServer="${szClientServer}"
  else
    while true; do
      fnPrompt szNewClientServer "${szClientServer}" "\
H. Should the compilation be done for the client, the server or
   both (on your system, ${szDefaultClientServer} installation is
   supported)" "\
   Specifying 'client' will only compile the client code;
   specifying 'server' will only compile the server code;
   specifying 'both' will compile both the client and server code"
      case "${szNewClientServer}" in
      [bB]*|[cC]*[sS]*|[sS]*[cC]*)
		szNewClientServer='both'
		if [ "${bDefaultServer}" = 'no' ]; then
		  echo "\
Error: Server installation not supported on ${szOpsys}."
		else
		  bClient='yes'
		  bServer='yes'
		  break
		fi;;
      [cC]*)	szNewClientServer='client'
		bClient='yes'
		bServer='no'
		break;;
      [sS]*)	szNewClientServer='server'
		if [ "${bDefaultServer}" = 'no' ]; then
		  echo "\
Error: Server installation not supported on ${szOpsys}."
		else
		  bClient='no'
		  bServer='yes'
		  break
		fi;;
      *)	echo "\
Error: Specify client, server or both.";;
      esac
    done
  fi

  szConfDataTrans="`fnConfSearchKey ${szConfFile} DATATRANS 'tcp'`"
  if ${bStandard}; then
    szNewDataTrans="${szConfDataTrans}"
  else
    fnPrompt szNewDataTrans "${szConfDataTrans}" "\
I. What default transport protocol should be
   used" "\
   Enter here the default transport protocol which should be used for
   the communication between client and server. On 99% of all UNIX
   systems, the one and only usable protocol will be tcp.

   Do not try to use udp as transport protocol, since this won't ensure
   correct sequencing of data and will fail on data blocks exceeding
   a block size of 1502 bytes."
  fi

  szConfDataHost="`fnConfSearchKey ${szConfFile} DATAHOST 'localhost'`"
  while true; do
    fnPrompt szNewDataHost "${szConfDataHost}" "\
J. What is the name of the host where the PLOB! server will
   run" "\
   On this host, the PLOB! daemon process will run and serve the
   client requests done to the persistent object database. It should
   be a fully qualified Internet address, e.g. ki8.informatik.uni-hamburg.de
   If the server and client process will run on the same machine, you
   can specify localhost here."
    if fnPing ${szNewDataHost}; then
      break
    else
      echo "\
Error: The host ${szNewDataHost} doesn't respond to ping.
   Please enter another host name."
    fi
  done

  szConfDataRoot="`fnConfSearchKey ${szConfFile} DATAROOT ${PWD}`"
  if [ "${bServer}" = 'yes' ]; then
    while true; do
      fnPrompt szNewDataRoot "${szConfDataRoot}" "\
K. Where should the root directory of all persistent
   object databases be placed on the server
   host" "\
   This is the root directory on the server host ${szNewDataHost}
   which will contain the PLOB database directories. It must
   be an existing directory on the host ${szNewDataHost},
   at least at server installation time. To get better performance,
   it should be a local mounted (i.e. no NFS mounted) directory."
      if [ "${szNewDataHost}" = 'localhost' ]; then
        if [ -d "${szNewDataRoot}" ]; then
          szNewDataRoot="`(cd ${szNewDataRoot}; pwd)`"
          break
        else
          echo "\
Error: There is no directory ${szNewDataRoot} on ${szNewDataHost}.
   Please create the directory (e.g. with a shell escape) or
   enter another directory."
        fi
      else
        echo "\
   (Please note that the installation script doesn't check if the
    directory you entered here is existing on the server host;
    if necessary, it will be created later when 'make server'
    is called.)"
        break
      fi
    done
  else
    unset szNewDataRoot
  fi

  szConfDataBase="`fnConfSearchKey ${szConfFile} DATABASE 'database'`"
  if [ "${szConfDataBase}" = 'randomname' ]; then
    make CC="${szNewCC}" randomname >/dev/null 2>&1
    PATH="${PATH}"; export PATH;
    szConfDataBase="`randomname`"
  fi

  if ${bStandard}; then
    szNewDataBase="${szConfDataBase}"
  else
    fnPrompt szNewDataBase "${szConfDataBase}" "\
L. What should be used as the default database by the
   client" "\
   This is the default database on the host ${szNewDataHost}
   which will be opened by the client. It is a directory relative
   to the root directory of the server, i.e. is must
   be an existing subdirectory on the host ${szNewDataHost}
   in its database root directory, at least at server installation time."
    echo "\
   (Please note that the installation script doesn't check if
    the directory you entered here is existing on the server host;
    if necessary, it will be created later.)"
  fi

  szConfAuth="`fnConfSearchKey ${szConfFile} HasAuth AUTH_NON`"
  if [ -z "${szConfAuth}" -o "${szConfAuth}" = 'dontknow' ]; then
      szConfAuth='AUTH_NON'
  fi

  if ${bStandard}; then
    szNewAuth="${szConfAuth}"
  else
    while true; do
      fnPrompt szNewAuth "${szConfAuth}" "\
M. What kind of authentication should be used by the client and
   (at least) by the server (non, sys or
   des)" "\
   Specify here the kind of authentication which should be used when a
   client logs into a server.

   For the client: non means that the client won't pass any authentication,
   sys for passing the standard UNIX authentication and des for passing
   DES authentication. If DES is used, the server process has to be
   started by root.

   For the server: non means that the server will accept non-, sys- or
   DES-authenticated clients, sys for accepting sys- or DES-authenticated
   clients and DES for accepting only DES-authenticated clients.

   Please note that Solaris supports non-, sys- or DES-authentication,
   IRIX supports only non- and DES-authentication and Linux supports
   only non-authentication. So, for a server which should serve distinct
   OS-specific clients, select non."
      case "${szNewAuth}" in
      *[nN][oO]*)	szNewAuth='AUTH_NONE'
			break;;
      *[sS][yY]*)	szNewAuth='AUTH_SYS'
			break;;
      *[dD][eE]*)	szNewAuth='AUTH_DES'
			break;;
      *)		echo "\
Error: Specify non, sys or des.";;
      esac
    done
  fi

  szConfFranzDir="`fnConfSearchKey ${szConfFile} FRANZCL`"
  while true; do
    if [ -d "${szConfFranzDir}" ]; then
      bFranz='yes'
      szNewFranzDir="${szConfFranzDir}"
    else
      set -- '' /opt/cl/Franz*CL* /opt/cl/*acl* /opt/*acl* /usr/local/src/*acl* /usr/local/*acl*; shift
      bFranz='no'
      unset szNewFranzDir
      while [ "$#" -gt '0' ]; do
        if [ -d "$1/home" ]; then
          bFranz='yes'
          szNewFranzDir="$1"
	  break
	else
	  shift
        fi
      done
    fi
    if fnYesOrNoP "${bFranz}" 'M. Is Allegro LISP installed on this
   system?' "\
   If installed, PLOB! will be compiled to run under Allegro."; then
      fnPrompt szNewFranzDir "${szNewFranzDir}" "\
N. What is the Allegro LISP installation
   directory" "\
   This is the directory where Allegro Common LISP is installed."
      if [ -z "${szNewFranzDir}" ]; then
        :
      elif [ -d "${szNewFranzDir}" ]; then
        szNewFranzDir="`(cd ${szNewFranzDir}; pwd)`"
        break
      else
        echo "\
Error: There is no ${szNewFranzDir} directory.
   Please enter another directory."
      fi
    else
      unset szNewFranzDir
      break
    fi
  done

  if fnSearchPath lispworks; then
    bHarlequinCL='yes'
  else
    bHarlequinCL='no'
  fi
  if fnYesOrNoP "${bHarlequinCL}" 'O. Is LispWorks LISP installed on this
   system?' "\
   If installed, PLOB! will be compiled to run under LispWorks."; then
    bHarlequinCL='yes'
  else
    bHarlequinCL='no'
  fi

  echo "\

About to configure PLOB! to the following settings:

     Operating system:                  ${szOPSYS}

     * C compiler:                      ${szNewCC}
     * C option pos.-indep. code:       ${szNewCOPTPIC}
     * C option code w/ debug:          ${szNewCOPTDEB}
     * C option code w/ optimization:   ${szNewCOPTOPT}
     * C precompiler:                   ${szNewCPP}"
 if [ -n "${szNewLDLIBS}" ]; then
   echo "\
     * Extra linker libraries:          ${szNewLDLIBS}"
  fi
  echo "
     * PLOB root directory:             ${szNewPlobDir}
     * Install for client/server/both:  ${szNewClientServer}
     * Transport protocol:              ${szNewDataTrans}
     PLOB! database server host:        ${szNewDataHost}"
  if [ -n "${szNewDataRoot}" ]; then
    echo "\
     PLOB! database server directory:   ${szNewDataRoot}"
  fi
  echo "\
     * PLOB! default database:          ${szNewDataBase}
     * PLOB! authentication:            ${szNewAuth}"
  if [ -n "${szNewFranzDir}" ]; then
   echo "\
     Allegro Common LISP at:            ${szNewFranzDir}"
  fi
  if [ "${bHarlequinCL}" = 'yes' ]; then
   echo "\
     LispWorks Common LISP installed."
  fi

  if fnYesOrNoP 'no' 'Are these configuration settings ok?' "\
   Replying with 'yes' will write the above configuration
   (destructively) into the corresponding make and source files;
   replying with 'no' will leave the current configuration
   unchanged and will abend the configuration. Configuration
   parameters marked with '*' can only be changed when
   doing an advanced configuration by calling 'make advanced-config'. "; then
    :
  else
    echo "
*** Nothing changed; re-execute for a new configuration of PLOB!"
    return 2
  fi

  cp -p ${szConfFile} ${szConfFile}.old
  cp -p ${szDefLisp} ${szDefLisp}.old
  cp -p ${szConfLisp} ${szConfLisp}.old
  trap "mv ${szConfFile}.old ${szConfFile}; \
mv ${szDefLisp}.old ${szDefLisp}; \
mv ${szConfLisp}.old ${szConfLisp}; \
exit 1" 1 2 15
  echo "
Patching ${szConfFile} ..."
  fnConfSetKey ${szConfFile} CC "${szNewCC}"
  fnConfSetKey ${szConfFile} CPP "${szNewCPP}"
  fnConfSetKey ${szConfFile} LDLIBS "${szNewLDLIBS}"
  szCPP="`sed -n -f ${szBinDir}/echo-cpp.sed ${szConfFile}|make -f - echo-CPP|sed -n -f ${szBinDir}/extract-cpp.sed`"
  if [ -z "${szCPP}" ]; then
    szCPP="${szNewCC} ${szCPPFLAGS}"
  fi
  if fnSearchPath ${szCPP}; then
    :
  else
    echo "\
Error: Could not locate ${szCPP} in your PATH.
       Please enter another C precompiler."
    exit 15
  fi
  fnConfSetKey ${szConfFile} HasAuth "${szNewAuth}"
  fnConfSetKey ${szConfFile} HasClient "${bClient}"
  if [ -n "${szNewFranzDir}" ]; then
    fnConfSetKey ${szConfFile} HasFranzCL 'yes'
    fnConfSetKey ${szConfFile} FRANZCL "${szNewFranzDir}"
  else
    fnConfSetKey ${szConfFile} HasFranzCL 'no'
  fi
  case "${szNewCC}" in
  *'gcc'*)	fnConfSetKey ${szConfFile} HasGcc 'yes';;
  *)		fnConfSetKey ${szConfFile} HasGcc 'no';;
  esac
  if ( make -v foo 2>&1 ) | grep '[gG][nN][uU].*[mM][aA][kK][eE]' >/dev/null 2>&1 ; then
    fnConfSetKey ${szConfFile} HasGmake 'yes'
    bGmake=true
  else
    fnConfSetKey ${szConfFile} HasGmake 'no'
    bGmake=false
  fi
  fnConfSetKey ${szConfFile} HasHarlequinCL "${bHarlequinCL}"
  if fnSearchPath latex; then
    fnConfSetKey ${szConfFile} HasLaTeX 'yes'
  else
    fnConfSetKey ${szConfFile} HasLaTeX 'no'
  fi
  fnConfSetKey ${szConfFile} HasOpSys "has${szOpsys}"
  if ( make -f - foo.bar | grep 'yes it has'  > /dev/null ) <<EOT
%.bar:
	@echo yes it has
foo.bar:
EOT
  then
    fnConfSetKey ${szConfFile} HasPercentFeature 'yes'
  else
    fnConfSetKey ${szConfFile} HasPercentFeature 'no'
  fi
  if fnSearchPath ranlib; then
    fnConfSetKey ${szConfFile} HasRanlib 'yes'
  else
    fnConfSetKey ${szConfFile} HasRanlib 'no'
  fi
  fnConfSetKey ${szConfFile} HasServer "${bServer}"
  if [ -r '/include/siginfo.h' -o -r '/usr/include/siginfo.h' ]; then
    fnConfSetKey ${szConfFile} HasSiginfo 'yes'
  else
    fnConfSetKey ${szConfFile} HasSiginfo 'no'
  fi
  fnConfSetKey ${szConfFile} COPTPIC "${szNewCOPTPIC}"
  fnConfSetKey ${szConfFile} COPTDEB "${szNewCOPTDEB}"
  fnConfSetKey ${szConfFile} COPTOPT "${szNewCOPTOPT}"
  fnConfSetKey ${szConfFile} PLOBDIR "${szNewPlobDir}"
  fnConfSetKey ${szConfFile} OPSYS "${szOPSYS}"
  fnConfSetKey ${szConfFile} opsys "${szopsys}"
  fnConfSetKey ${szConfFile} DATATRANS "${szNewDataTrans}"
  fnConfSetKey ${szConfFile} DATAHOST "${szNewDataHost}"
  if [ -n "${szNewDataRoot}" ]; then
    fnConfSetKey ${szConfFile} DATAROOT "${szNewDataRoot}"
  fi
  fnConfSetKey ${szConfFile} DATABASE "${szNewDataBase}"
  echo "\
Patching ${szDefLisp} and
         ${szConfLisp} ..."
  fnLispSetKey ${szDefLisp} '+plob-dir+' "${szNewPlobDir}"
  fnLispSetKey ${szConfLisp} '\*default-database-url\*' "${szNewDataTrans}://${szNewDataHost}/${szNewDataBase}"
  trap 1 2 15

  if [ ! -r "${szopsys}/makefile" ]; then
    echo '
Making bootstrap makefile ...'
     plobimake -CPP "${szCPP}" -I ${szConfDir}/${szopsys} -o ${szopsys}/makefile makefile.in
  fi

  echo '
Making initialization ...'
  make -f ${szopsys}/makefile initial

  if fnYesOrNoP 'yes' "\
P. Should the binaries delivered with this distribution be used for the
   local installation?" "\
   When replying with 'yes', the binaries delivered within this
   distribution will be installed. A recompilation can be done by calling
   'make' later in this or the 'src' subdirectory to compile the
   client resp. server code.

   Replying with 'no' will recompile the client and server C code.
   Normally, this won't be necessary, since all binaries of the client's
   and server's C code are contained within the distribution."; then
    :
  else
    if fnYesOrNoP 'yes' "\
Q. Should the makefiles delivered with this distribution be used for the
   local compilation?" "\
   When replying with 'yes', the makefiles delivered within this
   distribution will be used for recompilation. These files might not
   reflect the local configuration specified for this local installation.

   Replying with 'no' will try to rebuild all makefiles to match the
   current configuration exactly.

   *** NOTE: Since some C compilers have strange opinions on how to
             preprocess a C file, rebuilding the makefiles could fail.
             Using 'gcc -E -P' is safe. If you want to specify another
             C preprocessor, quit this question and call
             'make advanced-config' from the shell"; then
      :
    else
      echo '
Making makefiles ...'
      touch `find . -name '*.in' -print`
      if ${bGmake}; then
        szMakeflags='--no-print-directory'
      else
        szMakeflags=
      fi
      make ${szMakeflags} -f ${szopsys}/makefile makefiles
    fi
      echo '
Making all ...'
    make -f ${szopsys}/makefile all
  fi
  if [ "${szNewDataHost}" = 'localhost' ]; then
    if ${bStandard} || fnYesOrNoP 'yes' "\
R. Should 'make server' be called now?" "\
   Replying with 'yes' will install and start the server on your
   local machine; when replying with 'no', you can call 'make server'
   later in this directory to install the server."; then
      make -f ${szopsys}/makefile server
    fi
  fi
  echo "
Now continue with the LISP client installation, as described in the
installation guide."
  return 0;
} # fnInstallBase

# ----------------------------------------------------------------------
# Function	fnInstallServer
# Argument(s)	---
# Description	Server installation
# ----------------------------------------------------------------------
fnInstallServer ()
{
  if [ -z "${szConfFile}" ]; then
    fnGetUname
  fi
  if [ -n "$1" ]; then
    szConfDataHost="$1"
  else
    szConfDataHost="`fnConfSearchKey ${szConfFile} DATAHOST 'localhost'`"
  fi

  echo "
PLOB! server configuration and installation
PLOB! (C) 1994-1998 Heiko Kirschke ${szEmail}

This script will try to install the PLOB! server on host
${szConfDataHost}. The default answer is shown in
square brackets; optional help is available by entering a '?',
shell escape by entering a '!', entering '-' means an empty string.
"
  # Check if this script runs on the server host:
  szStrippedHost="`echo "${szConfDataHost}"|sed 's/^\([^.]*\)\..*$/\1/'`"
  szHostname="`fnHostname`"
  if [ -n "${szHostname}" -a \
       "${szStrippedHost}" != 'localhost' -a \
       "${szStrippedHost}" != "${szHostname}" ]; then
    if fnYesOrNoP 'yes' "\
Looks as if this host (`hostname`) is not the host specifed 
at PLOB! configuration (${szConfDataHost}).
Continue server installation?"; then
      :
    else
      return 1
    fi
  fi
} # fnInstallServer

# ----------------------------------------------------------------------
# Function	fnStartServer
# Argument(s)	---
# Description	Server start
# ----------------------------------------------------------------------
fnStartServer ()
{
  if [ -z "${szConfFile}" ]; then
    fnGetUname
  fi
  if [ -n "$1" ]; then
    szConfDataRoot="$1"
  else
    szConfDataRoot="`fnConfSearchKey ${szConfFile} DATAROOT ${PWD}`"
  fi

  # Ask if the daemon should be started:
  if [ -x "${szConfDataRoot}/plobd" ]; then
    if fnYesOrNoP 'yes' 'Should a PLOB! daemon be [re]started now?' "\
   If not started now, a daemon can be started later by using the script
   ${szConfDataRoot}/plobdadmin, see its help text
   for further details."; then
      ${szConfDataRoot}/plobdadmin -start
    fi
  fi
  return 0
} # fnStartServer

# ----------------------------------------------------------------------
# Function	fnFindFiles
# Argument(s)	---
# Description	Find all 'interesting' files for the .tar archive
# ----------------------------------------------------------------------
fnFindFiles ()
{
 (
  bBootstrap=false
  while [ "$#" -gt '0' ]; do
    case "$1" in
    '-b')	bBootstrap=true;;
    '+b')	bBootstrap=false;;
    '--')	shift; break;;
    [-+]*)	echo "${szScript}:fnFindFiles: Ignoring unknon option '$1'." 1>&2;;
    *)		break;;
    esac
    shift
  done
  szPlob="$1"
  if ${bBootstrap}; then
    szSuppressBootstrap="
      -name 'mail' -prune -o \
      -name 'oncrpc-1.12' -prune -o"
  else
    szSuppressBootstrap=''
  fi
  szSuppressDirectories="\
    ${szSuppressBootstrap} \
    -name 'auto' -prune -o \
    -name 'tex' -prune -o \
    -name 'html' -prune -o \
    -name 'new' -prune -o \
    -name 'old' -prune -o \
    -name 'patches' -prune -o \
    -name 'ps' -prune -o \
    -name 'pdf' -prune -o \
    -name 'save' -prune"
  szSuppressFiles="\
    '!' -name 'core' -a \
    '!' -name 'randomname' -a \
    '!' -name 'TAGS' -a \
    '!' -name '*~' -a \
    '!' -name '.gdb*' -a \
    '!' -name '.*~' -a \
    '!' -name '#*' -a \
    '!' -name 'make.*' -a \
    '!' -name 'oobr*' -a \
    '!' -name '*save*' -a \
    '!' -name '*.aux' -a \
    '!' -name '*.dvi' -a \
    '!' -name '*.fasl' -a \
    '!' -name '*.fsl' -a \
    '!' -name '*.gz' -a \
    '!' -name '*.aux' -a \
    '!' -name '*.i' -a \
    '!' -name '*.ilk' -a \
    '!' -name '*.log' -a \
    '!' -name '*.lof' -a \
    '!' -name '*.o' -a \
    '!' -name '*.obj' -a \
    '!' -name '*.old' -a \
    '!' -name '*.opt' -a \
    '!' -name '*.pdb' -a \
    '!' -name '*.ps' -a \
    '!' -name '*.saved' -a \
    '!' -name '*.tar' -a \
    '!' -name '*.tar.gz' -a \
    '!' -name '*.toc' -a \
    '!' -name '*.txt' -a \
    '!' -name '*.ufsl' -a \
    '!' -name '*.wfasl' -a \
    '!' -name '*.zip'"
  eval find ./${szPlob}/conf \
    ${szSuppressDirectories} -o \
    "'('" -type f -o -type l "')'" -a \
    "'('" "'!'" -name 'make.vars.in' -a -name 'make.*.in' -o \
          -name 'make.vars.def' -o \
	  ${szSuppressFiles} "')'" -print
  find ./${szPlob} -name makefile -print
  if ${bBootstrap}; then :; else
    eval find ./${szPlob}/ps \
      "'('" -type f -o -type l "')'" -a \
      "'('" "'!'" -name 'bericht.ps' -a \
	    "'!'" -name 'buch.ps' -a \
	    -name '*.html' -o -name '*.ps' -o -name '*.pdf' -o \
	    ${szSuppressFiles} "')'" -print
  fi
  echo ${szPlob}/make.bat
  if ${bBootstrap}; then :; else
    find ./${szPlob} -name oncrpc.lib -print
    find ./${szPlob} -name oncrpc.dll -print
  fi
  eval find ./${szPlob} \
    ${szSuppressDirectories} \
    -name "'conf'" -prune -o \
    -name "'irix'" -prune -o \
    -name "'linux'" -prune -o \
    -name "'solaris'" -prune -o \
    -name "'win32'" -prune -o \
    "'('" -type f -o -type l "')'" -a \
    ${szSuppressFiles} -a \
    "'!'" -name "'plobd'" -a \
    "'!'" -name "'*.a'" -a \
    "'!'" -name "'*.dll'" -a \
    "'!'" -name "'*.empty'" -a \
    "'!'" -name "'*.lib'" -a \
    "'!'" -name "'*.so'" -print
 )|sed 's|^[.][/]||'|sort|uniq
} # fnFindFiles

# ----------------------------------------------------------------------
# Function	fnMakeAbsPath
# Argument(s)	Filename(s)
# Description	Make the directory of filename(s) passed absolute
# ----------------------------------------------------------------------
fnMakeAbsPath ()
{
  for f in $*; do
    cd `dirname $f`
    echo `pwd`/`basename $f`
  done
} # fnMakeAbsPath

# ----------------------------------------------------------------------
fnCmpFiles ()
{(
  bVerbose="$1"
  szOldTmpFile="$2"
  szTmpFile="$3"
  szOldTarDir="$4"
  diff ${szOldTmpFile} ${szTmpFile}|while read line; do
    case "${line}" in
    *'>'*)	szNewFile="`echo "${line}"|sed 's/^[	 ]*>[	 ]*//'`"
	        echo "${szNewFile}"
		if ${bVerbose}; then
		  echo "${szScript}:  Adding file: ${szNewFile}" 1>&2
		fi;;
    esac
  done
  while read file; do
    if [ -d "${file}" ]; then
      :
    elif [ -r "${file}" ]; then
      if cmp -s ${szOldTarDir}/${file} ${file} > /dev/null; then
	:
      else
	echo "${file}"
        if ${bVerbose}; then
	  echo "${szScript}: File changed: ${file}" 1>&2
	fi
      fi
    elif ${bVerbose}; then
      echo "${szScript}: Dropped file: ${file}" 1>&2
    fi
  done < ${szOldTmpFile}
);}

# ----------------------------------------------------------------------
# Function	fnShipOut
# Argument(s)	---
# Description	Pack all source code into a .tar file
# ----------------------------------------------------------------------
fnShipOut ()
{
 (
  echo "
PLOB! tar
PLOB! (C) 1994-1998 Heiko Kirschke ${szEmail}"
  unset szOldTarFile szTarFile
  bBootstrap=false
  szBootstrap=''
  bListOnly=false
  bVerbose=true
  while [ "$#" -gt '0' ]; do
    case "$1" in
    '-b')	bBootstrap=true
		szBootstrap="$1";;
    '+b')	bBootstrap=false
		szBootstrap="$1";;
    '-p')	szOldTarFile="`fnMakeAbsPath $2`"; shift;;
    '-l')	bListOnly=true;;
    '+l')	bListOnly=false;;
    '-v')	bVerbose=true;;
    '+v')	bVerbose=false;;
    '--')	shift; break;;
    [-+]*)	echo "${szScript}:fnShipOut: Ignoring unknon option '$1'." 1>&2;;
    *)		break;;
    esac
    shift
  done
  fnGetUname
  szPlobDir="`pwd`"
  szConfPlobDir="`fnConfSearchKey ${szConfFile} PLOBDIR ${szPlobDir}`"
  szTmpFile="/tmp/$$_mak.mak"
  trap "rm -f ${szTmpFile}" 0 2
  cd ${szConfPlobDir}/..
  szPlob="`basename ${szConfPlobDir}`"
  if [ -n "$1" ]; then
    szTarFile="`fnMakeAbsPath $1`"
  else
    szTarFile="`fnMakeAbsPath ${szPlob}.tar`"
  fi
  szAllLibs="`make -f ./${szPlob}/lib/${szopsys}/makefile echo-libs|sed -n '
/>>aa>>/ {
  s/^.*>>aa>>//
  s/<<zz<<.*$//
  p
  q
}'`"
  echo "\
CONFDIR=./${szPlob}/${szConfDir}
LIBDIR=./${szPlob}/lib
BINDIR=./${szPlob}/bin/${szopsys}
STDTARGET=copy_back_binaries
\$(STDTARGET)::
\$(STDTARGET)::\$(CONFDIR) \$(CONFDIR)/${szopsys}
\$(CONFDIR) \$(CONFDIR)/${szopsys}:
	mkdir \$@" > ${szTmpFile}
  for l in ${szAllLibs}; do
    echo "\
\$(STDTARGET)::\$(CONFDIR)/$l
\$(CONFDIR)/$l:\$(LIBDIR)/$l
	cp -p \$(LIBDIR)/$l \$@"
  done >> ${szTmpFile}
  case "${szopsys}" in
  'win32')
    szExe='.exe';;
  *)
    szExe=;;
  esac
  if [ -r ./${szPlob}/bin/${szopsys}/plobd${szExe} ]; then
    echo "\
\$(STDTARGET)::\$(CONFDIR)/${szopsys}/plobd${szExe}
\$(CONFDIR)/${szopsys}/plobd${szExe}:\$(BINDIR)/plobd${szExe}
	cp -p \$(BINDIR)/plobd${szExe} \$@" >> ${szTmpFile}
  fi
  if [ -r ./${szPlob}/bin/${szopsys}/plobdadmin${szExe} ]; then
    echo "\
\$(STDTARGET)::\$(CONFDIR)/${szopsys}/plobdadmin${szExe}
\$(CONFDIR)/${szopsys}/plobdadmin${szExe}:\$(BINDIR)/plobdadmin${szExe}
	cp -p \$(BINDIR)/plobdadmin${szExe} \$@" >> ${szTmpFile}
  fi
  make -f ${szTmpFile}
  rm -f ${szTmpFile}
  szAllFiles="`fnFindFiles ${szBootstrap} ${szPlob}`"
  chmod 644 ${szAllFiles}
  szAllDirectories="`for f in ${szAllFiles}; do dirname $f; done|sort -u`"
  chmod 755 ${szAllDirectories}
  for f in ${szPlob}/bin/*; do
    if [ -f "$f" ] && head -1 "$f" | grep '^#!/' > /dev/null 2>&1; then
      chmod ugo+x $f
    fi
  done
  for f in ${szPlob}/conf/*/*; do
    case "`basename $f`" in
    *.so|plobd|plobdadmin)	chmod ugo+x $f;;
    esac
  done
  chmod ugo+x `find ${szPlob} -name mk -print`
  unset szRmOldTarFile szRmOldTarDir
  szOldTarDir="/tmp/plob_old_$$"
  szOldNum="`echo "${szOldTarFile}"|sed -n 's|^.*\([0-9][0-9.]*[0-9]\)[^/]*$|\1|p'`"
  case "${szOldTarFile}" in
  '')		unset szOldTarDir;;
  *.tar.gz)	if ${bVerbose}; then
		  fnEchoC "${szScript}: Expanding ${szOldTarFile} ..." 1>&2
		fi
		trap "rm -f /tmp/plob_old_$$.tar" 0 2
		gunzip -c ${szOldTarFile} > /tmp/plob_old_$$.tar
		if ${bVerbose}; then
		  echo " done!" 1>&2
		fi
	        szOldTarFile="/tmp/plob_old_$$.tar"
	        szRmOldTarFile="${szOldTarFile}"
		szRmOldTarDir="${szOldTarDir}";;
  *.tar)	: ;;
  *)		if [ -d "${szOldTarFile}" ]; then
		  szOldTarDir="${szOldTarFile}"
	        else
		  unset szOldTarFile szOldTarDir
		fi;;
  esac
  case "${szOldTarFile}" in
  *.tar)	# Extract .tar file:
		if [ ! -d "${szOldTarDir}" ]; then
		  mkdir ${szOldTarDir}
		fi
		if ${bVerbose}; then
		  fnEchoC "${szScript}: Extracting ${szOldTarFile} ..." 1>&2
	        fi
		( cd ${szOldTarDir}; tar fx ${szOldTarFile} )
		if ${bVerbose}; then
		  echo " done!" 1>&2
		fi;;
  esac
  szOldTmpFile="/tmp/$$_files.old"
  szTmpFile="/tmp/$$_files.new"
  trap "rm -rf ${szRmOldTarFile} ${szRmOldTarDir} ${szOldTmpFile} ${szTmpFile} " 0 2
  unset szChangedFiles
  if [ -n "${szOldTarFile}" ]; then
    if [ -d "${szOldTarFile}" ]; then
      szOldAllFiles="`( cd ${szOldTarFile}; fnFindFiles ${szBootstrap} ) |sort`"
    else
      szOldAllFiles="`tar ft ${szOldTarFile}|sort`"
    fi
    if [ -n "${szOldAllFiles}" ]; then
      echo "${szOldAllFiles}"|sed 's/[	 ][	 ]*/\n/' > ${szOldTmpFile}
      echo "${szAllFiles}"|sed 's/[	 ][	 ]*/\n/' > ${szTmpFile}
      szChangedFiles="`fnCmpFiles "${bVerbose}" "${szOldTmpFile}" \
			          "${szTmpFile}" "${szOldTarDir}"|sort -u`"
    fi
  fi
  if [ -n "${szChangedFiles}" ]; then
    # Put all changed files into a -from- archive:
    if [ -n "${szOldNum}" ]; then
      szChangedTarFile="`echo "${szTarFile}"|sed 's|[.][^./]*$||'`-from-${szOldNum}.tar"
    else
      szChangedTarFile="`echo "${szTarFile}"|sed 's|[.][^./]*$||'`-from-old.tar"
    fi
    if ${bVerbose}; then
      fnEchoC "${szScript}: Creating ${szChangedTarFile} ..." 1>&2
    fi
    tar fc ${szChangedTarFile} ${szChangedFiles}
    if ${bVerbose}; then
      echo " done!" 1>&2
    fi
  fi
  rm -rf ${szRmOldTarFile} ${szRmOldTarDir} ${szOldTmpFile} ${szTmpFile}
  if ${bVerbose}; then
    fnEchoC "${szScript}: Creating ${szTarFile} ..." 1>&2
  fi
  tar fc ${szTarFile} ${szAllFiles}
  if ${bVerbose}; then
    echo " done!" 1>&2
  fi
 )
} # fnShipOut

# ----------------------------------------------------------------------
# Function	fnAssertToplevel
# Argument(s)	---
# Description	Check if the script was called from the top level
# ----------------------------------------------------------------------
fnAssertToplevel ()
{
  # Make sure we're in the PLOB top level directory:
  if [ ! -d "src/include/allegro5" ]; then
    echo "
*** ${szScript} can be called only in the top-level directory of PLOB!" 1>&2
    exit 1
  fi
  PATH="${PWD}/bin:${PATH}"; export PATH
} # fnAssertToplevel

# ----------------------------------------------------------------------
# Function	fnGetUname
# Argument(s)	---
# Description	Get operating system name(s)
# ----------------------------------------------------------------------
fnGetUname ()
{
  szDefaultUname="`( uname ) 2>/dev/null|sed 's/[^a-zA-Z0-9]//g'`"
  if [ -z "${szDefaultUname}" -a -n "${COMSPEC}" ]; then
    szDefaultUname='win32'
  fi
  szUname="${szDefaultUname}"
  while true; do
    while [ -z "${szUname}" ]; do
      fnPrompt szUname "${szDefaultUname}" "\
   What is the name of the operating
   system" "\
   The configuration script could either not determine the operating
   system name by calling uname or the name found is wrong. Please
   enter the operating system name here."
    done
    bSupported='yes'
    bDefaultClient='yes'
    bDefaultServer='yes'
    case "${szUname}" in
    [iI][rR][iI][xX]*)
      szOPSYS='IRIX';;
    *[lL][iI][nN]*)
      szOPSYS='LINUX';;
    [sS][uU][nN][oO][sS]*)
      case "`uname -r`" in
      [01234].*)
        szOPSYS='SUNOS';;
      *)
        szOPSYS='SOLARIS';;
      esac;;
    *[sS][oO][lL]*)
      szOPSYS='SOLARIS';;
    *[wW][iI][nN][nN][tT]*|*[wW][iI][nN]32*|*[cC][yY][gG][wW][iI][nN]*)
      szOPSYS='WIN32';;
    *)
      bSupported='no'
      szOPSYS=`echo "${szUname}"|sed '
s/[-0-9.].*$//
y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
      bDefaultServer='no';;
    esac
    unset szHelp szUname
    if [ "${bSupported}" = 'no' ]; then
      szHelp=" It looks as if ${szOPSYS}
   is an unsupported operating system, so please check the
   provided operating system name carefully."
    fi
    if fnYesOrNoP "${bSupported}" "\
   The operating system of this machine is ${szOPSYS}; is this
   correct" "\
   Confirm that the configuration script has determined the correct
   operating system of this machine.${szHelp}"; then
      break
    fi
  done
  szopsys=`echo "${szOPSYS}"|sed '
y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/'`
  szOpsys=`echo "${szopsys}"|sed '
h
y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/
s/^\(.\).*$/\1/
G
s/^\(.\)../\1/'`
  szConfFile="${szConfDir}/${szopsys}/make.vars.in"
} # fnGetUname

# ----------------------------------------------------------------------
# Mainline processing
# ----------------------------------------------------------------------

while [ $# -gt 0 ]; do
  case "$1" in
  '-conf')	szConfFile="$2"; shift;;
  *)		break;
  esac
  shift
done

case "$1" in
-server)	shift
		fnAssertToplevel
		fnInstallServer $*;;
-start)		shift
		fnAssertToplevel
		fnStartServer $*;;
-shipout)	shift
		fnAssertToplevel
		fnShipOut $*;;
-config)	shift
		fnAssertToplevel
		fnInstallBase $*;;
'')		fnAssertToplevel
		fnInstallBase -standard $*;;
esac

# Local variables:
# buffer-file-coding-system: iso-latin-1-unix
# End:
