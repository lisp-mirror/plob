#!/bin/sh
# 1997/03/26 HK kirschke@informatik.uni-hamburg.de

# Preprocess a makefile by cpp

# set -vx

# Constants:
CPP='gcc -E -P'
PATH="${PATH}:`dirname $0`"; export PATH
SHELL='/bin/sh'; export SHELL

szScript='plobimake'; export szScript
szSpaces='         '
nPID="$$"; export nPID

if [ -n "${TMP}" ]; then
  TMP="`echo \"${TMP}\"|sed 's|\\\\|/|'`"
elif [ -n "${TEMP}" ]; then
  TMP="`echo \"${TEMP}\"|sed 's|\\\\|/|'`"
elif [ -n "${TMPDIR}" ]; then
  TMP="`echo \"${TMPDIR}\"|sed 's|\\\\|/|'`"
elif [ -n "${TEMPDIR}" ]; then
  TMP="`echo \"${TEMPDIR}\"|sed 's|\\\\|/|'`"
else
  TMP="/tmp"
fi
export TMP

szTmpCfile="${TMP}/${nPID}_${szScript}.c"
szTmpOutfile="${TMP}/${nPID}_${szScript}.out"

# Defaults:
szDefaultDefines='-DIMAKE=1'
szDefaultIncludes=".:`pwd`:${PATH}"
szDefaultHeaderFile='makefile.in'
szDefaultMakeFile='makefile'

set +e

# ----------------------------------------------------------------------
# Funktion	fnUsage
# Argumente	---
# Beschreibung	Gibt einen Hilfstext aus.
# ----------------------------------------------------------------------
fnUsage () {
  echo "\
Usage: ${szScript} [-CPP <ANSI C preprocessor>]
       ${szSpaces} [-D <define>] [-I <include dir>{:<more include dirs>}]
       ${szSpaces} [-h] [-o <cpp'ed makefile>|-|--] [-v] [{<raw makefiles>}]
Description:
    Generates a <cpp'ed makefile> from <raw makefiles>.
Options:
    -CPP Use <ANSI C preprocessor> instead of '${CPP}'.
    -D	#define <define> to .h file.
    -I	Prepend <include dir> to standard #include dirs.
    -h	Show this help text.
    -o	Specifies the output file; '-' and '--' mean writing to
	stdout.
    -v	Verbous flag: show some information during processing." 1>&2
  exit 1
} # fnUsage

# ----------------------------------------------------------------------
# Funktion	fnTrimMakeFile
# Argumente	---
# Beschreibung	Entfernt ueberfluessige Leerzeilen und -zeichen.
# ----------------------------------------------------------------------
fnTrimMakeFile () {
  szOutputFile="$1";
  sed -n '
s/[^ -~]$//
s/=||/#/g
s/\([^ ]\) *\((\) *\([^ ]\)/\1\2\3/g
s/\([^ ]\) *\()\)/\1\2/g
:rmblank
/@[	 ][	 ]*\([bgqstn]\)[	 ]*@/ {
  s/[	 ]*@[	 ][	 ]*\([bgqstn]\)[	 ]*@[	 ]*/@\1@/g
  b rmblank
}
/@[	 ]*\([bgqstn]\)[	 ][	 ]*@/ {
  s/[	 ]*@[	 ]*\([bgqstn]\)[	 ][	 ]*@[	 ]*/@\1@/g
  b rmblank
}
/@[	 ][	 ]*\([bgqstn]\)[	 ][	 ]*@/ {
  s/[	 ][	 ]*@[	 ]*\([bgqstn]\)[	 ][	 ]*@[	 ]*/@\1@/g
  b rmblank
}
s/$/@n@/
:loopnln
/@n@/ {
  h
  s/[^!-~]*@n@.*$//
  b expand
:print
  /^[	 ]*$/ !p
  g
  s/@n@/@newline@/
  s/^.*@newline@[	 ]*//
  b loopnln
}
/^[	 ]*$/ !p
b
:expand
s/^  *//
:loopglu
/@g@/ {
 s/[	 ]*@g@[	 ]*//g
 b loopglu
}
:loopbsl
/@b@/ {
 s/[	 ]*@b@[	 ]*/\\/g
 b loopbsl
}
:loopsqu
/@q@/ {
 s/[	 ]*@q@[	 ]*/'"'"'/g
 b loopsqu
}
:loopspc
/@s@/ {
 s/[	 ]*@s@[	 ]*/ /g
 b loopspc
}
:looptab
/@t@/ {
 s/[	 ]*@t@[	 ]*/	/g
 b looptab
}
b print'
} # fnTrimMakeFile

# ----------------------------------------------------------------------
# Mainline
# ----------------------------------------------------------------------

trap "rm -f ${TMP}/${nPID}_${szScript}.*; exit 15" 1 2

unset szDefines szHeaderFile szMakeFile
bVerbous='false'
szHeaderFile="${szDefaultHeaderFile}"
szIncludes="${szDefaultIncludes}"
szMakeFile="${szDefaultMakeFile}"

while [ $# -gt 0 ]; do
  case "$1" in
  '-CPP')	CPP="$2"; shift;;
  '-D')		szDefines="${szDefines} $1$2"; shift;;
  '-D'*)	szDefines="${szDefines} $1";;
  '-I')		szIncludes="$2:${szIncludes}"; shift;;
  '-I'*)	szIncludes="`echo "$1"|sed 's/^-I *//'`:${szIncludes}";;
  '-h')		fnUsage; exit 1;;
  '-o')		szMakeFile="$2"; shift;;
  '+o')		unset szMakeFile;;
  '-v')		bVerbous='true';;
  '+v')		bVerbous='false';;
  '-'|'--')	shift; szHeaderFile="$*"; break;;
  '-'*|'+'*)	echo "${szScript}: W01: Ignoring unknown option '$1'" 1>&2;;
  *)		szHeaderFile="$*"; break;;
  esac
  shift
done

if [ -z "${szDefines}" ]; then
  szDefines="${szDefaultDefines}"
fi

case "${szMakeFile}" in
'-'|'--')	unset szMakeFile;;
esac

echo "/* Junk C file generated by ${szScript} */
#include	<plobimake.h>" > ${szTmpCfile}

if [ -z "${szHeaderFile}" ]; then
  cat >> ${szTmpCfile}
else
  for f in ${szHeaderFile}; do
    if [ -r "${f}" ]; then
      echo "#ifdef CurrentDirectory
#undef CurrentDirectory
#endif
#define CurrentDirectory `( cd \`dirname ${f}\`; pwd; )`
"'#include	"'"${f}"'"' >> ${szTmpCfile}
    else
      echo "${szScript}: E02: Can't read file ${f}" 1>&2
    fi
  done
fi

szCmdLine="${CPP}"
if ${bVerbous}; then
  szCmdLine="${szCmdLine} -v"
fi
szIncludes="`echo "${szIncludes}"|sed 's/:/ -I/g'`"
szCmdLine="${szCmdLine} ${szDefines} -I${szIncludes} ${szTmpCfile}"

if [ -z "${szMakeFile}" ]; then
  if ${bVerbous}; then
    echo "1. ${szCmdLine}" 1>&2
  fi
  ${szCmdLine}|fnTrimMakeFile 'stdout'
  nExitCode="$?"
else
  szDirectory="`dirname ${szMakeFile}`"
  if [ ! -d "${szDirectory}" ]; then
    echo "Creating directory ${szDirectory}" 1>&2
    mkdir ${szDirectory}
  fi
  if ${bVerbous}; then
    echo "2. ${szCmdLine} > ${szMakeFile}" 1>&2
  fi
  ${szCmdLine} > ${szTmpOutfile}
  nExitCode="$?"
  if [ "${nExitCode}" -eq 0 ]; then
    if [ -r "${szMakeFile}" ]; then
      mv ${szMakeFile} ${szMakeFile}.old
    fi
    case "`uname`" in
    *[cC][yY][gG][wW][iI][nN]*)
      fnTrimMakeFile `basename ${szMakeFile}` <${szTmpOutfile} >${TMP}/${nPID}_${szScript}.cr
      dos2unix ${TMP}/${nPID}_${szScript}.cr ${szMakeFile};;
    *)
      fnTrimMakeFile `basename ${szMakeFile}` <${szTmpOutfile} >${szMakeFile}
    esac
  else
    nExitCode='1'
  fi
fi
rm -f ${TMP}/${nPID}_${szScript}.*
exit ${nExitCode}

# Local variables:
# buffer-file-coding-system: iso-latin-1-unix
# End:
